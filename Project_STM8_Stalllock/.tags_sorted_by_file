MCU_HALT	STM8L15x_StdPeriph_Driver\inc\icc_measure.h	32;"	d
MCU_LPR	STM8L15x_StdPeriph_Driver\inc\icc_measure.h	31;"	d
MCU_LPR_LCD	STM8L15x_StdPeriph_Driver\inc\icc_measure.h	33;"	d
MCU_RUN	STM8L15x_StdPeriph_Driver\inc\icc_measure.h	30;"	d
__ICC_MEASURE_H	STM8L15x_StdPeriph_Driver\inc\icc_measure.h	23;"	d
ADC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2727;"	d
ADC1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2667;"	d
ADC_CR1_ADON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2195;"	d
ADC_CR1_AWDIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2199;"	d
ADC_CR1_CONT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2197;"	d
ADC_CR1_EOCIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2198;"	d
ADC_CR1_OVERIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2201;"	d
ADC_CR1_RES	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2200;"	d
ADC_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2168;"	d
ADC_CR1_START	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2196;"	d
ADC_CR2_EXTSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2205;"	d
ADC_CR2_PRESC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2207;"	d
ADC_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2169;"	d
ADC_CR2_SMPT1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2204;"	d
ADC_CR2_TRIGEDGE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2206;"	d
ADC_CR3_CHSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2209;"	d
ADC_CR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2170;"	d
ADC_CR3_SMPT2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2210;"	d
ADC_DRH_CONVDATA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2216;"	d
ADC_DRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2172;"	d
ADC_DRL_CONVDATA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2217;"	d
ADC_DRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2173;"	d
ADC_HTRH_HT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2219;"	d
ADC_HTRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2174;"	d
ADC_HTRL_HT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2220;"	d
ADC_HTRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2175;"	d
ADC_LTRH_LT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2222;"	d
ADC_LTRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2176;"	d
ADC_LTRL_LT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2223;"	d
ADC_LTRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2177;"	d
ADC_SQR1_CHSELS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2225;"	d
ADC_SQR1_DMAOFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2226;"	d
ADC_SQR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2178;"	d
ADC_SQR2_CHSELS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2227;"	d
ADC_SQR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2179;"	d
ADC_SQR3_CHSELS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2228;"	d
ADC_SQR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2180;"	d
ADC_SQR4_CHSELS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2229;"	d
ADC_SQR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2181;"	d
ADC_SR_AWD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2213;"	d
ADC_SR_EOC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2212;"	d
ADC_SR_OVER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2214;"	d
ADC_SR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2171;"	d
ADC_TRIGR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2182;"	d
ADC_TRIGR1_TRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2231;"	d
ADC_TRIGR1_TSON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2233;"	d
ADC_TRIGR1_VREFINTON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2232;"	d
ADC_TRIGR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2183;"	d
ADC_TRIGR2_TRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2235;"	d
ADC_TRIGR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2184;"	d
ADC_TRIGR3_TRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2236;"	d
ADC_TRIGR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2185;"	d
ADC_TRIGR4_TRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2237;"	d
ADC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^ADC_TypeDef;$/;"	t	typeref:struct:ADC_struct
ADC_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct ADC_struct$/;"	s
AES	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2726;"	d
AES_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2669;"	d
AES_CR_CCFC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2611;"	d
AES_CR_CCIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2609;"	d
AES_CR_DMAEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2607;"	d
AES_CR_EN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2613;"	d
AES_CR_ERRC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2610;"	d
AES_CR_ERRIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2608;"	d
AES_CR_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2612;"	d
AES_CR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2596;"	d
AES_DINR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2619;"	d
AES_DINR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2598;"	d
AES_DOUTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2620;"	d
AES_DOUTR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2599;"	d
AES_SR_CCF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2617;"	d
AES_SR_RDERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2616;"	d
AES_SR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2597;"	d
AES_SR_WRERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2615;"	d
AES_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^AES_TypeDef;$/;"	t	typeref:struct:AES_struct
AES_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct AES_struct$/;"	s
ALRMAR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMAR1; \/*!<  ALARM A  Register 1  *\/$/;"	m	struct:RTC_struct
ALRMAR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMAR2; \/*!<  ALARM A  Register 2 *\/$/;"	m	struct:RTC_struct
ALRMAR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMAR3; \/*!<  ALARM A  Register 3 *\/$/;"	m	struct:RTC_struct
ALRMAR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMAR4; \/*!<  ALARM A  Register 4 *\/$/;"	m	struct:RTC_struct
ALRMASSMSKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMASSMSKR; \/*!<  ALARM A Subsecond Mask Register  *\/$/;"	m	struct:RTC_struct
ALRMASSRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMASSRH; \/*!<  ALARM A Subsecond Register High *\/$/;"	m	struct:RTC_struct
ALRMASSRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ALRMASSRL; \/*!<  ALARM A Subsecond Register Low  *\/$/;"	m	struct:RTC_struct
APRER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t APRER;  \/*!<  Asynchronous Prediv  Register  *\/$/;"	m	struct:RTC_struct
AREA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2846;"	d
ARR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ARR;   \/*!< auto-reload register *\/$/;"	m	struct:TIM4_struct
ARRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ARRH;   \/*!< auto-reload register high  *\/$/;"	m	struct:TIM_struct
ARRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ARRH;  \/*!< auto-reload register high *\/$/;"	m	struct:TIM1_struct
ARRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ARRL;   \/*!< auto-reload register low    *\/$/;"	m	struct:TIM_struct
ARRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ARRL;  \/*!< auto-reload register low *\/$/;"	m	struct:TIM1_struct
ASCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ASCR1;  \/*!< Analog switch register 1 *\/$/;"	m	struct:RI_struct
ASCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ASCR2;  \/*!< Analog switch register 2 *\/$/;"	m	struct:RI_struct
AffBit	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2820;"	d
BEEP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2702;"	d
BEEP_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2652;"	d
BEEP_CSR1_MSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	590;"	d
BEEP_CSR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	579;"	d
BEEP_CSR2_BEEPDIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	594;"	d
BEEP_CSR2_BEEPEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	593;"	d
BEEP_CSR2_BEEPSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	592;"	d
BEEP_CSR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	580;"	d
BEEP_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^BEEP_TypeDef;$/;"	t	typeref:struct:BEEP_struct
BEEP_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct BEEP_struct$/;"	s
BKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t BKR;    \/*!< Break Register *\/$/;"	m	struct:TIM_struct
BKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t BKR;   \/*!< Break Register *\/$/;"	m	struct:TIM1_struct
BOR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t BOR;        \/*!< Brownout option *\/$/;"	m	struct:OPT_struct
BRR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t BRR1; \/*!<  USART baud rate register   *\/$/;"	m	struct:USART_struct
BRR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t BRR2; \/*!<  USART DIV mantissa[11:8] SCIDIV fraction *\/$/;"	m	struct:USART_struct
BYTE_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2827;"	d
BYTE_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2828;"	d
BYTE_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2829;"	d
BYTE_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2830;"	d
BitAction	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;$/;"	t	typeref:enum:__anon7
BitClr	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2848;"	d
BitSet	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2849;"	d
BitStatus	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;$/;"	t	typeref:enum:__anon7
BitVal	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2850;"	d
CALRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CALRH; \/*!<  Calibration register high  *\/$/;"	m	struct:RTC_struct
CALRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CALRL; \/*!<  Calibration register low  *\/$/;"	m	struct:RTC_struct
CBEEPR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CBEEPR;     \/*!< Clock BEEP Register *\/$/;"	m	struct:CLK_struct
CCER1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCER1;  \/*!< CC enable register 1     *\/$/;"	m	struct:TIM_struct
CCER1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCER1; \/*!< CC enable register 1 *\/$/;"	m	struct:TIM1_struct
CCER2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCER2; \/*!< CC enable register 2 *\/$/;"	m	struct:TIM1_struct
CCMR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCMR1;  \/*!< CC mode register 1      *\/$/;"	m	struct:TIM_struct
CCMR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCMR1; \/*!< CC mode register 1 *\/$/;"	m	struct:TIM1_struct
CCMR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCMR2;  \/*!< CC mode register 2      *\/$/;"	m	struct:TIM_struct
CCMR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCMR2; \/*!< CC mode register 2 *\/$/;"	m	struct:TIM1_struct
CCMR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCMR3; \/*!< CC mode register 3 *\/$/;"	m	struct:TIM1_struct
CCMR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCMR4; \/*!< CC mode register 4 *\/$/;"	m	struct:TIM1_struct
CCMR_TIxDirect_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1717;"	d
CCOR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCOR;       \/*!< Configurable Clock Output Register *\/$/;"	m	struct:CLK_struct
CCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CCR;       \/*!<  CHx Control register  *\/$/;"	m	struct:DMA_Channel_struct
CCR1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR1H;  \/*!< capture\/compare register 1 high   *\/$/;"	m	struct:TIM_struct
CCR1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR1H; \/*!< capture\/compare register 1 high *\/$/;"	m	struct:TIM1_struct
CCR1L	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR1L;  \/*!< capture\/compare register 1 low     *\/$/;"	m	struct:TIM_struct
CCR1L	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR1L; \/*!< capture\/compare register 1 low *\/$/;"	m	struct:TIM1_struct
CCR2H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR2H;  \/*!< capture\/compare register 2 high   *\/$/;"	m	struct:TIM_struct
CCR2H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR2H; \/*!< capture\/compare register 2 high *\/$/;"	m	struct:TIM1_struct
CCR2L	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR2L;  \/*!< capture\/compare register 2 low     *\/$/;"	m	struct:TIM_struct
CCR2L	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR2L; \/*!< capture\/compare register 2 low *\/$/;"	m	struct:TIM1_struct
CCR3H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR3H; \/*!< capture\/compare register 3 high *\/$/;"	m	struct:TIM1_struct
CCR3L	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR3L; \/*!< capture\/compare register 3 low *\/$/;"	m	struct:TIM1_struct
CCR4H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR4H; \/*!< capture\/compare register 3 high *\/$/;"	m	struct:TIM1_struct
CCR4L	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCR4L; \/*!< capture\/compare register 3 low *\/$/;"	m	struct:TIM1_struct
CCRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCRH;   \/*!< I2C clock control register high *\/$/;"	m	struct:I2C_struct
CCRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CCRL;   \/*!< I2C clock control register low *\/$/;"	m	struct:I2C_struct
CFG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2728;"	d
CFG_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2673;"	d
CFG_GCR_AL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	627;"	d
CFG_GCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	616;"	d
CFG_GCR_SWD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	626;"	d
CFG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^CFG_TypeDef;$/;"	t	typeref:struct:CFG_struct
CFG_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct CFG_struct$/;"	s
CH1CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1CR1;   \/*!< DAC control register 1  *\/$/;"	m	struct:DAC_struct
CH1CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1CR2;   \/*!< DAC control register 2  *\/$/;"	m	struct:DAC_struct
CH1DHR8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1DHR8; \/*!< DAC Channel 1 8-bit data holding register *\/$/;"	m	struct:DAC_struct
CH1DORH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1DORH; \/*!< DAC Channel 1 data output register MSB *\/$/;"	m	struct:DAC_struct
CH1DORL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1DORL; \/*!< DAC Channel 1 data output register LSB *\/$/;"	m	struct:DAC_struct
CH1LDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1LDHRH; \/*!< DAC Channel 1 left aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
CH1LDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1LDHRL; \/*!< DAC Channel 1 left aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
CH1RDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1RDHRH; \/*!< DAC Channel 1 right aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
CH1RDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH1RDHRL; \/*!< DAC Channel 1 right aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
CH2CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2CR1;   \/*!< DAC channel 2 control register 1  *\/$/;"	m	struct:DAC_struct
CH2CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2CR2;   \/*!< DAC channel 2 control register 2  *\/$/;"	m	struct:DAC_struct
CH2DHR8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2DHR8; \/*!< DAC Channel 2 8-bit data holding register *\/$/;"	m	struct:DAC_struct
CH2DORH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2DORH; \/*!< DAC Channel 2 data output register MSB *\/$/;"	m	struct:DAC_struct
CH2DORL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2DORL; \/*!< DAC Channel 2 data output register LSB *\/$/;"	m	struct:DAC_struct
CH2LDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2LDHRH; \/*!< DAC Channel 2 left aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
CH2LDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2LDHRL; \/*!< DAC Channel 2 left aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
CH2RDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2RDHRH; \/*!< DAC Channel 2 right aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
CH2RDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CH2RDHRL; \/*!< DAC Channel 2 right aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
CKDIVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CKDIVR;      \/*!< Clock Master Divider Register *\/$/;"	m	struct:CLK_struct
CLK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2697;"	d
CLK_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2649;"	d
CLK_CBEEPR_BEEPSWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	809;"	d
CLK_CBEEPR_CLKBEEPSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	808;"	d
CLK_CBEEPR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	732;"	d
CLK_CCOR_CCODIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	782;"	d
CLK_CCOR_CCOSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	783;"	d
CLK_CCOR_CCOSWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	784;"	d
CLK_CCOR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	726;"	d
CLK_CKDIVR_CKM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	745;"	d
CLK_CKDIVR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	720;"	d
CLK_CRTCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	721;"	d
CLK_CRTCR_RTCDIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	747;"	d
CLK_CRTCR_RTCSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	748;"	d
CLK_CRTCR_RTCSWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	749;"	d
CLK_CSSR_AUX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	805;"	d
CLK_CSSR_CSSD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	803;"	d
CLK_CSSR_CSSDGON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	802;"	d
CLK_CSSR_CSSDIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	804;"	d
CLK_CSSR_CSSEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	806;"	d
CLK_CSSR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	731;"	d
CLK_ECKCR_HSEBYP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	787;"	d
CLK_ECKCR_HSEON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	791;"	d
CLK_ECKCR_HSERDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	790;"	d
CLK_ECKCR_LSEBYP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	786;"	d
CLK_ECKCR_LSEON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	789;"	d
CLK_ECKCR_LSERDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	788;"	d
CLK_ECKCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	727;"	d
CLK_HSICALR_HSICAL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	811;"	d
CLK_HSICALR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	733;"	d
CLK_HSITRIMR_HSITRIM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	813;"	d
CLK_HSITRIMR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	734;"	d
CLK_HSIUNLCKR_HSIUNLCK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	815;"	d
CLK_HSIUNLCKR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	735;"	d
CLK_ICKCR_BEEPAHALT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	751;"	d
CLK_ICKCR_FHWU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	752;"	d
CLK_ICKCR_HSION	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	757;"	d
CLK_ICKCR_HSIRDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	756;"	d
CLK_ICKCR_LSION	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	755;"	d
CLK_ICKCR_LSIRDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	754;"	d
CLK_ICKCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	722;"	d
CLK_ICKCR_SAHALT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	753;"	d
CLK_PCKENR1_BEEP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	765;"	d
CLK_PCKENR1_DAC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	766;"	d
CLK_PCKENR1_I2C1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	762;"	d
CLK_PCKENR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	723;"	d
CLK_PCKENR1_SPI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	763;"	d
CLK_PCKENR1_TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	759;"	d
CLK_PCKENR1_TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	760;"	d
CLK_PCKENR1_TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	761;"	d
CLK_PCKENR1_USART1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	764;"	d
CLK_PCKENR2_ADC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	768;"	d
CLK_PCKENR2_BOOTROM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	774;"	d
CLK_PCKENR2_COMP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	773;"	d
CLK_PCKENR2_DMA1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	772;"	d
CLK_PCKENR2_LCD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	771;"	d
CLK_PCKENR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	724;"	d
CLK_PCKENR2_RTC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	770;"	d
CLK_PCKENR2_TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	769;"	d
CLK_PCKENR3_AES	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	776;"	d
CLK_PCKENR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	725;"	d
CLK_PCKENR3_SPI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	778;"	d
CLK_PCKENR3_TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	777;"	d
CLK_PCKENR3_UASRT2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	779;"	d
CLK_PCKENR3_USART3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	780;"	d
CLK_REGCSR_EEBUSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	818;"	d
CLK_REGCSR_EEREADY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	817;"	d
CLK_REGCSR_HSEPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	820;"	d
CLK_REGCSR_HSIPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	822;"	d
CLK_REGCSR_LSEPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	819;"	d
CLK_REGCSR_LSIPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	821;"	d
CLK_REGCSR_REGOFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	823;"	d
CLK_REGCSR_REGREADY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	824;"	d
CLK_REGCSR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	736;"	d
CLK_SCSR_CKM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	793;"	d
CLK_SCSR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	728;"	d
CLK_SWCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	730;"	d
CLK_SWCR_SWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	800;"	d
CLK_SWCR_SWEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	799;"	d
CLK_SWCR_SWIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	798;"	d
CLK_SWCR_SWIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	797;"	d
CLK_SWR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	729;"	d
CLK_SWR_SWI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	795;"	d
CLK_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^CLK_TypeDef;$/;"	t	typeref:struct:CLK_struct
CLK_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct CLK_struct$/;"	s
CM0ARH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CM0ARH;    \/*!<  Memory 0 Address High register  *\/$/;"	m	struct:DMA_Channel_struct
CM0ARL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CM0ARL;    \/*!<  Memory 0 Address Low register  *\/$/;"	m	struct:DMA_Channel_struct
CM0EAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CM0EAR;    \/*!<  Memory 0 Extended Address register  (for channel3)*\/$/;"	m	struct:DMA_Channel_struct
CNBTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CNBTR;     \/*!<  CHx Number of Bytes to Tranfer register  *\/$/;"	m	struct:DMA_Channel_struct
CNTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CNTR;  \/*!< counter register  *\/$/;"	m	struct:TIM4_struct
CNTRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CNTRH;  \/*!< counterregister  high  *\/$/;"	m	struct:TIM_struct
CNTRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CNTRH; \/*!< counter high *\/$/;"	m	struct:TIM1_struct
CNTRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CNTRL;  \/*!< counterregister  low   *\/$/;"	m	struct:TIM_struct
CNTRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CNTRL; \/*!< counter low *\/$/;"	m	struct:TIM1_struct
COMP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2725;"	d
COMP_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2672;"	d
COMP_CSR1_CMP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	868;"	d
COMP_CSR1_CMP1OUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	866;"	d
COMP_CSR1_EF1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	865;"	d
COMP_CSR1_IE1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	864;"	d
COMP_CSR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	849;"	d
COMP_CSR1_STE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	867;"	d
COMP_CSR2_CMP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	875;"	d
COMP_CSR2_CMP2OUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	873;"	d
COMP_CSR2_EF2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	872;"	d
COMP_CSR2_IE2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	871;"	d
COMP_CSR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	850;"	d
COMP_CSR2_SPEED	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	874;"	d
COMP_CSR3_INSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	879;"	d
COMP_CSR3_OUTSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	878;"	d
COMP_CSR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	851;"	d
COMP_CSR3_VREFEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	880;"	d
COMP_CSR3_VREFOUTEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	882;"	d
COMP_CSR3_WNDWE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	881;"	d
COMP_CSR4_INVTRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	886;"	d
COMP_CSR4_NINVTRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	885;"	d
COMP_CSR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	852;"	d
COMP_CSR5_DACTRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	889;"	d
COMP_CSR5_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	853;"	d
COMP_CSR5_VREFTRIG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	890;"	d
COMP_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^COMP_TypeDef;$/;"	t	typeref:struct:COMP_struct
COMP_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct COMP_struct$/;"	s
CONF1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CONF1;         \/*!<  Port interrupt selector *\/$/;"	m	struct:EXTI_struct
CONF2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CONF2;         \/*!<  Port interrupt selector *\/$/;"	m	struct:EXTI_struct
CPARH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CPARH;     \/*!<  Peripheral Address High register  *\/$/;"	m	struct:DMA_Channel_struct
CPARL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CPARL;     \/*!<  Peripheral Address Low register  *\/$/;"	m	struct:DMA_Channel_struct
CR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR;      \/*!< AES control register     *\/$/;"	m	struct:AES_struct
CR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR;  \/*!< Multiplex Reset Pad *\/$/;"	m	struct:RST_struct
CR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR; \/*!< Control Register *\/$/;"	m	struct:WWDG_struct
CR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR; \/*!< control register *\/$/;"	m	struct:IRTIM_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   CR1;      \/*!< Control register 1    *\/$/;"	m	struct:ADC_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;           \/*!<  The four LSB EXTI  pin sensitivity *\/$/;"	m	struct:EXTI_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;        \/*!< Flash control register 1 *\/$/;"	m	struct:FLASH_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;      \/*!< LCD control register 1 *\/$/;"	m	struct:LCD_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;    \/*!< I2C control register 1 *\/$/;"	m	struct:I2C_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;    \/*!< SPI control register 1 *\/$/;"	m	struct:SPI_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;    \/*!< control register 1   *\/$/;"	m	struct:TIM_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;   \/*!< control register 1 *\/$/;"	m	struct:TIM1_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;   \/*!< control register 1 *\/$/;"	m	struct:TIM4_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;  \/*!<  USART control register 1     *\/$/;"	m	struct:USART_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1;  \/*!<  Wait for event control register 1 *\/$/;"	m	struct:WFE_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1; \/*!<  Control  Register  1*\/$/;"	m	struct:RTC_struct
CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR1; \/*!< Configuration Register 1 *\/$/;"	m	struct:GPIO_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   CR2;      \/*!< Control register 2    *\/$/;"	m	struct:ADC_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;           \/*!<  The four MSB EXTI  pin sensitivity *\/$/;"	m	struct:EXTI_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;        \/*!< Flash control register 2 *\/$/;"	m	struct:FLASH_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;      \/*!< LCD control register 2 *\/$/;"	m	struct:LCD_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;    \/*!< I2C control register 2 *\/$/;"	m	struct:I2C_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;    \/*!< SPI control register 2 *\/$/;"	m	struct:SPI_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;    \/*!< control register 2   *\/$/;"	m	struct:TIM_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;   \/*!< control register 2 *\/$/;"	m	struct:TIM1_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;   \/*!< control register 2 *\/$/;"	m	struct:TIM4_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;  \/*!<  USART control register 2     *\/$/;"	m	struct:USART_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2;  \/*!<  Wait for event control register 2 *\/$/;"	m	struct:WFE_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2; \/*!<  Control  Register  2*\/$/;"	m	struct:RTC_struct
CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR2; \/*!< Configuration Register 2 *\/$/;"	m	struct:GPIO_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   CR3;      \/*!<  Control register 3    *\/$/;"	m	struct:ADC_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR3;           \/*!<  EXTI port B & port D sensitivity *\/$/;"	m	struct:EXTI_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR3;      \/*!< LCD control register 3 *\/$/;"	m	struct:LCD_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR3;    \/*!< SPI DMA and interrupt control register *\/$/;"	m	struct:SPI_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR3;  \/*!<  USART control register 3      *\/$/;"	m	struct:USART_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR3;  \/*!<  Wait for event control register 3 *\/$/;"	m	struct:WFE_struct
CR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR3; \/*!<  Control  Register  3*\/$/;"	m	struct:RTC_struct
CR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR4;           \/*!<  EXTI port G & port H sensitivity *\/$/;"	m	struct:EXTI_struct
CR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR4;      \/*!< LCD control register 4 *\/$/;"	m	struct:LCD_struct
CR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR4;  \/*!<  Wait for event control register 4 *\/$/;"	m	struct:WFE_struct
CR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR4;  \/*!< USART control register 4      *\/$/;"	m	struct:USART_struct
CR5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CR5;  \/*!<  USART control register 5       *\/$/;"	m	struct:USART_struct
CRCPR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CRCPR;  \/*!< SPI CRC polynomial register *\/$/;"	m	struct:SPI_struct
CRTCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CRTCR;  \/*!< RTC Clock selection Register *\/$/;"	m	struct:CLK_struct
CSPR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  CSPR;      \/*!<  CHx Status & Priority register  *\/$/;"	m	struct:DMA_Channel_struct
CSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR; \/*!<  Control and Status Register*\/$/;"	m	struct:CSSLSE_struct
CSR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR1;          \/*!< PWR control status register 1 *\/$/;"	m	struct:PWR_struct
CSR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR1;   \/*!< Control status register 1  *\/$/;"	m	struct:COMP_struct
CSR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR1; \/*!< BEEP Control status register1 *\/$/;"	m	struct:BEEP_struct
CSR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR2;          \/*!< PWR control status register 2 *\/$/;"	m	struct:PWR_struct
CSR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR2;   \/*!< Control status register 2  *\/$/;"	m	struct:COMP_struct
CSR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR2; \/*!< BEEP Control status register2 *\/$/;"	m	struct:BEEP_struct
CSR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR3;   \/*!< Control status register 3  *\/$/;"	m	struct:COMP_struct
CSR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR4;   \/*!< Control status register 4  *\/$/;"	m	struct:COMP_struct
CSR5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSR5;   \/*!< Control status register 5  *\/$/;"	m	struct:COMP_struct
CSSLSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2698;"	d
CSSLSE_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2654;"	d
CSSLSE_CSR_CSSEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	557;"	d
CSSLSE_CSR_CSSF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	554;"	d
CSSLSE_CSR_CSSIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	555;"	d
CSSLSE_CSR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	542;"	d
CSSLSE_CSR_SWITCHEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	556;"	d
CSSLSE_CSR_SWITCHF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	553;"	d
CSSLSE_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^CSSLSE_TypeDef;$/;"	t	typeref:struct:CSSLSE_struct
CSSLSE_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct CSSLSE_struct$/;"	s
CSSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t CSSR;     \/*!< Clock Security Sytem Register *\/$/;"	m	struct:CLK_struct
ChgBit	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2819;"	d
ClrBit	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2817;"	d
DAC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2717;"	d
DAC_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2668;"	d
DAC_CR1_BOFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2326;"	d
DAC_CR1_EN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2327;"	d
DAC_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2304;"	d
DAC_CR1_TEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2325;"	d
DAC_CR1_TSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2324;"	d
DAC_CR1_WAVEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2328;"	d
DAC_CR2_DMAEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2332;"	d
DAC_CR2_DMAUDRIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2331;"	d
DAC_CR2_MAMPx	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2333;"	d
DAC_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2305;"	d
DAC_DHR8_8DHR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2356;"	d
DAC_DHR8_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2312;"	d
DAC_DORH_DORH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2359;"	d
DAC_DORH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2313;"	d
DAC_DORL_DORL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2362;"	d
DAC_DORL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2314;"	d
DAC_LDHRH_LDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2350;"	d
DAC_LDHRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2310;"	d
DAC_LDHRL_LDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2353;"	d
DAC_LDHRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2311;"	d
DAC_RDHRH_RDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2344;"	d
DAC_RDHRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2308;"	d
DAC_RDHRL_RDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2347;"	d
DAC_RDHRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2309;"	d
DAC_SR_DMAUDR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2340;"	d
DAC_SR_DMAUDR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2341;"	d
DAC_SR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2307;"	d
DAC_SWTRIGR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2306;"	d
DAC_SWTRIGR_SWTRIG1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2336;"	d
DAC_SWTRIGR_SWTRIG2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2337;"	d
DAC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^DAC_TypeDef;$/;"	t	typeref:struct:DAC_struct
DAC_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct DAC_struct$/;"	s
DCH1DHR8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH1DHR8; \/*!< DAC Dual mode Channel 1 8-bit data holding register *\/$/;"	m	struct:DAC_struct
DCH1LDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH1LDHRH; \/*!< DAC Dual mode Channel 1 left aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
DCH1LDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH1LDHRL; \/*!< DAC Dual mode Channel 1 left aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
DCH1RDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH1RDHRH; \/*!< DAC Dual mode Channel 1 right aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
DCH1RDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH1RDHRL; \/*!< DAC Dual mode Channel 1 right aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
DCH2DHR8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH2DHR8; \/*!< DAC Dual mode Channel 2 8-bit data holding register *\/$/;"	m	struct:DAC_struct
DCH2LDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH2LDHRH; \/*!< DAC Dual mode Channel 2 left aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
DCH2LDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH2LDHRL; \/*!< DAC Dual mode Channel 2 left aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
DCH2RDHRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH2RDHRH; \/*!< DAC Dual mode Channel 2 right aligned data holding register MSB *\/$/;"	m	struct:DAC_struct
DCH2RDHRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  DCH2RDHRL; \/*!< DAC Dual mode Channel 2 right aligned data holding register LSB *\/$/;"	m	struct:DAC_struct
DCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DCR1;  \/*!< DMA control register 1 *\/$/;"	m	struct:TIM1_struct
DCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DCR2;  \/*!< DMA control register 2 *\/$/;"	m	struct:TIM1_struct
DDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DDR; \/*!< Data Direction Register *\/$/;"	m	struct:GPIO_struct
DER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DER;    \/*!< DMA requests enable register *\/$/;"	m	struct:TIM_struct
DER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DER;   \/*!< DMA requests enable register *\/$/;"	m	struct:TIM1_struct
DER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DER;   \/*!< DMA requests enable register *\/$/;"	m	struct:TIM4_struct
DINR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DINR;    \/*!< AES Data input register  *\/$/;"	m	struct:AES_struct
DISABLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;$/;"	e	enum:__anon8
DM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2723;"	d
DMA1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2718;"	d
DMA1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2639;"	d
DMA1_Channel0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2719;"	d
DMA1_Channel0_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2640;"	d
DMA1_Channel1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2720;"	d
DMA1_Channel1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2641;"	d
DMA1_Channel2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2721;"	d
DMA1_Channel2_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2642;"	d
DMA1_Channel3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2722;"	d
DMA1_Channel3_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2643;"	d
DMAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DMAR;  \/*!< DMA Address for brust mode *\/$/;"	m	struct:TIM1_struct
DMA_C3M0EAR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2416;"	d
DMA_C3PARH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2414;"	d
DMA_CCR_ARM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2441;"	d
DMA_CCR_CE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2437;"	d
DMA_CCR_DTD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2440;"	d
DMA_CCR_HTIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2439;"	d
DMA_CCR_IDM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2442;"	d
DMA_CCR_MEM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2443;"	d
DMA_CCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2410;"	d
DMA_CCR_TCIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2438;"	d
DMA_CM0ARH_MA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2467;"	d
DMA_CM0ARH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2417;"	d
DMA_CM0ARL_MA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2468;"	d
DMA_CM0ARL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2418;"	d
DMA_CM0EAR_MA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2466;"	d
DMA_CNBTR_NDT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2456;"	d
DMA_CNBTR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2412;"	d
DMA_CPARH_PA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2460;"	d
DMA_CPARH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2413;"	d
DMA_CPARL_PA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2462;"	d
DMA_CPARL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2415;"	d
DMA_CSPR_16BM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2449;"	d
DMA_CSPR_BUSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2452;"	d
DMA_CSPR_HTIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2448;"	d
DMA_CSPR_PEND	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2451;"	d
DMA_CSPR_PL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2450;"	d
DMA_CSPR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2411;"	d
DMA_CSPR_TCIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2447;"	d
DMA_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^DMA_Channel_TypeDef;$/;"	t	typeref:struct:DMA_Channel_struct
DMA_Channel_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct DMA_Channel_struct$/;"	s
DMA_GCSR_GB	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2426;"	d
DMA_GCSR_GE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2425;"	d
DMA_GCSR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2401;"	d
DMA_GCSR_TO	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2427;"	d
DMA_GIR1_IFC0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2430;"	d
DMA_GIR1_IFC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2431;"	d
DMA_GIR1_IFC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2432;"	d
DMA_GIR1_IFC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2433;"	d
DMA_GIR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2402;"	d
DMA_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^DMA_TypeDef;$/;"	t	typeref:struct:DMA_struct
DMA_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct DMA_struct$/;"	s
DM_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2675;"	d
DOUTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DOUTR;   \/*!< AES Data output register *\/$/;"	m	struct:AES_struct
DR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DR;     \/*!< I2C data register *\/$/;"	m	struct:I2C_struct
DR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DR;     \/*!< SPI data I\/O register *\/$/;"	m	struct:SPI_struct
DR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DR;   \/*!<  USART data register     *\/$/;"	m	struct:USART_struct
DR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DR1; \/*!<  Date  Register  1*\/$/;"	m	struct:RTC_struct
DR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DR2; \/*!<  Date  Register  2*\/$/;"	m	struct:RTC_struct
DR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DR3; \/*!<  Date  Register  3*\/$/;"	m	struct:RTC_struct
DRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   DRH;      \/*!< Data register MSB    *\/$/;"	m	struct:ADC_struct
DRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   DRL;      \/*!< Data register LSB    *\/$/;"	m	struct:ADC_struct
DTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DTR;   \/*!< dead-time register *\/$/;"	m	struct:TIM1_struct
DUKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t DUKR;       \/*!< Data EEPROM unprotection register *\/$/;"	m	struct:FLASH_struct
ECKCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ECKCR;     \/*!< External Clocks Control Register *\/$/;"	m	struct:CLK_struct
EEPROM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	103;"	d
EEPROM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	110;"	d
EEPROM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	124;"	d
EGR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t EGR;    \/*!< event generation register *\/$/;"	m	struct:TIM_struct
EGR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t EGR;   \/*!< event generation register *\/$/;"	m	struct:TIM1_struct
EGR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t EGR;   \/*!< event generation register *\/$/;"	m	struct:TIM4_struct
ENABLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;$/;"	e	enum:__anon8
ERROR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;$/;"	e	enum:__anon9
ETR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ETR;    \/*!< external trigger register *\/$/;"	m	struct:TIM_struct
ETR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ETR;   \/*!< external trigger register *\/$/;"	m	struct:TIM1_struct
EXTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2694;"	d
EXTI_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2645;"	d
EXTI_CONF1_PBHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	955;"	d
EXTI_CONF1_PBLIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	954;"	d
EXTI_CONF1_PDHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	957;"	d
EXTI_CONF1_PDLIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	956;"	d
EXTI_CONF1_PEHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	959;"	d
EXTI_CONF1_PELIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	958;"	d
EXTI_CONF1_PFES	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	961;"	d
EXTI_CONF1_PFLIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	960;"	d
EXTI_CONF1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	922;"	d
EXTI_CONF2_PFHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	968;"	d
EXTI_CONF2_PGBS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	973;"	d
EXTI_CONF2_PGHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	970;"	d
EXTI_CONF2_PGLIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	969;"	d
EXTI_CONF2_PHDS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	974;"	d
EXTI_CONF2_PHHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	972;"	d
EXTI_CONF2_PHLIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	971;"	d
EXTI_CONF2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	926;"	d
EXTI_CR1_P0IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	939;"	d
EXTI_CR1_P1IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	938;"	d
EXTI_CR1_P2IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	937;"	d
EXTI_CR1_P3IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	936;"	d
EXTI_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	919;"	d
EXTI_CR2_P4IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	945;"	d
EXTI_CR2_P5IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	944;"	d
EXTI_CR2_P6IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	943;"	d
EXTI_CR2_P7IS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	942;"	d
EXTI_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	920;"	d
EXTI_CR3_PBIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	948;"	d
EXTI_CR3_PDIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	949;"	d
EXTI_CR3_PEIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	950;"	d
EXTI_CR3_PFIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	951;"	d
EXTI_CR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	921;"	d
EXTI_CR4_PGIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	964;"	d
EXTI_CR4_PHIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	965;"	d
EXTI_CR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	925;"	d
EXTI_SR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	923;"	d
EXTI_SR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	924;"	d
EXTI_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^EXTI_TypeDef;$/;"	t	typeref:struct:EXTI_struct
EXTI_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct EXTI_struct$/;"	s
ErrorStatus	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;$/;"	t	typeref:enum:__anon9
FALSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {FALSE = 0, TRUE = !FALSE} bool;$/;"	e	enum:__anon6
FAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	100;"	d
FAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	107;"	d
FAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	121;"	d
FLASH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2693;"	d
FLASH_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2638;"	d
FLASH_CR1_EEPM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1012;"	d
FLASH_CR1_FIX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1015;"	d
FLASH_CR1_IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1014;"	d
FLASH_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	998;"	d
FLASH_CR1_WAITM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1013;"	d
FLASH_CR2_ERASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1019;"	d
FLASH_CR2_FPRG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1020;"	d
FLASH_CR2_OPT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1017;"	d
FLASH_CR2_PRG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1021;"	d
FLASH_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	999;"	d
FLASH_CR2_WPRG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1018;"	d
FLASH_DUKR_DUK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1031;"	d
FLASH_DUKR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1001;"	d
FLASH_IAPSR_DUL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1024;"	d
FLASH_IAPSR_EOP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1025;"	d
FLASH_IAPSR_HVOFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1023;"	d
FLASH_IAPSR_PUL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1026;"	d
FLASH_IAPSR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1002;"	d
FLASH_IAPSR_WR_PG_DIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1027;"	d
FLASH_PUKR_PUK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1029;"	d
FLASH_PUKR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1000;"	d
FLASH_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^FLASH_TypeDef;$/;"	t	typeref:struct:FLASH_struct
FLASH_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct FLASH_struct$/;"	s
FREQR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t FREQR;  \/*!< I2C frequency register *\/$/;"	m	struct:I2C_struct
FRQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t FRQ;      \/*!< LCD frequency register *\/$/;"	m	struct:LCD_struct
FlagStatus	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;$/;"	t	typeref:enum:__anon7
FunctionalState	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;$/;"	t	typeref:enum:__anon8
GCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t GCR; \/*!< Global Configuration register *\/$/;"	m	struct:CFG_struct
GCSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  GCSR;     \/*!<  Global configuration and status register  *\/$/;"	m	struct:DMA_struct
GIR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  GIR1;     \/*!<  Global interrupt register 1  *\/$/;"	m	struct:DMA_struct
GPIOA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2683;"	d
GPIOA_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2629;"	d
GPIOB	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2684;"	d
GPIOB_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2630;"	d
GPIOC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2685;"	d
GPIOC_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2631;"	d
GPIOD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2686;"	d
GPIOD_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2632;"	d
GPIOE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2687;"	d
GPIOE_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2633;"	d
GPIOF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2688;"	d
GPIOF_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2634;"	d
GPIOG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2689;"	d
GPIOG_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2635;"	d
GPIOH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2690;"	d
GPIOH_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2636;"	d
GPIOI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2691;"	d
GPIOI_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2637;"	d
GPIO_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	256;"	d
GPIO_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	257;"	d
GPIO_DDR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	255;"	d
GPIO_ODR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	254;"	d
GPIO_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^GPIO_TypeDef;$/;"	t	typeref:struct:GPIO_struct
GPIO_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct GPIO_struct$/;"	s
GTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t GTR;  \/*!<  USART guard time register     *\/$/;"	m	struct:USART_struct
HSE_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	85;"	d
HSICALR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t HSICALR;     \/*!< HSI Calibration Register *\/$/;"	m	struct:CLK_struct
HSITRIMR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t HSITRIMR; \/*!< HSI clock Calibration Trimmer Register *\/$/;"	m	struct:CLK_struct
HSIUNLCKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t HSIUNLCKR; \/*!< HSI Unlock  Register *\/$/;"	m	struct:CLK_struct
HSI_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	96;"	d
HTRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   HTRH;     \/*!< High voltage reference register MSB    *\/$/;"	m	struct:ADC_struct
HTRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   HTRL;     \/*!< High voltage reference register LSB    *\/$/;"	m	struct:ADC_struct
I2C1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2705;"	d
I2C1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2657;"	d
I2C_CCRH_CCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1155;"	d
I2C_CCRH_DUTY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1154;"	d
I2C_CCRH_FS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1153;"	d
I2C_CCRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1078;"	d
I2C_CCRL_CCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1151;"	d
I2C_CCRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1077;"	d
I2C_CR1_ARP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1093;"	d
I2C_CR1_ENGC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1091;"	d
I2C_CR1_ENPEC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1092;"	d
I2C_CR1_NOSTRETCH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1090;"	d
I2C_CR1_PE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1096;"	d
I2C_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1066;"	d
I2C_CR1_SMBTYPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1094;"	d
I2C_CR1_SMBUS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1095;"	d
I2C_CR2_ACK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1102;"	d
I2C_CR2_ALERT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1099;"	d
I2C_CR2_PEC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1100;"	d
I2C_CR2_POS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1101;"	d
I2C_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1067;"	d
I2C_CR2_START	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1104;"	d
I2C_CR2_STOP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1103;"	d
I2C_CR2_SWRST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1098;"	d
I2C_DR_DR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1118;"	d
I2C_DR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1072;"	d
I2C_FREQR_FREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1106;"	d
I2C_FREQR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1068;"	d
I2C_ITR_DMAEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1146;"	d
I2C_ITR_ITBUFEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1147;"	d
I2C_ITR_ITERREN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1149;"	d
I2C_ITR_ITEVTEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1148;"	d
I2C_ITR_LAST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1145;"	d
I2C_ITR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1076;"	d
I2C_OAR2_ADD2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1115;"	d
I2C_OAR2_ENDUAL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1116;"	d
I2C_OAR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1071;"	d
I2C_OARH_ADD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1113;"	d
I2C_OARH_ADDCONF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1112;"	d
I2C_OARH_ADDMODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1111;"	d
I2C_OARH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1070;"	d
I2C_OARL_ADD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1108;"	d
I2C_OARL_ADD0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1109;"	d
I2C_OARL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1069;"	d
I2C_PECR_PEC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1159;"	d
I2C_PECR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1080;"	d
I2C_SR1_ADD10	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1123;"	d
I2C_SR1_ADDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1125;"	d
I2C_SR1_BTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1124;"	d
I2C_SR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1073;"	d
I2C_SR1_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1121;"	d
I2C_SR1_SB	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1126;"	d
I2C_SR1_STOPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1122;"	d
I2C_SR1_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1120;"	d
I2C_SR2_AF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1133;"	d
I2C_SR2_ARLO	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1134;"	d
I2C_SR2_BERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1135;"	d
I2C_SR2_OVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1132;"	d
I2C_SR2_PECERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1131;"	d
I2C_SR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1074;"	d
I2C_SR2_SMBALERT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1128;"	d
I2C_SR2_TIMEOUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1129;"	d
I2C_SR2_WUFH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1130;"	d
I2C_SR3_BUSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1142;"	d
I2C_SR3_DUALF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1137;"	d
I2C_SR3_GENCALL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1140;"	d
I2C_SR3_MSL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1143;"	d
I2C_SR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1075;"	d
I2C_SR3_SMBDEFAULT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1139;"	d
I2C_SR3_SMBHOST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1138;"	d
I2C_SR3_TRA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1141;"	d
I2C_TRISER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1079;"	d
I2C_TRISER_TRISE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1157;"	d
I2C_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^I2C_TypeDef;$/;"	t	typeref:struct:I2C_struct
I2C_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct I2C_struct$/;"	s
IAPSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IAPSR;      \/*!< Flash in-application programming status register *\/$/;"	m	struct:FLASH_struct
ICKCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ICKCR;     \/*!< Internal Clocks Control Register *\/$/;"	m	struct:CLK_struct
ICR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ICR1;   \/*!< Timer input capture routing register 1 *\/$/;"	m	struct:RI_struct
ICR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ICR2;   \/*!< Timer input capture routing register 2 *\/$/;"	m	struct:RI_struct
IDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IDR; \/*!< Input Data Register *\/$/;"	m	struct:GPIO_struct
IER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IER;    \/*!< interrupt enable register*\/$/;"	m	struct:TIM_struct
IER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IER;   \/*!< interrupt enable register  *\/$/;"	m	struct:TIM4_struct
IER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IER;   \/*!< interrupt enable register*\/$/;"	m	struct:TIM1_struct
INTERRUPT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2797;"	d
INTERRUPT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2799;"	d
INTERRUPT_HANDLER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2775;"	d
INTERRUPT_HANDLER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2780;"	d
INTERRUPT_HANDLER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2787;"	d
INTERRUPT_HANDLER_TRAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2776;"	d
INTERRUPT_HANDLER_TRAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2781;"	d
INTERRUPT_HANDLER_TRAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2790;"	d
IN_RAM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	105;"	d
IN_RAM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	112;"	d
IN_RAM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	126;"	d
IOCMR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOCMR1; \/*!< I\/O control mode register 1 *\/$/;"	m	struct:RI_struct
IOCMR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOCMR2; \/*!< I\/O control mode register 2 *\/$/;"	m	struct:RI_struct
IOCMR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOCMR3; \/*!< I\/O control mode register 3 *\/$/;"	m	struct:RI_struct
IOGCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOGCR;  \/*!< I\/O group control register *\/$/;"	m	struct:RI_struct
IOIR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOIR1;  \/*!< I\/O input register 1 *\/$/;"	m	struct:RI_struct
IOIR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOIR2;  \/*!< I\/O input register 2 *\/$/;"	m	struct:RI_struct
IOIR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOIR3;  \/*!< I\/O input register 3 *\/$/;"	m	struct:RI_struct
IOSR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOSR1;  \/*!< I\/O switch register 1*\/$/;"	m	struct:RI_struct
IOSR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOSR2;  \/*!< I\/O switch register 2*\/$/;"	m	struct:RI_struct
IOSR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t IOSR3;  \/*!< I\/O switch register 3*\/$/;"	m	struct:RI_struct
IRTIM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2715;"	d
IRTIM_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2665;"	d
IRTIM_CR_EN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1189;"	d
IRTIM_CR_HSEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1190;"	d
IRTIM_CR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1178;"	d
IRTIM_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^IRTIM_TypeDef;$/;"	t	typeref:struct:IRTIM_struct
IRTIM_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct IRTIM_struct$/;"	s
ISPR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR1; \/*!<  Interrupt Software Priority register 1 *\/$/;"	m	struct:ITC_struct
ISPR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR2; \/*!<  Interrupt Software Priority register 2 *\/$/;"	m	struct:ITC_struct
ISPR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR3; \/*!<  Interrupt Software Priority register 3 *\/$/;"	m	struct:ITC_struct
ISPR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR4; \/*!<  Interrupt Software Priority register 4 *\/$/;"	m	struct:ITC_struct
ISPR5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR5; \/*!<  Interrupt Software Priority register 5 *\/$/;"	m	struct:ITC_struct
ISPR6	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR6; \/*!<  Interrupt Software Priority register 6 *\/$/;"	m	struct:ITC_struct
ISPR7	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR7; \/*!<  Interrupt Software Priority register 7 *\/$/;"	m	struct:ITC_struct
ISPR8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISPR8; \/*!<  Interrupt Software Priority register 8 *\/$/;"	m	struct:ITC_struct
ISR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISR1; \/*!<  Initialisation and Status  Register 1 *\/$/;"	m	struct:RTC_struct
ISR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ISR2; \/*!<  Initialisation and Status  Register 2 *\/$/;"	m	struct:RTC_struct
IS_FUNCTIONAL_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	211;"	d
IS_STATE_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2833;"	d
ITC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2716;"	d
ITC_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2674;"	d
ITC_SPRX_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1217;"	d
ITC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^ITC_TypeDef;$/;"	t	typeref:struct:ITC_struct
ITC_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct ITC_struct$/;"	s
ITR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ITR;    \/*!< I2C interrupt & DMA register *\/$/;"	m	struct:I2C_struct
ITStatus	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;$/;"	t	typeref:enum:__anon7
IWDG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2700;"	d
IWDG_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2651;"	d
IWDG_PR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1239;"	d
IWDG_RLR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1238;"	d
IWDG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^IWDG_TypeDef;$/;"	t	typeref:struct:IWDG_struct
IWDG_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct IWDG_struct$/;"	s
KR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t KR;  \/*!<  Low Speed Watchdog Key Register *\/$/;"	m	struct:IWDG_struct
LCD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2709;"	d
LCD_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2670;"	d
LCD_CR1_B2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2552;"	d
LCD_CR1_BLINK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2549;"	d
LCD_CR1_BLINKF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2550;"	d
LCD_CR1_DUTY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2551;"	d
LCD_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2533;"	d
LCD_CR2_CC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2557;"	d
LCD_CR2_HD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2556;"	d
LCD_CR2_PON	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2555;"	d
LCD_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2534;"	d
LCD_CR2_VSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2558;"	d
LCD_CR3_DEAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2564;"	d
LCD_CR3_LCDEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2560;"	d
LCD_CR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2535;"	d
LCD_CR3_SOF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2562;"	d
LCD_CR3_SOFC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2563;"	d
LCD_CR3_SOFIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2561;"	d
LCD_CR4_B4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2572;"	d
LCD_CR4_DUTY8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2571;"	d
LCD_CR4_MAPCOM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2569;"	d
LCD_CR4_PAGECOM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2570;"	d
LCD_CR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2539;"	d
LCD_FRQ_DIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2566;"	d
LCD_FRQ_PS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2567;"	d
LCD_FRQ_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2536;"	d
LCD_PM_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2537;"	d
LCD_RAM_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2538;"	d
LCD_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^LCD_TypeDef;$/;"	t	typeref:struct:LCD_struct
LCD_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct LCD_struct$/;"	s
LSE_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	91;"	d
LSI_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	97;"	d
LTRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   LTRH;     \/*!< Low voltage reference register MSB    *\/$/;"	m	struct:ADC_struct
LTRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   LTRL;     \/*!< Low voltage reference register LSB    *\/$/;"	m	struct:ADC_struct
MEMCPY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	115;"	d
MEMCPY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	118;"	d
MskBit	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2823;"	d
NEAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	101;"	d
NEAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	108;"	d
NEAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	122;"	d
OAR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t OAR2;   \/*!< I2C own address register 2 *\/$/;"	m	struct:I2C_struct
OARH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t OARH;   \/*!< I2C own address register 1 MSB *\/$/;"	m	struct:I2C_struct
OARL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t OARL;   \/*!< I2C own address register 1 LSB *\/$/;"	m	struct:I2C_struct
ODR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ODR; \/*!< Output Data Register *\/$/;"	m	struct:GPIO_struct
OISR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t OISR;   \/*!< Output idle register *\/$/;"	m	struct:TIM_struct
OISR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t OISR;  \/*!< Output idle register *\/$/;"	m	struct:TIM1_struct
OPT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2729;"	d
OPT_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2628;"	d
OPT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^OPT_TypeDef;$/;"	t	typeref:struct:OPT_struct
OPT_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct OPT_struct$/;"	s
PCKENR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PCKENR1;  \/*!< Peripheral Clock Gating Register 1 *\/$/;"	m	struct:CLK_struct
PCKENR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PCKENR2;  \/*!< Peripheral Clock Gating Register 2 *\/$/;"	m	struct:CLK_struct
PCKENR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PCKENR3;  \/*!< Peripheral Clock Gating Register 3 *\/$/;"	m	struct:CLK_struct
PCODESIZE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PCODESIZE;$/;"	m	struct:OPT_struct
PECR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PECR;   \/*!< I2CPacket Error Checking register *\/$/;"	m	struct:I2C_struct
PM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PM[6];    \/*!< LCD portmask registers*\/$/;"	m	struct:LCD_struct
PR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PR;  \/*!<  Low Speed Watchdog Prescaler Register *\/$/;"	m	struct:IWDG_struct
PSCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PSCR;   \/*!< prescaler  register   *\/$/;"	m	struct:TIM_struct
PSCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PSCR;  \/*!< prescaler register *\/$/;"	m	struct:TIM4_struct
PSCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PSCR; \/*!<  USART prescaler register     *\/$/;"	m	struct:USART_struct
PSCRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PSCRH; \/*!< prescaler high *\/$/;"	m	struct:TIM1_struct
PSCRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PSCRL; \/*!< prescaler low *\/$/;"	m	struct:TIM1_struct
PUKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t PUKR;       \/*!< Flash program memory unprotection register *\/$/;"	m	struct:FLASH_struct
PWR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2696;"	d
PWR_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2648;"	d
PWR_CR2_VREFINTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1418;"	d
PWR_CSR1_PLS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1412;"	d
PWR_CSR1_PVDE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1413;"	d
PWR_CSR1_PVDIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1411;"	d
PWR_CSR1_PVDIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1410;"	d
PWR_CSR1_PVDOF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1409;"	d
PWR_CSR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1399;"	d
PWR_CSR2_FWU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1416;"	d
PWR_CSR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1400;"	d
PWR_CSR2_ULP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1417;"	d
PWR_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^PWR_TypeDef;$/;"	t	typeref:struct:PWR_struct
PWR_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct PWR_struct$/;"	s
PointerAttr	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	131;"	d
PointerAttr	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	134;"	d
RAM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RAM[22];  \/*!< LCD RAM registers*\/$/;"	m	struct:LCD_struct
RCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RCR;    \/*!< Resistor control register  *\/$/;"	m	struct:RI_struct
RCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RCR;   \/*!< Repetition Counter register *\/$/;"	m	struct:TIM1_struct
REGCSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t REGCSR;  \/*!< Main regulator control status register *\/$/;"	m	struct:CLK_struct
RESERVED	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED;$/;"	m	struct:RI_struct
RESERVED	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED[4];  \/*!<  reserved area *\/$/;"	m	struct:EXTI_struct
RESERVED0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED0[2];$/;"	m	struct:DAC_struct
RESERVED0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED0;$/;"	m	struct:RTC_struct
RESERVED1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED1[2];$/;"	m	struct:DAC_struct
RESERVED1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED1;$/;"	m	struct:RTC_struct
RESERVED1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t  RESERVED1;$/;"	m	struct:OPT_struct
RESERVED1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t RESERVED1[2];  \/*!< Reserved *\/$/;"	m	struct:LCD_struct
RESERVED2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED2[2];$/;"	m	struct:DAC_struct
RESERVED2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED2;$/;"	m	struct:RTC_struct
RESERVED2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t  RESERVED2;$/;"	m	struct:OPT_struct
RESERVED2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t RESERVED2;$/;"	m	struct:BEEP_struct
RESERVED2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t RESERVED2[13]; \/*!< Reserved *\/$/;"	m	struct:LCD_struct
RESERVED3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED3[3];$/;"	m	struct:DAC_struct
RESERVED3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED3;$/;"	m	struct:RTC_struct
RESERVED3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t  RESERVED3;$/;"	m	struct:OPT_struct
RESERVED4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED4[2];$/;"	m	struct:DAC_struct
RESERVED4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED4;$/;"	m	struct:RTC_struct
RESERVED4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t  RESERVED4;$/;"	m	struct:OPT_struct
RESERVED5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED5[2];$/;"	m	struct:DAC_struct
RESERVED5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED5;$/;"	m	struct:RTC_struct
RESERVED5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t  RESERVED5;$/;"	m	struct:OPT_struct
RESERVED6	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED6[3];$/;"	m	struct:DAC_struct
RESERVED6	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED6;$/;"	m	struct:RTC_struct
RESERVED7	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED7[2];$/;"	m	struct:DAC_struct
RESERVED7	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED7[4];$/;"	m	struct:RTC_struct
RESERVED8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  RESERVED8[2];$/;"	m	struct:DAC_struct
RESERVED8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RESERVED8[3];$/;"	m	struct:RTC_struct
RESET	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;$/;"	e	enum:__anon7
RI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2724;"	d
RI_ASCR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1460;"	d
RI_ASCR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1461;"	d
RI_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2671;"	d
RI_ICR1_IC2CS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1470;"	d
RI_ICR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1455;"	d
RI_ICR2_IC3CS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1471;"	d
RI_ICR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1456;"	d
RI_IOSR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1457;"	d
RI_IOSR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1458;"	d
RI_IOSR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1459;"	d
RI_RCR_10KPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1474;"	d
RI_RCR_10KPU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1476;"	d
RI_RCR_400KPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1473;"	d
RI_RCR_400KPU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1475;"	d
RI_RCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1462;"	d
RI_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^RI_TypeDef;$/;"	t	typeref:struct:RI_struct
RI_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct RI_struct$/;"	s
RLR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RLR; \/*!<  Low Speed Watchdog Reload Register *\/$/;"	m	struct:IWDG_struct
RMPCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RMPCR1; \/*!< Remap control register 1 *\/$/;"	m	struct:SYSCFG_struct
RMPCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RMPCR2; \/*!< Remap control register 2 *\/$/;"	m	struct:SYSCFG_struct
RMPCR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RMPCR3; \/*!< Remap control register 3 *\/$/;"	m	struct:SYSCFG_struct
ROP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t ROP;        \/*!< Read-out protection*\/$/;"	m	struct:OPT_struct
RSERVED1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  uint8_t RSERVED1;$/;"	m	struct:BEEP_struct
RST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2695;"	d
RST_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2647;"	d
RST_CR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1359;"	d
RST_SR_BORF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1369;"	d
RST_SR_ILLOPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1372;"	d
RST_SR_IWDGF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1373;"	d
RST_SR_PORF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1374;"	d
RST_SR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1360;"	d
RST_SR_SWIMF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1371;"	d
RST_SR_WWDGF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1370;"	d
RST_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^RST_TypeDef;$/;"	t	typeref:struct:RST_struct
RST_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct RST_struct$/;"	s
RTC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2692;"	d
RTC_ALRMAR1_MSK1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	464;"	d
RTC_ALRMAR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	359;"	d
RTC_ALRMAR1_ST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	465;"	d
RTC_ALRMAR1_SU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	466;"	d
RTC_ALRMAR2_MNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	470;"	d
RTC_ALRMAR2_MNU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	471;"	d
RTC_ALRMAR2_MSK2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	469;"	d
RTC_ALRMAR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	360;"	d
RTC_ALRMAR3_HT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	476;"	d
RTC_ALRMAR3_HU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	477;"	d
RTC_ALRMAR3_MSK3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	474;"	d
RTC_ALRMAR3_PM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	475;"	d
RTC_ALRMAR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	361;"	d
RTC_ALRMAR4_DT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	482;"	d
RTC_ALRMAR4_DU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	483;"	d
RTC_ALRMAR4_MSK4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	480;"	d
RTC_ALRMAR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	362;"	d
RTC_ALRMAR4_WDSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	481;"	d
RTC_ALRMASSMSKR_MASKSS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	492;"	d
RTC_ALRMASSMSKR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	369;"	d
RTC_ALRMASSRH_ALSS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	486;"	d
RTC_ALRMASSRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	367;"	d
RTC_ALRMASSRL_ALSS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	489;"	d
RTC_ALRMASSRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	368;"	d
RTC_APRER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	352;"	d
RTC_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2653;"	d
RTC_CALRH_CALM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	500;"	d
RTC_CALRH_CALP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	496;"	d
RTC_CALRH_CALW16	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	498;"	d
RTC_CALRH_CALW8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	497;"	d
RTC_CALRH_CALWx	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	499;"	d
RTC_CALRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	371;"	d
RTC_CALRL_CALM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	503;"	d
RTC_CALRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	372;"	d
RTC_CR1_BYPSHAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	415;"	d
RTC_CR1_FMT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	412;"	d
RTC_CR1_RATIO	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	413;"	d
RTC_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	343;"	d
RTC_CR1_WUCKSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	414;"	d
RTC_CR2_ALRAE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	422;"	d
RTC_CR2_ALRAIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	420;"	d
RTC_CR2_ALRIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	423;"	d
RTC_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	344;"	d
RTC_CR2_WUTE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	421;"	d
RTC_CR2_WUTIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	419;"	d
RTC_CR3_ADD1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	434;"	d
RTC_CR3_BCK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	432;"	d
RTC_CR3_COE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	428;"	d
RTC_CR3_COSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	431;"	d
RTC_CR3_OSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	429;"	d
RTC_CR3_POL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	430;"	d
RTC_CR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	345;"	d
RTC_CR3_SUB1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	433;"	d
RTC_DR1_DT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	399;"	d
RTC_DR1_DU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	400;"	d
RTC_DR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	339;"	d
RTC_DR2_MT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	404;"	d
RTC_DR2_MU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	405;"	d
RTC_DR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	340;"	d
RTC_DR2_WDU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	403;"	d
RTC_DR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	341;"	d
RTC_DR3_YT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	408;"	d
RTC_DR3_YU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	409;"	d
RTC_ISR1_ALRAWF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	445;"	d
RTC_ISR1_INIT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	438;"	d
RTC_ISR1_INITF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	439;"	d
RTC_ISR1_INITS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	441;"	d
RTC_ISR1_RECALPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	444;"	d
RTC_ISR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	347;"	d
RTC_ISR1_RSF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	440;"	d
RTC_ISR1_SHPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	442;"	d
RTC_ISR1_WUTWF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	443;"	d
RTC_ISR2_ALRAF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	450;"	d
RTC_ISR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	348;"	d
RTC_ISR2_TAMP1F	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	453;"	d
RTC_ISR2_TAMP2F	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	452;"	d
RTC_ISR2_TAMP3F	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	451;"	d
RTC_ISR2_WUTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	449;"	d
RTC_SHIFTRH_ADD1S	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	456;"	d
RTC_SHIFTRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	364;"	d
RTC_SHIFTRH_SUBFS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	457;"	d
RTC_SHIFTRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	365;"	d
RTC_SHIFTRL_SUBFS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	460;"	d
RTC_SPRERH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	350;"	d
RTC_SPRERL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	351;"	d
RTC_TCR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	374;"	d
RTC_TCR1_TAMP1E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	511;"	d
RTC_TCR1_TAMP1LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	510;"	d
RTC_TCR1_TAMP2E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	509;"	d
RTC_TCR1_TAMP2LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	508;"	d
RTC_TCR1_TAMP3E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	507;"	d
RTC_TCR1_TAMP3LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	506;"	d
RTC_TCR1_TAMPIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	512;"	d
RTC_TCR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	375;"	d
RTC_TCR2_TAMPFLT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	517;"	d
RTC_TCR2_TAMPFREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	518;"	d
RTC_TCR2_TAMPPRCH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	516;"	d
RTC_TCR2_TAMPPUDIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	515;"	d
RTC_TR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	335;"	d
RTC_TR1_ST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	386;"	d
RTC_TR1_SU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	387;"	d
RTC_TR2_MNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	390;"	d
RTC_TR2_MNU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	391;"	d
RTC_TR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	336;"	d
RTC_TR3_HT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	395;"	d
RTC_TR3_HU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	396;"	d
RTC_TR3_PM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	394;"	d
RTC_TR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	337;"	d
RTC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^RTC_TypeDef;$/;"	t	typeref:struct:RTC_struct
RTC_WPR_DisableKey1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	523;"	d
RTC_WPR_DisableKey2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	524;"	d
RTC_WPR_EnableKey	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	522;"	d
RTC_WPR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	357;"	d
RTC_WUTRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	354;"	d
RTC_WUTRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	355;"	d
RTC_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct RTC_struct$/;"	s
RXCRCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t RXCRCR; \/*!< SPI Rx CRC register *\/$/;"	m	struct:SPI_struct
S16_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	219;"	d
S16_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	220;"	d
S32_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	222;"	d
S32_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	223;"	d
S8_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	216;"	d
S8_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	217;"	d
SCSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SCSR;     \/*!< System clock status Register *\/$/;"	m	struct:CLK_struct
SET	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus, BitStatus, BitAction;$/;"	e	enum:__anon7
SHIFTRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SHIFTRH; \/*!< Shift control High Register  *\/$/;"	m	struct:RTC_struct
SHIFTRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SHIFTRL; \/*!<  Shift control Low Register  *\/$/;"	m	struct:RTC_struct
SMCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SMCR;   \/*!< Synchro mode control register *\/$/;"	m	struct:TIM_struct
SMCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SMCR;  \/*!< Synchro mode control register *\/$/;"	m	struct:TIM1_struct
SMCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SMCR;  \/*!< Synchro mode control register *\/$/;"	m	struct:TIM4_struct
SPI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2703;"	d
SPI1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2655;"	d
SPI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2704;"	d
SPI2_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2656;"	d
SPI_CR1_BR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1521;"	d
SPI_CR1_CPHA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1524;"	d
SPI_CR1_CPOL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1523;"	d
SPI_CR1_LSBFIRST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1519;"	d
SPI_CR1_MSTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1522;"	d
SPI_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1502;"	d
SPI_CR1_SPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1520;"	d
SPI_CR2_BDM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1526;"	d
SPI_CR2_BDOE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1527;"	d
SPI_CR2_CRCEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1528;"	d
SPI_CR2_CRCNEXT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1529;"	d
SPI_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1503;"	d
SPI_CR2_RXONLY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1530;"	d
SPI_CR2_SSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1532;"	d
SPI_CR2_SSM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1531;"	d
SPI_CR3_ERRIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1536;"	d
SPI_CR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1504;"	d
SPI_CR3_RXDMAEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1539;"	d
SPI_CR3_RXIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1535;"	d
SPI_CR3_TXDMAEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1538;"	d
SPI_CR3_TXIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1534;"	d
SPI_CR3_WKIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1537;"	d
SPI_CRCPR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1507;"	d
SPI_DR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1506;"	d
SPI_RXCRCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1508;"	d
SPI_SR_BSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1541;"	d
SPI_SR_CRCERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1544;"	d
SPI_SR_MODF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1543;"	d
SPI_SR_OVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1542;"	d
SPI_SR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1505;"	d
SPI_SR_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1547;"	d
SPI_SR_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1546;"	d
SPI_SR_WKUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1545;"	d
SPI_TXCRCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1509;"	d
SPI_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^SPI_TypeDef;$/;"	t	typeref:struct:SPI_struct
SPI_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct SPI_struct$/;"	s
SPRERH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SPRERH; \/*!<  Synchronous Prediv high  Register  *\/$/;"	m	struct:RTC_struct
SPRERL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SPRERL; \/*!<  Synchronous Prediv Low Register  *\/$/;"	m	struct:RTC_struct
SQR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   SQR[4];   \/*!< Channel select scan registers    *\/$/;"	m	struct:ADC_struct
SR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   SR;       \/*!< Status register    *\/$/;"	m	struct:ADC_struct
SR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  SR;      \/*!< DAC status register *\/$/;"	m	struct:DAC_struct
SR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR;      \/*!< AES status register      *\/$/;"	m	struct:AES_struct
SR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR;     \/*!< SPI status register *\/$/;"	m	struct:SPI_struct
SR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR;   \/*!<  USART status register  *\/$/;"	m	struct:USART_struct
SR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR;  \/*!< Reset status register *\/$/;"	m	struct:RST_struct
SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR1;           \/*!<  Pins Status flag register 1 *\/$/;"	m	struct:EXTI_struct
SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR1;    \/*!< I2C status register 1 *\/$/;"	m	struct:I2C_struct
SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR1;    \/*!< status register 1   *\/$/;"	m	struct:TIM_struct
SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR1;   \/*!< status register 1    *\/$/;"	m	struct:TIM4_struct
SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR1;   \/*!< status register 1 *\/$/;"	m	struct:TIM1_struct
SR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR2;           \/*!<  Ports Status flage register 2 *\/$/;"	m	struct:EXTI_struct
SR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR2;    \/*!< I2C status register 2 *\/$/;"	m	struct:I2C_struct
SR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR2;    \/*!< status register 2   *\/$/;"	m	struct:TIM_struct
SR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR2;   \/*!< status register 2 *\/$/;"	m	struct:TIM1_struct
SR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SR3;    \/*!< I2C status register 3 *\/$/;"	m	struct:I2C_struct
SSRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SSRH; \/*!< Sub Second High Register  *\/$/;"	m	struct:RTC_struct
SSRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SSRL; \/*!< Sub Second Low Register  *\/$/;"	m	struct:RTC_struct
STM8L15X_HD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	34;"	d
STRINGVECTOR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2785;"	d
SUCCESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;$/;"	e	enum:__anon9
SWCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SWCR;     \/*!< Switch Control Register *\/$/;"	m	struct:CLK_struct
SWR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t SWR;      \/*!< System clock Switch Register *\/$/;"	m	struct:CLK_struct
SWTRIGR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t  SWTRIGR; \/*!< DAC software trigger register *\/$/;"	m	struct:DAC_struct
SYSCFG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2682;"	d
SYSCFG_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2644;"	d
SYSCFG_RMPCR1_ADC1DMA_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	662;"	d
SYSCFG_RMPCR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	649;"	d
SYSCFG_RMPCR1_SPI1_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	669;"	d
SYSCFG_RMPCR1_TIM4DMA_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	663;"	d
SYSCFG_RMPCR1_USART1CK_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	668;"	d
SYSCFG_RMPCR1_USART1TR_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	667;"	d
SYSCFG_RMPCR2_ADC1TRIG_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	671;"	d
SYSCFG_RMPCR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	650;"	d
SYSCFG_RMPCR2_SPI2_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	676;"	d
SYSCFG_RMPCR2_TIM23BKIN_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	678;"	d
SYSCFG_RMPCR2_TIM2TRIG_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	674;"	d
SYSCFG_RMPCR2_TIM2TRIG_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	672;"	d
SYSCFG_RMPCR2_TIM3TRIG_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	675;"	d
SYSCFG_RMPCR2_TIM3TRIG_REMAP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	673;"	d
SYSCFG_RMPCR2_TIM3TRIG_REMAP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	677;"	d
SYSCFG_RMPCR3_CCO_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	685;"	d
SYSCFG_RMPCR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	651;"	d
SYSCFG_RMPCR3_SPI1_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	680;"	d
SYSCFG_RMPCR3_TIM3CH1_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	683;"	d
SYSCFG_RMPCR3_TIM3CH2_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	684;"	d
SYSCFG_RMPCR3_USART3CK_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	682;"	d
SYSCFG_RMPCR3_USART3TR_REMAP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	681;"	d
SYSCFG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^SYSCFG_TypeDef;$/;"	t	typeref:struct:SYSCFG_struct
SYSCFG_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct SYSCFG_struct$/;"	s
SetBit	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2816;"	d
TCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TCR1; \/*!<  Tamper control register 1   *\/$/;"	m	struct:RTC_struct
TCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TCR2; \/*!<  Tamper control register 2  *\/$/;"	m	struct:RTC_struct
TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2710;"	d
TIM1_ARRH_ARR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1741;"	d
TIM1_ARRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1620;"	d
TIM1_ARRL_ARR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1742;"	d
TIM1_ARRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1621;"	d
TIM1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2663;"	d
TIM1_BKR_AOE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1759;"	d
TIM1_BKR_BKE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1761;"	d
TIM1_BKR_BKP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1760;"	d
TIM1_BKR_LOCK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1764;"	d
TIM1_BKR_MOE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1758;"	d
TIM1_BKR_OSSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1763;"	d
TIM1_BKR_OSSR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1762;"	d
TIM1_BKR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1631;"	d
TIM1_CCER1_CC1E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1726;"	d
TIM1_CCER1_CC1NE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1724;"	d
TIM1_CCER1_CC1NP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1723;"	d
TIM1_CCER1_CC1P	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1725;"	d
TIM1_CCER1_CC2E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1722;"	d
TIM1_CCER1_CC2NE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1720;"	d
TIM1_CCER1_CC2NP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1719;"	d
TIM1_CCER1_CC2P	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1721;"	d
TIM1_CCER1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1614;"	d
TIM1_CCER2_CC3E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1733;"	d
TIM1_CCER2_CC3NE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1731;"	d
TIM1_CCER2_CC3NP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1730;"	d
TIM1_CCER2_CC3P	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1732;"	d
TIM1_CCER2_CC4E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1729;"	d
TIM1_CCER2_CC4P	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1728;"	d
TIM1_CCER2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1615;"	d
TIM1_CCMR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1610;"	d
TIM1_CCMR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1611;"	d
TIM1_CCMR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1612;"	d
TIM1_CCMR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1613;"	d
TIM1_CCMR_CCxS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1714;"	d
TIM1_CCMR_ICxF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1710;"	d
TIM1_CCMR_ICxPSC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1709;"	d
TIM1_CCMR_OCM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1711;"	d
TIM1_CCMR_OCxCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1715;"	d
TIM1_CCMR_OCxFE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1713;"	d
TIM1_CCMR_OCxPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1712;"	d
TIM1_CCR1H_CCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1746;"	d
TIM1_CCR1H_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1623;"	d
TIM1_CCR1L_CCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1747;"	d
TIM1_CCR1L_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1624;"	d
TIM1_CCR2H_CCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1749;"	d
TIM1_CCR2H_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1625;"	d
TIM1_CCR2L_CCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1750;"	d
TIM1_CCR2L_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1626;"	d
TIM1_CCR3H_CCR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1752;"	d
TIM1_CCR3H_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1627;"	d
TIM1_CCR3L_CCR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1753;"	d
TIM1_CCR3L_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1628;"	d
TIM1_CCR4H_CCR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1755;"	d
TIM1_CCR4H_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1629;"	d
TIM1_CCR4L_CCR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1756;"	d
TIM1_CCR4L_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1630;"	d
TIM1_CNTRH_CNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1735;"	d
TIM1_CNTRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1616;"	d
TIM1_CNTRL_CNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1736;"	d
TIM1_CNTRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1617;"	d
TIM1_CR1_ARPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1646;"	d
TIM1_CR1_CEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1652;"	d
TIM1_CR1_CMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1647;"	d
TIM1_CR1_DIR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1648;"	d
TIM1_CR1_OPM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1649;"	d
TIM1_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1601;"	d
TIM1_CR1_UDIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1651;"	d
TIM1_CR1_URS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1650;"	d
TIM1_CR2_CCDS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1656;"	d
TIM1_CR2_CCPC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1658;"	d
TIM1_CR2_CCUS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1657;"	d
TIM1_CR2_MMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1655;"	d
TIM1_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1602;"	d
TIM1_CR2_TI1S	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1654;"	d
TIM1_DCR1_DBA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1776;"	d
TIM1_DCR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1634;"	d
TIM1_DCR2_DBL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1779;"	d
TIM1_DCR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1635;"	d
TIM1_DER_CC1DE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1674;"	d
TIM1_DER_CC2DE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1673;"	d
TIM1_DER_CC3DE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1672;"	d
TIM1_DER_CC4DE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1671;"	d
TIM1_DER_COMDE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1670;"	d
TIM1_DER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1605;"	d
TIM1_DER_UDE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1675;"	d
TIM1_DMAR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1636;"	d
TIM1_DMAR_VR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1782;"	d
TIM1_DTR_DTG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1766;"	d
TIM1_DTR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1632;"	d
TIM1_EGR_BG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1700;"	d
TIM1_EGR_CC1G	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1706;"	d
TIM1_EGR_CC2G	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1705;"	d
TIM1_EGR_CC3G	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1704;"	d
TIM1_EGR_CC4G	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1703;"	d
TIM1_EGR_COMG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1702;"	d
TIM1_EGR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1609;"	d
TIM1_EGR_TG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1701;"	d
TIM1_EGR_UG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1707;"	d
TIM1_ETR_ECE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1666;"	d
TIM1_ETR_ETF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1668;"	d
TIM1_ETR_ETP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1665;"	d
TIM1_ETR_ETPS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1667;"	d
TIM1_ETR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1604;"	d
TIM1_IER_BIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1677;"	d
TIM1_IER_CC1IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1683;"	d
TIM1_IER_CC2IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1682;"	d
TIM1_IER_CC3IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1681;"	d
TIM1_IER_CC4IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1680;"	d
TIM1_IER_COMIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1679;"	d
TIM1_IER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1606;"	d
TIM1_IER_TIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1678;"	d
TIM1_IER_UIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1684;"	d
TIM1_OISR_OIS1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1773;"	d
TIM1_OISR_OIS1N	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1772;"	d
TIM1_OISR_OIS2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1771;"	d
TIM1_OISR_OIS2N	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1770;"	d
TIM1_OISR_OIS3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1769;"	d
TIM1_OISR_OIS3N	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1768;"	d
TIM1_OISR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1633;"	d
TIM1_PSCH_PSC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1738;"	d
TIM1_PSCL_PSC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1739;"	d
TIM1_PSCRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1618;"	d
TIM1_PSCRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1619;"	d
TIM1_RCR_REP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1744;"	d
TIM1_RCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1622;"	d
TIM1_SMCR_MSM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1660;"	d
TIM1_SMCR_OCCS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1662;"	d
TIM1_SMCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1603;"	d
TIM1_SMCR_SMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1663;"	d
TIM1_SMCR_TS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1661;"	d
TIM1_SR1_BIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1686;"	d
TIM1_SR1_CC1IF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1692;"	d
TIM1_SR1_CC2IF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1691;"	d
TIM1_SR1_CC3IF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1690;"	d
TIM1_SR1_CC4IF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1689;"	d
TIM1_SR1_COMIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1688;"	d
TIM1_SR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1607;"	d
TIM1_SR1_TIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1687;"	d
TIM1_SR1_UIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1693;"	d
TIM1_SR2_CC1OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1698;"	d
TIM1_SR2_CC2OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1697;"	d
TIM1_SR2_CC3OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1696;"	d
TIM1_SR2_CC4OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1695;"	d
TIM1_SR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1608;"	d
TIM1_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^TIM1_TypeDef;$/;"	t	typeref:struct:TIM1_struct
TIM1_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct TIM1_struct$/;"	s
TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2711;"	d
TIM2_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2661;"	d
TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2712;"	d
TIM3_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2662;"	d
TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2713;"	d
TIM4_ARR_ARR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2047;"	d
TIM4_ARR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2001;"	d
TIM4_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2664;"	d
TIM4_CNTR_CNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2041;"	d
TIM4_CNTR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1999;"	d
TIM4_CR1_ARPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2011;"	d
TIM4_CR1_CEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2015;"	d
TIM4_CR1_OPM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2012;"	d
TIM4_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1992;"	d
TIM4_CR1_UDIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2014;"	d
TIM4_CR1_URS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2013;"	d
TIM4_CR2_MMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2018;"	d
TIM4_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1993;"	d
TIM4_DER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1995;"	d
TIM4_DER_UDE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2026;"	d
TIM4_EGR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1998;"	d
TIM4_EGR_TG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2038;"	d
TIM4_EGR_UG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2037;"	d
TIM4_IER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1996;"	d
TIM4_IER_TIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2029;"	d
TIM4_IER_UIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2030;"	d
TIM4_PSCR_PSC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2044;"	d
TIM4_PSCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2000;"	d
TIM4_SMCR_MSM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2021;"	d
TIM4_SMCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1994;"	d
TIM4_SMCR_SMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2023;"	d
TIM4_SMCR_TS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2022;"	d
TIM4_SR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1997;"	d
TIM4_SR1_TIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2034;"	d
TIM4_SR1_UIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2033;"	d
TIM4_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^TIM4_TypeDef;$/;"	t	typeref:struct:TIM4_struct
TIM4_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct TIM4_struct$/;"	s
TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2714;"	d
TIM5_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2666;"	d
TIM_ARRH_ARR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1941;"	d
TIM_ARRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1842;"	d
TIM_ARRL_ARR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1942;"	d
TIM_ARRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1843;"	d
TIM_BKR_AOE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1956;"	d
TIM_BKR_BKE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1958;"	d
TIM_BKR_BKP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1957;"	d
TIM_BKR_LOCK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1960;"	d
TIM_BKR_MOE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1955;"	d
TIM_BKR_OSSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1959;"	d
TIM_BKR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1850;"	d
TIM_CCER1_CC1E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1931;"	d
TIM_CCER1_CC1P	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1930;"	d
TIM_CCER1_CC2E	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1929;"	d
TIM_CCER1_CC2P	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1928;"	d
TIM_CCER1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1836;"	d
TIM_CCMR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1833;"	d
TIM_CCMR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1834;"	d
TIM_CCMR_CCxS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1920;"	d
TIM_CCMR_ICxF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1918;"	d
TIM_CCMR_ICxPSC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1919;"	d
TIM_CCMR_OCM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1921;"	d
TIM_CCMR_OCxFE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1923;"	d
TIM_CCMR_OCxPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1922;"	d
TIM_CCMR_TIxDirect_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1925;"	d
TIM_CCR1H_CCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1946;"	d
TIM_CCR1H_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1845;"	d
TIM_CCR1L_CCR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1947;"	d
TIM_CCR1L_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1846;"	d
TIM_CCR2H_CCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1950;"	d
TIM_CCR2H_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1847;"	d
TIM_CCR2L_CCR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1951;"	d
TIM_CCR2L_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1848;"	d
TIM_CNTRH_CNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1934;"	d
TIM_CNTRH_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1838;"	d
TIM_CNTRL_CNT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1935;"	d
TIM_CNTRL_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1839;"	d
TIM_CR1_ARPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1861;"	d
TIM_CR1_CEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1867;"	d
TIM_CR1_CMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1862;"	d
TIM_CR1_DIR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1863;"	d
TIM_CR1_OPM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1864;"	d
TIM_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1824;"	d
TIM_CR1_UDIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1866;"	d
TIM_CR1_URS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1865;"	d
TIM_CR2_CCDS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1872;"	d
TIM_CR2_MMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1871;"	d
TIM_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1825;"	d
TIM_CR2_TI1S	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1870;"	d
TIM_DER_CC1DE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1889;"	d
TIM_DER_CC2DE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1888;"	d
TIM_DER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1828;"	d
TIM_DER_UDE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1890;"	d
TIM_EGR_BG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1911;"	d
TIM_EGR_CC1G	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1914;"	d
TIM_EGR_CC2G	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1913;"	d
TIM_EGR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1832;"	d
TIM_EGR_TG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1912;"	d
TIM_EGR_UG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1915;"	d
TIM_ETR_ECE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1883;"	d
TIM_ETR_ETF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1885;"	d
TIM_ETR_ETP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1882;"	d
TIM_ETR_ETPS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1884;"	d
TIM_ETR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1827;"	d
TIM_IER_BIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1893;"	d
TIM_IER_CC1IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1896;"	d
TIM_IER_CC2IE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1895;"	d
TIM_IER_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1829;"	d
TIM_IER_TIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1894;"	d
TIM_IER_UIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1897;"	d
TIM_OISR_OIS1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1964;"	d
TIM_OISR_OIS2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1963;"	d
TIM_OISR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1851;"	d
TIM_PSCR_PSC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1938;"	d
TIM_PSCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1841;"	d
TIM_SMCR_MSM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1876;"	d
TIM_SMCR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1826;"	d
TIM_SMCR_SMS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1878;"	d
TIM_SMCR_TS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1877;"	d
TIM_SR1_BIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1900;"	d
TIM_SR1_CC1IF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1903;"	d
TIM_SR1_CC2IF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1902;"	d
TIM_SR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1830;"	d
TIM_SR1_TIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1901;"	d
TIM_SR1_UIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1904;"	d
TIM_SR2_CC1OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1908;"	d
TIM_SR2_CC2OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1907;"	d
TIM_SR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1831;"	d
TIM_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^TIM_TypeDef;$/;"	t	typeref:struct:TIM_struct
TIM_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct TIM_struct$/;"	s
TINY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	102;"	d
TINY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	109;"	d
TINY	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	123;"	d
TR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TR1; \/*!<  Time  Register  1*\/$/;"	m	struct:RTC_struct
TR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TR2; \/*!<  Time  Register  2*\/$/;"	m	struct:RTC_struct
TR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TR3; \/*!<  Time  Register  3*\/$/;"	m	struct:RTC_struct
TRIGR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t   TRIGR[4]; \/*!< Trigger disable  registers  *\/$/;"	m	struct:ADC_struct
TRISER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TRISER; \/*!< I2C maximum rise time register *\/$/;"	m	struct:I2C_struct
TRUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {FALSE = 0, TRUE = !FALSE} bool;$/;"	e	enum:__anon6
TXCRCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t TXCRCR; \/*!< SPI Tx CRC register *\/$/;"	m	struct:SPI_struct
U16_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	218;"	d
U32_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	221;"	d
U8_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	215;"	d
UBC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t UBC;        \/*!< User Boot code size*\/$/;"	m	struct:OPT_struct
USART1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2706;"	d
USART1_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2658;"	d
USART2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2707;"	d
USART2_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2659;"	d
USART3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2708;"	d
USART3_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2660;"	d
USART_BRR1_DIVM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2101;"	d
USART_BRR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2078;"	d
USART_BRR2_DIVF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2104;"	d
USART_BRR2_DIVM	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2103;"	d
USART_BRR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2079;"	d
USART_CR1_M	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2109;"	d
USART_CR1_PCEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2111;"	d
USART_CR1_PIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2113;"	d
USART_CR1_PS	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2112;"	d
USART_CR1_R8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2106;"	d
USART_CR1_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2080;"	d
USART_CR1_T8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2107;"	d
USART_CR1_USARTD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2108;"	d
USART_CR1_WAKE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2110;"	d
USART_CR2_ILIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2118;"	d
USART_CR2_REN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2120;"	d
USART_CR2_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2081;"	d
USART_CR2_RIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2117;"	d
USART_CR2_RWU	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2121;"	d
USART_CR2_SBK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2122;"	d
USART_CR2_TCIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2116;"	d
USART_CR2_TEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2119;"	d
USART_CR2_TIEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2115;"	d
USART_CR3_CLKEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2125;"	d
USART_CR3_CPHA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2127;"	d
USART_CR3_CPOL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2126;"	d
USART_CR3_LBCL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2128;"	d
USART_CR3_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2082;"	d
USART_CR3_STOP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2124;"	d
USART_CR4_ADD	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2130;"	d
USART_CR4_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2083;"	d
USART_CR5_DMAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2133;"	d
USART_CR5_DMAT	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2132;"	d
USART_CR5_EIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2139;"	d
USART_CR5_HDSEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2136;"	d
USART_CR5_IREN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2138;"	d
USART_CR5_IRLP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2137;"	d
USART_CR5_NACK	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2135;"	d
USART_CR5_SCEN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2134;"	d
USART_SR_FE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2098;"	d
USART_SR_IDLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2095;"	d
USART_SR_NF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2097;"	d
USART_SR_OR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2096;"	d
USART_SR_PE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2099;"	d
USART_SR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2077;"	d
USART_SR_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2094;"	d
USART_SR_TC	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2093;"	d
USART_SR_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2092;"	d
USART_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^USART_TypeDef;$/;"	t	typeref:struct:USART_struct
USART_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct USART_struct$/;"	s
USE_STDPERIPH_DRIVER	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	74;"	d
VECTOR_ID	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2786;"	d
ValBit	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2825;"	d
WDG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t WDG;        \/*!< Independent and Window watchdog option *\/$/;"	m	struct:OPT_struct
WFE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2701;"	d
WFE_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2646;"	d
WFE_CR1_EXTI_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1279;"	d
WFE_CR1_EXTI_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1278;"	d
WFE_CR1_EXTI_EV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1277;"	d
WFE_CR1_EXTI_EV3	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1276;"	d
WFE_CR1_TIM1_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1281;"	d
WFE_CR1_TIM1_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1280;"	d
WFE_CR1_TIM2_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1283;"	d
WFE_CR1_TIM2_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1282;"	d
WFE_CR2_ADC1_COMP_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1285;"	d
WFE_CR2_EXTI_EV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1292;"	d
WFE_CR2_EXTI_EV5	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1291;"	d
WFE_CR2_EXTI_EV6	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1290;"	d
WFE_CR2_EXTI_EV7	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1289;"	d
WFE_CR2_EXTI_EVBG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1288;"	d
WFE_CR2_EXTI_EVDH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1287;"	d
WFE_CR2_EXTI_EVEF	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1286;"	d
WFE_CR3_DMA1CH01_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1295;"	d
WFE_CR3_DMA1CH23_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1294;"	d
WFE_CR3_I2C1_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1297;"	d
WFE_CR3_SPI1_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1298;"	d
WFE_CR3_TIM3_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1301;"	d
WFE_CR3_TIM3_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1300;"	d
WFE_CR3_TIM4_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1299;"	d
WFE_CR3_USART1_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1296;"	d
WFE_CR4_AES_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1303;"	d
WFE_CR4_RTC_CSS_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1309;"	d
WFE_CR4_SPI2_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1308;"	d
WFE_CR4_TIM5_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1305;"	d
WFE_CR4_TIM5_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1304;"	d
WFE_CR4_USART2_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1307;"	d
WFE_CR4_USART3_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1306;"	d
WFE_CRX_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	1267;"	d
WFE_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^WFE_TypeDef;$/;"	t	typeref:struct:WFE_struct
WFE_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct WFE_struct$/;"	s
WPR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t WPR;  \/*!< Write Protection Register  *\/$/;"	m	struct:RTC_struct
WR	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t WR; \/*!< Window Register *\/$/;"	m	struct:WWDG_struct
WUTRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t WUTRH; \/*!<  Wake-Up Timer High Register  *\/$/;"	m	struct:RTC_struct
WUTRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t WUTRL; \/*!<  Wake-Up Timer  Low Register  *\/$/;"	m	struct:RTC_struct
WWDG	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2699;"	d
WWDG_BASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2650;"	d
WWDG_CR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2490;"	d
WWDG_CR_T	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2503;"	d
WWDG_CR_T6	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2502;"	d
WWDG_CR_WDGA	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2501;"	d
WWDG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^WWDG_TypeDef;$/;"	t	typeref:struct:WWDG_struct
WWDG_WR_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2505;"	d
WWDG_WR_RESET_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2491;"	d
WWDG_WR_W	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2506;"	d
WWDG_struct	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef struct WWDG_struct$/;"	s
XTSTARTUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^  __IO uint8_t XTSTARTUP;  \/*!< HSE and LSE option *\/$/;"	m	struct:OPT_struct
_COSMIC_	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	61;"	d
_IAR_	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	65;"	d
_RAISONANCE_	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	63;"	d
__CONST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	104;"	d
__CONST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	111;"	d
__CONST	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	125;"	d
__I	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	181;"	d
__IO	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	183;"	d
__O	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	182;"	d
__STM8L15X_STDPERIPH_VERSION	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	162;"	d
__STM8L15X_STDPERIPH_VERSION_MAIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	156;"	d
__STM8L15X_STDPERIPH_VERSION_SUB1	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	158;"	d
__STM8L15X_STDPERIPH_VERSION_SUB2	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	160;"	d
__STM8L15x_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	24;"	d
bool	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef enum {FALSE = 0, TRUE = !FALSE} bool;$/;"	t	typeref:enum:__anon6
disableInterrupts	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2741;"	d
disableInterrupts	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2751;"	d
disableInterrupts	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2762;"	d
enableInterrupts	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2740;"	d
enableInterrupts	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2750;"	d
enableInterrupts	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2761;"	d
halt	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2748;"	d
halt	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2758;"	d
halt	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2769;"	d
int16_t	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef   signed short    int16_t;$/;"	t
int32_t	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef   signed long     int32_t;$/;"	t
int8_t	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef   signed char     int8_t;$/;"	t
nop	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2744;"	d
nop	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2754;"	d
nop	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2765;"	d
rim	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2742;"	d
rim	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2752;"	d
rim	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2763;"	d
s16	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef int16_t s16;$/;"	t
s32	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef int32_t  s32;$/;"	t
s8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef int8_t  s8;$/;"	t
sim	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2743;"	d
sim	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2753;"	d
sim	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2764;"	d
trap	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2745;"	d
trap	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2755;"	d
trap	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2766;"	d
u16	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef uint16_t u16;$/;"	t
u32	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef uint32_t  u32;$/;"	t
u8	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef uint8_t  u8;$/;"	t
uint16_t	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef unsigned short    uint16_t;$/;"	t
uint32_t	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef unsigned long     uint32_t;$/;"	t
uint8_t	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	/^typedef unsigned char     uint8_t;$/;"	t
wfe	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2747;"	d
wfe	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2757;"	d
wfe	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2768;"	d
wfi	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2746;"	d
wfi	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2756;"	d
wfi	STM8L15x_StdPeriph_Driver\inc\stm8l15x.h	2767;"	d
ADC_AnalogWatchdogSelection_Channel0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel0  = ((uint8_t)0x00), \/*!< AWD affected to Channel 0 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel1  = ((uint8_t)0x01), \/*!< AWD affected to Channel 1 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel10 = ((uint8_t)0x0A), \/*!< AWD affected to Channel 10 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel11 = ((uint8_t)0x0B), \/*!< AWD affected to Channel 11 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel12 = ((uint8_t)0x0C), \/*!< AWD affected to Channel 12 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel13	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel13 = ((uint8_t)0x0D), \/*!< AWD affected to Channel 13 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel14 = ((uint8_t)0x0E), \/*!< AWD affected to Channel 14 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel15 = ((uint8_t)0x0F), \/*!< AWD affected to Channel 15 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel16 = ((uint8_t)0x10), \/*!< AWD affected to Channel 16 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel17	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel17 = ((uint8_t)0x11), \/*!< AWD affected to Channel 17 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel18	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel18 = ((uint8_t)0x12), \/*!< AWD affected to Channel 18 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel19	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel19 = ((uint8_t)0x13), \/*!< AWD affected to Channel 19 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel2  = ((uint8_t)0x02), \/*!< AWD affected to Channel 2 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel20	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel20 = ((uint8_t)0x14), \/*!< AWD affected to Channel 20 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel21	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel21 = ((uint8_t)0x15), \/*!< AWD affected to Channel 21 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel22	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel22 = ((uint8_t)0x16), \/*!< AWD affected to Channel 22 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel23	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel23 = ((uint8_t)0x17), \/*!< AWD affected to Channel 23 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel24	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel24  = ((uint8_t)0x18), \/*!< AWD affected to Channel 24 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel25	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel25  = ((uint8_t)0x19), \/*!< AWD affected to Channel 25 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel26	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel26  = ((uint8_t)0x1A), \/*!< AWD affected to Channel 26 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel27	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel27  = ((uint8_t)0x1B), \/*!< AWD affected to Channel 27 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel3  = ((uint8_t)0x03), \/*!< AWD affected to Channel 3 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel4  = ((uint8_t)0x04), \/*!< AWD affected to Channel 4 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel5  = ((uint8_t)0x05), \/*!< AWD affected to Channel 5 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel6  = ((uint8_t)0x06), \/*!< AWD affected to Channel 6 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel7  = ((uint8_t)0x07), \/*!< AWD affected to Channel 7 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel8  = ((uint8_t)0x08), \/*!< AWD affected to Channel 8 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_Channel9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Channel9  = ((uint8_t)0x09), \/*!< AWD affected to Channel 9 *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_TempSensor	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_TempSensor = ((uint8_t)0x1D)  \/*!< AWD affected to Temperature Sensor Channel *\/$/;"	e	enum:__anon18
ADC_AnalogWatchdogSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_AnalogWatchdogSelection_TypeDef;$/;"	t	typeref:enum:__anon18
ADC_AnalogWatchdogSelection_Vrefint	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_AnalogWatchdogSelection_Vrefint    = ((uint8_t)0x1C), \/*!< AWD affected to Internal Vref Channel  *\/$/;"	e	enum:__anon18
ADC_Channel_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_0           = ((uint16_t)0x0301), \/*!< Channel 00 *\/$/;"	e	enum:__anon10
ADC_Channel_00To07	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_00To07      = ((uint16_t)0x03FF), \/*!<select from channel00 to channel07 *\/$/;"	e	enum:__anon10
ADC_Channel_08To15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_08To15      = ((uint16_t)0x02FF), \/*!<select from channel08 to channel15 *\/$/;"	e	enum:__anon10
ADC_Channel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_1           = ((uint16_t)0x0302), \/*!< Channel 01 *\/$/;"	e	enum:__anon10
ADC_Channel_10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_10          = ((uint16_t)0x0204), \/*!< Channel 10 *\/$/;"	e	enum:__anon10
ADC_Channel_11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_11          = ((uint16_t)0x0208), \/*!< Channel 11 *\/$/;"	e	enum:__anon10
ADC_Channel_12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_12          = ((uint16_t)0x0210), \/*!< Channel 12 *\/$/;"	e	enum:__anon10
ADC_Channel_13	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_13          = ((uint16_t)0x0220), \/*!< Channel 13 *\/$/;"	e	enum:__anon10
ADC_Channel_14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_14          = ((uint16_t)0x0240), \/*!< Channel 14 *\/$/;"	e	enum:__anon10
ADC_Channel_15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_15          = ((uint16_t)0x0280), \/*!< Channel 15 *\/$/;"	e	enum:__anon10
ADC_Channel_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_16          = ((uint16_t)0x0101), \/*!< Channel 16 *\/$/;"	e	enum:__anon10
ADC_Channel_16To23	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_16To23      = ((uint16_t)0x01FF), \/*!<select from channel16 to channel23 *\/$/;"	e	enum:__anon10
ADC_Channel_17	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_17          = ((uint16_t)0x0102), \/*!< Channel 17 *\/$/;"	e	enum:__anon10
ADC_Channel_18	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_18          = ((uint16_t)0x0104), \/*!< Channel 18 *\/$/;"	e	enum:__anon10
ADC_Channel_19	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_19          = ((uint16_t)0x0108), \/*!< Channel 19 *\/$/;"	e	enum:__anon10
ADC_Channel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_2           = ((uint16_t)0x0304), \/*!< Channel 02 *\/$/;"	e	enum:__anon10
ADC_Channel_20	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_20          = ((uint16_t)0x0110), \/*!< Channel 20 *\/$/;"	e	enum:__anon10
ADC_Channel_21	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_21          = ((uint16_t)0x0120), \/*!< Channel 21 *\/$/;"	e	enum:__anon10
ADC_Channel_22	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_22          = ((uint16_t)0x0140), \/*!< Channel 22 *\/$/;"	e	enum:__anon10
ADC_Channel_23	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_23          = ((uint16_t)0x0180), \/*!< Channel 23 *\/$/;"	e	enum:__anon10
ADC_Channel_24	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_24          = ((uint16_t)0x0001), \/*!< Channel 24 *\/$/;"	e	enum:__anon10
ADC_Channel_24To27	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_24To27      = ((uint16_t)0x00FF) \/*!<select from channel24 to channel27 : Fast channels *\/$/;"	e	enum:__anon10
ADC_Channel_25	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_25          = ((uint16_t)0x0002), \/*!< Channel 25 *\/$/;"	e	enum:__anon10
ADC_Channel_26	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_26          = ((uint16_t)0x0004), \/*!< Channel 26 *\/$/;"	e	enum:__anon10
ADC_Channel_27	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_27          = ((uint16_t)0x0008), \/*!< Channel 27 *\/$/;"	e	enum:__anon10
ADC_Channel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_3           = ((uint16_t)0x0308), \/*!< Channel 03 *\/$/;"	e	enum:__anon10
ADC_Channel_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_4           = ((uint16_t)0x0310), \/*!< Channel 04 *\/$/;"	e	enum:__anon10
ADC_Channel_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_5           = ((uint16_t)0x0320), \/*!< Channel 05 *\/$/;"	e	enum:__anon10
ADC_Channel_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_6           = ((uint16_t)0x0340), \/*!< Channel 06 *\/$/;"	e	enum:__anon10
ADC_Channel_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_7           = ((uint16_t)0x0380), \/*!< Channel 07 *\/$/;"	e	enum:__anon10
ADC_Channel_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_8           = ((uint16_t)0x0201), \/*!< Channel 08 *\/$/;"	e	enum:__anon10
ADC_Channel_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_9           = ((uint16_t)0x0202), \/*!< Channel 09*\/$/;"	e	enum:__anon10
ADC_Channel_TempSensor	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_TempSensor  = ((uint16_t)0x0020), \/*!< Temperature sensor  Channel  *\/$/;"	e	enum:__anon10
ADC_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_Channel_TypeDef;$/;"	t	typeref:enum:__anon10
ADC_Channel_Vrefint	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Channel_Vrefint     = ((uint16_t)0x0010), \/*!< Vrefint  Channel  *\/$/;"	e	enum:__anon10
ADC_ConversionMode_Continuous	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ConversionMode_Continuous = ((uint8_t)0x04)  \/*!< Continuous Conversion Mode *\/$/;"	e	enum:__anon11
ADC_ConversionMode_Single	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ConversionMode_Single     = ((uint8_t)0x00), \/*!< Single Conversion Mode *\/$/;"	e	enum:__anon11
ADC_ConversionMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_ConversionMode_TypeDef;$/;"	t	typeref:enum:__anon11
ADC_ExtEventSelection_None	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtEventSelection_None     = ((uint8_t)0x00), \/*!< Conversation starts only by software start *\/$/;"	e	enum:__anon15
ADC_ExtEventSelection_Trigger1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtEventSelection_Trigger1 = ((uint8_t)0x08), \/*!< Trigger 1  Enables conversion *\/$/;"	e	enum:__anon15
ADC_ExtEventSelection_Trigger2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtEventSelection_Trigger2 = ((uint8_t)0x10), \/*!< Trigger 2 Enables conversion *\/$/;"	e	enum:__anon15
ADC_ExtEventSelection_Trigger3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtEventSelection_Trigger3 = ((uint8_t)0x18)  \/*!< Trigger 3 Enables conversion *\/$/;"	e	enum:__anon15
ADC_ExtEventSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_ExtEventSelection_TypeDef;$/;"	t	typeref:enum:__anon15
ADC_ExtTRGSensitivity_All	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtTRGSensitivity_All     = ((uint8_t)0x60)  \/*!< External Trigger Sensitivity is Falling and Rising Edge *\/$/;"	e	enum:__anon14
ADC_ExtTRGSensitivity_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtTRGSensitivity_Falling = ((uint8_t)0x40), \/*!< External Trigger Sensitivity is Falling Edge *\/$/;"	e	enum:__anon14
ADC_ExtTRGSensitivity_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_ExtTRGSensitivity_Rising  = ((uint8_t)0x20), \/*!< External Trigger Sensitivity is Rising Edge *\/$/;"	e	enum:__anon14
ADC_ExtTRGSensitivity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_ExtTRGSensitivity_TypeDef;$/;"	t	typeref:enum:__anon14
ADC_FLAG_AWD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_FLAG_AWD  = ((uint8_t)0x02), \/*!< Analog WatchDog  flag  *\/$/;"	e	enum:__anon20
ADC_FLAG_EOC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_FLAG_EOC  = ((uint8_t)0x01), \/*!< End of Conversation  flag  *\/$/;"	e	enum:__anon20
ADC_FLAG_OVER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_FLAG_OVER = ((uint8_t)0x04)  \/*!< Over Run flag  *\/$/;"	e	enum:__anon20
ADC_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_FLAG_TypeDef;$/;"	t	typeref:enum:__anon20
ADC_Group_FastChannels	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Group_FastChannels = ((uint8_t)0x01)  \/*!<Fast Channels group (Channel 24, Channel Vrefint, Channel TempSensor) *\/$/;"	e	enum:__anon16
ADC_Group_SlowChannels	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Group_SlowChannels = ((uint8_t)0x00), \/*!<Slow Channels group(Channel 0 to 23) *\/$/;"	e	enum:__anon16
ADC_Group_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_Group_TypeDef;$/;"	t	typeref:enum:__anon16
ADC_IT_AWD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_IT_AWD  = ((uint8_t)0x10), \/*!< Analog WatchDog  Interrupt  *\/$/;"	e	enum:__anon19
ADC_IT_EOC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_IT_EOC  = ((uint8_t)0x08), \/*!< End of Conversation  Interrupt  *\/$/;"	e	enum:__anon19
ADC_IT_OVER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_IT_OVER = ((uint8_t)0x80)  \/*!< Over Run Interrupt  *\/$/;"	e	enum:__anon19
ADC_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_IT_TypeDef;$/;"	t	typeref:enum:__anon19
ADC_Prescaler_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Prescaler_1 = ((uint8_t)0x00), \/*!< ADC Clock frequency is divided by 1 *\/$/;"	e	enum:__anon13
ADC_Prescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Prescaler_2 = ((uint8_t)0x80)  \/*!< ADC Clock frequency is divided by 2 *\/$/;"	e	enum:__anon13
ADC_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon13
ADC_Resolution_10Bit	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Resolution_10Bit = ((uint8_t)0x20), \/*!< 10 bit resolution *\/$/;"	e	enum:__anon12
ADC_Resolution_12Bit	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Resolution_12Bit = ((uint8_t)0x00), \/*!< 12 bit resolution *\/$/;"	e	enum:__anon12
ADC_Resolution_6Bit	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Resolution_6Bit  = ((uint8_t)0x60)  \/*!< 6 bit resolution *\/$/;"	e	enum:__anon12
ADC_Resolution_8Bit	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_Resolution_8Bit  = ((uint8_t)0x40), \/*!< 8 bit resolution *\/$/;"	e	enum:__anon12
ADC_Resolution_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_Resolution_TypeDef;$/;"	t	typeref:enum:__anon12
ADC_SamplingTime_16Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_16Cycles  = ((uint8_t)0x02), \/*!< Sampling Time Cycles is  16 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_192Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_192Cycles = ((uint8_t)0x06), \/*!< Sampling Time Cycles is  192 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_24Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_24Cycles  = ((uint8_t)0x03), \/*!< Sampling Time Cycles is  24 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_384Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_384Cycles = ((uint8_t)0x07)  \/*!< Sampling Time Cycles is  384 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_48Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_48Cycles  = ((uint8_t)0x04), \/*!< Sampling Time Cycles is  48 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_4Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_4Cycles   = ((uint8_t)0x00), \/*!< Sampling Time Cycles is 4 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_96Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_96Cycles  = ((uint8_t)0x05), \/*!< Sampling Time Cycles is  96 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_9Cycles	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^  ADC_SamplingTime_9Cycles   = ((uint8_t)0x01), \/*!< Sampling Time Cycles is  9 *\/$/;"	e	enum:__anon17
ADC_SamplingTime_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	/^}ADC_SamplingTime_TypeDef;$/;"	t	typeref:enum:__anon17
IS_ADC_ANALOGWATCHDOG_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	286;"	d
IS_ADC_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	299;"	d
IS_ADC_CONVERSION_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	234;"	d
IS_ADC_EXT_EVENT_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	261;"	d
IS_ADC_EXT_TRG_SENSITIVITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	254;"	d
IS_ADC_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	303;"	d
IS_ADC_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	294;"	d
IS_ADC_GROUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	269;"	d
IS_ADC_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	290;"	d
IS_ADC_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	248;"	d
IS_ADC_RESOLUTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	240;"	d
IS_ADC_SAMPLING_TIME_CYCLES	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	274;"	d
IS_ADC_THRESHOLD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	308;"	d
__STM8L15x_ADC_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_adc.h	24;"	d
AES_DMATransfer_InOut	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_DMATransfer_InOut = (uint8_t) 0x80 \/*!< DMA requests enabled for input transfer phase$/;"	e	enum:__anon24
AES_DMATransfer_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^AES_DMATransfer_TypeDef;$/;"	t	typeref:enum:__anon24
AES_FLAG_CCF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_FLAG_CCF      = (uint8_t)0x01,  \/*!< Computation Complete Flag *\/$/;"	e	enum:__anon22
AES_FLAG_RDERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_FLAG_RDERR    = (uint8_t)0x02,  \/*!< Read Error Flag           *\/$/;"	e	enum:__anon22
AES_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^}AES_FLAG_TypeDef;$/;"	t	typeref:enum:__anon22
AES_FLAG_WRERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_FLAG_WRERR    = (uint8_t)0x04   \/*!< Write Error Flag          *\/$/;"	e	enum:__anon22
AES_IT_CCIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_IT_CCIE   = (uint16_t)0x20, \/*!< Computation Complete interrupt enable *\/$/;"	e	enum:__anon23
AES_IT_ERRIE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_IT_ERRIE  = (uint16_t)0x40  \/*!< Error interrupt enable                *\/$/;"	e	enum:__anon23
AES_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^}AES_IT_TypeDef;$/;"	t	typeref:enum:__anon23
AES_Operation_Decryp	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_Operation_Decryp            = (uint8_t)0x04, \/*!< AES in Decryption mode *\/$/;"	e	enum:__anon21
AES_Operation_Encryp	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_Operation_Encryp            = (uint8_t)0x00, \/*!< AES in Encryption mode *\/$/;"	e	enum:__anon21
AES_Operation_KeyDeriv	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_Operation_KeyDeriv          = (uint8_t)0x02, \/*!< AES in Key Derivation mode *\/$/;"	e	enum:__anon21
AES_Operation_KeyDerivAndDecryp	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^  AES_Operation_KeyDerivAndDecryp = (uint8_t)0x06  \/*!< AES in Key Derivation and Decryption mode *\/$/;"	e	enum:__anon21
AES_Operation_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	/^} AES_Operation_TypeDef;$/;"	t	typeref:enum:__anon21
IS_AES_DMATRANSFER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	126;"	d
IS_AES_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	99;"	d
IS_AES_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	118;"	d
IS_AES_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	108;"	d
__STM8L15x_AES_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_aes.h	24;"	d
BEEP_CALIBRATION_DEFAULT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	59;"	d
BEEP_Frequency_1KHz	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	/^  BEEP_Frequency_1KHz = (uint8_t)0x00,  \/*!< Beep signal output frequency 1 KHz *\/$/;"	e	enum:__anon25
BEEP_Frequency_2KHz	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	/^  BEEP_Frequency_2KHz = (uint8_t)0x40,  \/*!< Beep signal output frequency 2 KHz *\/$/;"	e	enum:__anon25
BEEP_Frequency_4KHz	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	/^  BEEP_Frequency_4KHz = (uint8_t)0x80   \/*!< Beep signal output frequency 4 KHz *\/$/;"	e	enum:__anon25
BEEP_Frequency_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	/^} BEEP_Frequency_TypeDef;$/;"	t	typeref:enum:__anon25
IS_BEEP_FREQUENCY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	81;"	d
IS_LSI_FREQUENCY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	89;"	d
LSI_FREQUENCY_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	61;"	d
LSI_FREQUENCY_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	60;"	d
__STM8L15x_BEEP_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_beep.h	24;"	d
CLK_BEEPCLKSource_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_BEEPCLKSource_LSE = (uint8_t)0x04  \/*!< Clock BEEP : LSE *\/$/;"	e	enum:__anon31
CLK_BEEPCLKSource_LSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_BEEPCLKSource_LSI = (uint8_t)0x02, \/*!< Clock BEEP : LSI *\/$/;"	e	enum:__anon31
CLK_BEEPCLKSource_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_BEEPCLKSource_Off = (uint8_t)0x00, \/*!< Clock BEEP Off *\/$/;"	e	enum:__anon31
CLK_BEEPCLKSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_BEEPCLKSource_TypeDef;$/;"	t	typeref:enum:__anon31
CLK_CCODiv_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_1  = (uint8_t)0x00, \/*!< Clock Output Div 1 *\/$/;"	e	enum:__anon30
CLK_CCODiv_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_16 = (uint8_t)0x80, \/*!< Clock Output Div 16 *\/$/;"	e	enum:__anon30
CLK_CCODiv_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_2  = (uint8_t)0x20, \/*!< Clock Output Div 2 *\/$/;"	e	enum:__anon30
CLK_CCODiv_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_32 = (uint8_t)0xA0, \/*!< Clock Output Div 32 *\/$/;"	e	enum:__anon30
CLK_CCODiv_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_4  = (uint8_t)0x40, \/*!< Clock Output Div 4 *\/$/;"	e	enum:__anon30
CLK_CCODiv_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_64 = (uint8_t)0xC0  \/*!< Clock Output Div 64 *\/$/;"	e	enum:__anon30
CLK_CCODiv_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCODiv_8  = (uint8_t)0x60, \/*!< Clock Output Div 8 *\/$/;"	e	enum:__anon30
CLK_CCODiv_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_CCODiv_TypeDef;$/;"	t	typeref:enum:__anon30
CLK_CCOSource_HSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCOSource_HSE = (uint8_t)0x08, \/*!< HSE Clock Output *\/$/;"	e	enum:__anon29
CLK_CCOSource_HSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCOSource_HSI = (uint8_t)0x02, \/*!< HSI Clock Output  *\/$/;"	e	enum:__anon29
CLK_CCOSource_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCOSource_LSE = (uint8_t)0x10  \/*!< LSE Clock Output *\/$/;"	e	enum:__anon29
CLK_CCOSource_LSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCOSource_LSI = (uint8_t)0x04, \/*!< LSI Clock Output *\/$/;"	e	enum:__anon29
CLK_CCOSource_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_CCOSource_Off = (uint8_t)0x00, \/*!< Clock Output Off *\/$/;"	e	enum:__anon29
CLK_CCOSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_CCOSource_TypeDef;$/;"	t	typeref:enum:__anon29
CLK_FLAG_AUX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_AUX         = (uint8_t)0x51, \/*!< Auxiliary oscillator connected to master clock *\/$/;"	e	enum:__anon36
CLK_FLAG_BEEPSWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_BEEPSWBSY   = (uint8_t)0x60, \/*!< BEEP clock busy in switch Flag*\/$/;"	e	enum:__anon36
CLK_FLAG_CCOBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_CCOBSY      = (uint8_t)0x20, \/*!< Configurable clock output busy *\/$/;"	e	enum:__anon36
CLK_FLAG_CSSD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_CSSD        = (uint8_t)0x53, \/*!< Clock security system detection Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_EEBUSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_EEBUSY      = (uint8_t)0x76, \/*!< Flash program memory and Data EEPROM busy Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_EEREADY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_EEREADY     = (uint8_t)0x77, \/*!< Flash program memory and Data EEPROM ready Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_HSEPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_HSEPD       = (uint8_t)0x74, \/*!< HSE power-down Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_HSERDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_HSERDY      = (uint8_t)0x31, \/*!< High speed external oscillator ready Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_HSIPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_HSIPD       = (uint8_t)0x72, \/*!< HSI power-down Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_HSIRDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_HSIRDY      = (uint8_t)0x11, \/*!< High speed internal oscillator ready Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_LSECSSF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_LSECSSF     = (uint8_t)0x83,  \/*!< CSS on LSE detection Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_LSEPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_LSEPD       = (uint8_t)0x75, \/*!< LSE power-down Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_LSERDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_LSERDY      = (uint8_t)0x33, \/*!< Low speed external oscillator ready Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_LSIPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_LSIPD       = (uint8_t)0x73, \/*!< LSI power-down Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_LSIRDY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_LSIRDY      = (uint8_t)0x13, \/*!< Low speed internal oscillator ready Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_REGREADY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_REGREADY    = (uint8_t)0x70,  \/*!< REGREADY Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_RTCCLKSWF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_RTCCLKSWF   = (uint8_t)0x84   \/*!< RTCCLK switch completed flag on LSE failure *\/$/;"	e	enum:__anon36
CLK_FLAG_RTCSWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_RTCSWBSY    = (uint8_t)0x00, \/*!< RTC clock busy in switch Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_SWBSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_FLAG_SWBSY       = (uint8_t)0x40, \/*!< Switch busy Flag *\/$/;"	e	enum:__anon36
CLK_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^}CLK_FLAG_TypeDef;$/;"	t	typeref:enum:__anon36
CLK_HSE_Bypass	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_HSE_Bypass = (uint8_t)0x11  \/*!< HSE Bypass and enable *\/$/;"	e	enum:__anon26
CLK_HSE_OFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_HSE_OFF    = (uint8_t)0x00, \/*!< HSE Diasble *\/$/;"	e	enum:__anon26
CLK_HSE_ON	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_HSE_ON     = (uint8_t)0x01, \/*!< HSE Enable *\/$/;"	e	enum:__anon26
CLK_HSE_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_HSE_TypeDef;$/;"	t	typeref:enum:__anon26
CLK_Halt_BEEPRunning	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Halt_BEEPRunning = (uint8_t)0x40, \/*!< BEEP clock Halt\/Active-halt mode *\/$/;"	e	enum:__anon38
CLK_Halt_FastWakeup	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Halt_FastWakeup  = (uint8_t)0x20, \/*!< Fast wakeup from Halt\/Active-halt modes *\/$/;"	e	enum:__anon38
CLK_Halt_SlowWakeup	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Halt_SlowWakeup  = (uint8_t)0x10  \/*!< Slow Active-halt mode *\/$/;"	e	enum:__anon38
CLK_Halt_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^CLK_Halt_TypeDef;$/;"	t	typeref:enum:__anon38
CLK_IT_CSSD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_IT_CSSD     = (uint8_t)0x0C, \/*!< Clock security system detection Flag *\/$/;"	e	enum:__anon37
CLK_IT_LSECSSF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_IT_LSECSSF  = (uint8_t)0x2C  \/*!< LSE Clock security system detection Interrupt *\/$/;"	e	enum:__anon37
CLK_IT_SWIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_IT_SWIF     = (uint8_t)0x1C,  \/*!< Clock switch interrupt Flag *\/$/;"	e	enum:__anon37
CLK_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^}CLK_IT_TypeDef;$/;"	t	typeref:enum:__anon37
CLK_LSE_Bypass	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_LSE_Bypass = (uint8_t)0x24  \/*!< LSE Bypass and enable *\/$/;"	e	enum:__anon27
CLK_LSE_OFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_LSE_OFF    = (uint8_t)0x00, \/*!< LSE Diasble *\/$/;"	e	enum:__anon27
CLK_LSE_ON	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_LSE_ON     = (uint8_t)0x04, \/*!< LSE Enable *\/$/;"	e	enum:__anon27
CLK_LSE_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_LSE_TypeDef;$/;"	t	typeref:enum:__anon27
CLK_Peripheral_ADC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_ADC1    = (uint8_t)0x10, \/*!< Peripheral Clock Enable 2, ADC1 *\/$/;"	e	enum:__anon34
CLK_Peripheral_AES	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_AES     = (uint8_t)0x20, \/*!< Peripheral Clock Enable 3, AES *\/$/;"	e	enum:__anon34
CLK_Peripheral_BEEP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_BEEP    = (uint8_t)0x06, \/*!< Peripheral Clock Enable 1, BEEP *\/$/;"	e	enum:__anon34
CLK_Peripheral_BOOTROM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_BOOTROM = (uint8_t)0x17,\/*!< Peripheral Clock Enable 2, Boot ROM *\/$/;"	e	enum:__anon34
CLK_Peripheral_COMP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_COMP    = (uint8_t)0x15, \/*!< Peripheral Clock Enable 2, COMP1 and COMP2 *\/$/;"	e	enum:__anon34
CLK_Peripheral_CSSLSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_CSSLSE  = (uint8_t)0x25   \/*!< Peripheral Clock Enable 3, CSS on LSE *\/$/;"	e	enum:__anon34
CLK_Peripheral_DAC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_DAC     = (uint8_t)0x07, \/*!< Peripheral Clock Enable 1, DAC *\/$/;"	e	enum:__anon34
CLK_Peripheral_DMA1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_DMA1    = (uint8_t)0x14, \/*!< Peripheral Clock Enable 2, DMA1 *\/$/;"	e	enum:__anon34
CLK_Peripheral_I2C1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_I2C1    = (uint8_t)0x03, \/*!< Peripheral Clock Enable 1, I2C1 *\/$/;"	e	enum:__anon34
CLK_Peripheral_LCD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_LCD     = (uint8_t)0x13, \/*!< Peripheral Clock Enable 2, LCD *\/$/;"	e	enum:__anon34
CLK_Peripheral_RTC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_RTC     = (uint8_t)0x12, \/*!< Peripheral Clock Enable 2, RTC *\/$/;"	e	enum:__anon34
CLK_Peripheral_SPI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_SPI1    = (uint8_t)0x04, \/*!< Peripheral Clock Enable 1, SPI1 *\/$/;"	e	enum:__anon34
CLK_Peripheral_SPI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_SPI2    = (uint8_t)0x22, \/*!< Peripheral Clock Enable 3, SPI2 *\/$/;"	e	enum:__anon34
CLK_Peripheral_TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_TIM1    = (uint8_t)0x11, \/*!< Peripheral Clock Enable 2, TIM1 *\/$/;"	e	enum:__anon34
CLK_Peripheral_TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_TIM2    = (uint8_t)0x00, \/*!< Peripheral Clock Enable 1, TIM2 *\/$/;"	e	enum:__anon34
CLK_Peripheral_TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_TIM3    = (uint8_t)0x01, \/*!< Peripheral Clock Enable 1, TIM3 *\/$/;"	e	enum:__anon34
CLK_Peripheral_TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_TIM4    = (uint8_t)0x02, \/*!< Peripheral Clock Enable 1, TIM4 *\/$/;"	e	enum:__anon34
CLK_Peripheral_TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_TIM5    = (uint8_t)0x21, \/*!< Peripheral Clock Enable 3, TIM5 *\/$/;"	e	enum:__anon34
CLK_Peripheral_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_Peripheral_TypeDef;$/;"	t	typeref:enum:__anon34
CLK_Peripheral_USART1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_USART1  = (uint8_t)0x05, \/*!< Peripheral Clock Enable 1, USART1 *\/$/;"	e	enum:__anon34
CLK_Peripheral_USART2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_USART2  = (uint8_t)0x23, \/*!< Peripheral Clock Enable 3, USART2 *\/$/;"	e	enum:__anon34
CLK_Peripheral_USART3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_Peripheral_USART3  = (uint8_t)0x24,  \/*!< Peripheral Clock Enable 3, USART3 *\/$/;"	e	enum:__anon34
CLK_RTCCLKDiv_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_1  = (uint8_t)0x00, \/*!< Clock RTC Div 1 *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_16 = (uint8_t)0x80, \/*!< Clock RTC Div 16 *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_2  = (uint8_t)0x20, \/*!< Clock RTC Div 2  *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_32 = (uint8_t)0xA0, \/*!< Clock RTC  Div 32 *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_4  = (uint8_t)0x40, \/*!< Clock RTC Div 4 *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_64 = (uint8_t)0xC0  \/*!< Clock RTC  Div 64 *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKDiv_8  = (uint8_t)0x60, \/*!< Clock RTC Div 8 *\/$/;"	e	enum:__anon33
CLK_RTCCLKDiv_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_RTCCLKDiv_TypeDef;$/;"	t	typeref:enum:__anon33
CLK_RTCCLKSource_HSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKSource_HSE = (uint8_t)0x08, \/*!< Clock RTC : HSE *\/$/;"	e	enum:__anon32
CLK_RTCCLKSource_HSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKSource_HSI = (uint8_t)0x02, \/*!< Clock RTC : HSI *\/$/;"	e	enum:__anon32
CLK_RTCCLKSource_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKSource_LSE = (uint8_t)0x10  \/*!< Clock RTC : LSE *\/$/;"	e	enum:__anon32
CLK_RTCCLKSource_LSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKSource_LSI = (uint8_t)0x04, \/*!< Clock RTC : LSI *\/$/;"	e	enum:__anon32
CLK_RTCCLKSource_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_RTCCLKSource_Off = (uint8_t)0x00, \/*!< Clock RTC Off *\/$/;"	e	enum:__anon32
CLK_RTCCLKSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_RTCCLKSource_TypeDef;$/;"	t	typeref:enum:__anon32
CLK_SYSCLKDiv_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_1   = (uint8_t)0x00, \/*!< System Clock Divider: 1 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_128 = (uint8_t)0x07  \/*!< System Clock Divider: 128 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_16  = (uint8_t)0x04, \/*!< System Clock Divider: 16 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_2   = (uint8_t)0x01, \/*!< System Clock Divider: 2 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_32  = (uint8_t)0x05, \/*!< System Clock Divider: 32 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_4   = (uint8_t)0x02, \/*!< System Clock Divider: 4 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_64  = (uint8_t)0x06, \/*!< System Clock Divider: 64 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKDiv_8   = (uint8_t)0x03, \/*!< System Clock Divider: 8 *\/$/;"	e	enum:__anon35
CLK_SYSCLKDiv_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_SYSCLKDiv_TypeDef;$/;"	t	typeref:enum:__anon35
CLK_SYSCLKSource_HSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKSource_HSE = (uint8_t)0x04, \/*!< System Clock Source HSE *\/$/;"	e	enum:__anon28
CLK_SYSCLKSource_HSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKSource_HSI = (uint8_t)0x01, \/*!< System Clock Source HSI *\/$/;"	e	enum:__anon28
CLK_SYSCLKSource_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKSource_LSE = (uint8_t)0x08  \/*!< System Clock Source LSE *\/$/;"	e	enum:__anon28
CLK_SYSCLKSource_LSI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^  CLK_SYSCLKSource_LSI = (uint8_t)0x02, \/*!< System Clock Source LSI *\/$/;"	e	enum:__anon28
CLK_SYSCLKSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	/^} CLK_SYSCLKSource_TypeDef;$/;"	t	typeref:enum:__anon28
IS_CLK_CLEAR_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	395;"	d
IS_CLK_CLOCK_BEEP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	295;"	d
IS_CLK_CLOCK_RTC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	303;"	d
IS_CLK_CLOCK_RTC_DIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	313;"	d
IS_CLK_FLAGS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	365;"	d
IS_CLK_HALT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	401;"	d
IS_CLK_HSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	250;"	d
IS_CLK_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	388;"	d
IS_CLK_LSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	258;"	d
IS_CLK_OUTPUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	273;"	d
IS_CLK_OUTPUT_DIVIDER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	283;"	d
IS_CLK_PERIPHERAL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	326;"	d
IS_CLK_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	265;"	d
IS_CLK_SYSTEM_DIVIDER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	352;"	d
__STM8L15x_CLK_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_clk.h	25;"	d
COMP_Edge_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Edge_Falling         = ((uint8_t)0x01), \/*!< Falling edge selection. *\/$/;"	e	enum:__anon40
COMP_Edge_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Edge_Rising          = ((uint8_t)0x02), \/*!< Rising edge selection. *\/$/;"	e	enum:__anon40
COMP_Edge_Rising_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Edge_Rising_Falling  = ((uint8_t)0x03)  \/*!< Rising and Falling edge selection. *\/$/;"	e	enum:__anon40
COMP_Edge_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_Edge_TypeDef;$/;"	t	typeref:enum:__anon40
COMP_InvertingInput_1_2VREFINT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_InvertingInput_1_2VREFINT = ((uint8_t)0x20), \/*!< 1\/2 VREFINT on comparator inverting input enable. *\/$/;"	e	enum:__anon41
COMP_InvertingInput_1_4VREFINT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_InvertingInput_1_4VREFINT = ((uint8_t)0x28), \/*!< 1\/4 VREFINT on comparator inverting input enable. *\/$/;"	e	enum:__anon41
COMP_InvertingInput_3_4VREFINT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_InvertingInput_3_4VREFINT = ((uint8_t)0x18), \/*!< 3\/4 VREFINT on comparator inverting input enable. *\/$/;"	e	enum:__anon41
COMP_InvertingInput_DAC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_InvertingInput_DAC1       = ((uint8_t)0x30)  \/*!< DAC1 output on comparator inverting input enable.  *\/$/;"	e	enum:__anon41
COMP_InvertingInput_IO	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_InvertingInput_IO         = ((uint8_t)0x08), \/*!< Input\/Output on comparator inverting input enable.*\/$/;"	e	enum:__anon41
COMP_InvertingInput_Typedef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_InvertingInput_Typedef;$/;"	t	typeref:enum:__anon41
COMP_InvertingInput_VREFINT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_InvertingInput_VREFINT    = ((uint8_t)0x10), \/*!< VREFINT on comparator inverting input enable.     *\/$/;"	e	enum:__anon41
COMP_OutputLevel_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_OutputLevel_High  = ((uint8_t)0x01)  \/*!< Comparator output level is high *\/$/;"	e	enum:__anon46
COMP_OutputLevel_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_OutputLevel_Low   = ((uint8_t)0x00), \/*!< Comparator output level is low *\/$/;"	e	enum:__anon46
COMP_OutputLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_OutputLevel_TypeDef;$/;"	t	typeref:enum:__anon46
COMP_OutputSelect_TIM1BRK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_OutputSelect_TIM1BRK       = ((uint8_t)0x80), \/*!< COMP2 output connected to TIM1 Break Input     *\/$/;"	e	enum:__anon42
COMP_OutputSelect_TIM1OCREFCLR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_OutputSelect_TIM1OCREFCLR  = ((uint8_t)0xC0)  \/*!< COMP2 output connected to TIM1 OCREF Clear     *\/$/;"	e	enum:__anon42
COMP_OutputSelect_TIM2IC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_OutputSelect_TIM2IC2       = ((uint8_t)0x00), \/*!< COMP2 output connected to TIM2 Input Capture 2 *\/$/;"	e	enum:__anon42
COMP_OutputSelect_TIM3IC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_OutputSelect_TIM3IC2       = ((uint8_t)0x40), \/*!< COMP2 output connected to TIM3 Input Capture 2 *\/$/;"	e	enum:__anon42
COMP_OutputSelect_Typedef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_OutputSelect_Typedef;$/;"	t	typeref:enum:__anon42
COMP_Selection_COMP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Selection_COMP1 = ((uint8_t)0x01), \/*!< Selection of Comparator 1. *\/$/;"	e	enum:__anon39
COMP_Selection_COMP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Selection_COMP2 = ((uint8_t)0x02)  \/*!< Selection of Comparator 2. *\/$/;"	e	enum:__anon39
COMP_Selection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_Selection_TypeDef;$/;"	t	typeref:enum:__anon39
COMP_Speed_Fast	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Speed_Fast  = ((uint8_t)0x04)  \/*!< Comparator speed: fast *\/$/;"	e	enum:__anon43
COMP_Speed_Slow	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_Speed_Slow  = ((uint8_t)0x00), \/*!< Comparator speed: slow *\/$/;"	e	enum:__anon43
COMP_Speed_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_Speed_TypeDef;$/;"	t	typeref:enum:__anon43
COMP_TriggerGroup_DACOutput	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerGroup_DACOutput          = ((uint8_t)0x04)  \/*!< Trigger on DAC output *\/$/;"	e	enum:__anon44
COMP_TriggerGroup_InvertingInput	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerGroup_InvertingInput     = ((uint8_t)0x01), \/*!< Trigger on comparator 2 inverting input *\/$/;"	e	enum:__anon44
COMP_TriggerGroup_NonInvertingInput	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerGroup_NonInvertingInput  = ((uint8_t)0x02), \/*!< Trigger on comparator 2 non inverting input *\/$/;"	e	enum:__anon44
COMP_TriggerGroup_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_TriggerGroup_TypeDef;$/;"	t	typeref:enum:__anon44
COMP_TriggerGroup_VREFINTOutput	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerGroup_VREFINTOutput      = ((uint8_t)0x03), \/*!< Trigger on VREFINT output *\/$/;"	e	enum:__anon44
COMP_TriggerPin_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerPin_0 = ((uint8_t)0x01), \/*!< PE5 for the non inverting inputt Trigger Group$/;"	e	enum:__anon45
COMP_TriggerPin_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerPin_1 = ((uint8_t)0x02), \/*!< PD0 for the non inverting inputt Trigger Group$/;"	e	enum:__anon45
COMP_TriggerPin_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^  COMP_TriggerPin_2 = ((uint8_t)0x04)  \/*!< PD1 for the non inverting inputt Trigger Group$/;"	e	enum:__anon45
COMP_TriggerPin_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	/^}COMP_TriggerPin_TypeDef;$/;"	t	typeref:enum:__anon45
IS_COMP_ALL_PERIPH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	155;"	d
IS_COMP_EDGE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	162;"	d
IS_COMP_INVERTING_INPUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	171;"	d
IS_COMP_OUTPUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	183;"	d
IS_COMP_SPEED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	193;"	d
IS_COMP_TRIGGERGROUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	201;"	d
IS_COMP_TRIGGERPIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	211;"	d
__STM8L15X_COMP_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_comp.h	24;"	d
__STM8L15x_CONF_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_conf.h	23;"	d
assert_param	STM8L15x_StdPeriph_Driver\inc\stm8l15x_conf.h	74;"	d
assert_param	STM8L15x_StdPeriph_Driver\inc\stm8l15x_conf.h	78;"	d
CH1RDHRH_Offset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	220;"	d
CH2RDHRH_Offset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	221;"	d
CR1_Offset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	217;"	d
CR2_Offset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	218;"	d
DAC_Align_12b_L	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Align_12b_L = ((uint8_t)0x04), \/*!< DAC alignement  Left 12bit *\/$/;"	e	enum:__anon48
DAC_Align_12b_R	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Align_12b_R = ((uint8_t)0x00), \/*!< DAC alignement  Right 12bit *\/$/;"	e	enum:__anon48
DAC_Align_8b_R	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Align_8b_R  = ((uint8_t)0x08)  \/*!< DAC alignement  Right 8bit *\/$/;"	e	enum:__anon48
DAC_Align_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_Align_TypeDef;$/;"	t	typeref:enum:__anon48
DAC_Channel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Channel_1 = ((uint8_t)0x00), \/*!< DAC Channel 1 selection  *\/$/;"	e	enum:__anon49
DAC_Channel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Channel_2 = ((uint8_t)0x01)  \/*!< DAC Channel 2 selection  *\/$/;"	e	enum:__anon49
DAC_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_Channel_TypeDef;$/;"	t	typeref:enum:__anon49
DAC_FLAG_DMAUDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_FLAG_DMAUDR = ((uint8_t)0x01) \/*!< DMA Underrun flag  *\/$/;"	e	enum:__anon53
DAC_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_FLAG_TypeDef;$/;"	t	typeref:enum:__anon53
DAC_IT_DMAUDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_IT_DMAUDR = ((uint8_t)0x20) \/*!< DMA Underrun Interrupt *\/$/;"	e	enum:__anon52
DAC_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_IT_TypeDef;$/;"	t	typeref:enum:__anon52
DAC_LFSRUnmask_Bit0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bit0                    =  ((uint8_t)0x00), \/*!<  Noise LFSR Unmask 1 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits10_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits10_0                =  ((uint8_t)0x0A), \/*!<  Noise LFSR Unmask 11 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits11_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits11_0                =  ((uint8_t)0x0B) \/*!<  Noise LFSR Unmask 12 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits1_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits1_0                 =  ((uint8_t)0x01), \/*!<  Noise LFSR Unmask 2 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits2_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits2_0                 =  ((uint8_t)0x02), \/*!<  Noise LFSR Unmask 3 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits3_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits3_0                 =  ((uint8_t)0x03), \/*!<  Noise LFSR Unmask 4 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits4_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits4_0                 =  ((uint8_t)0x04), \/*!<  Noise LFSR Unmask 5 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits5_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits5_0                 =  ((uint8_t)0x05), \/*!<  Noise LFSR Unmask 6 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits6_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits6_0                 =  ((uint8_t)0x06), \/*!<  Noise LFSR Unmask 7 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits7_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits7_0                 =  ((uint8_t)0x07), \/*!<  Noise LFSR Unmask 8 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits8_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits8_0                 =  ((uint8_t)0x08), \/*!<  Noise LFSR Unmask 9 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_Bits9_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_LFSRUnmask_Bits9_0                 =  ((uint8_t)0x09), \/*!<  Noise LFSR Unmask 10 LSB *\/$/;"	e	enum:__anon54
DAC_LFSRUnmask_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_LFSRUnmask_TypeDef;$/;"	t	typeref:enum:__anon54
DAC_OutputBuffer_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_OutputBuffer_Disable = ((uint8_t)0x02)  \/*!< DAC output buffer Disabled  *\/$/;"	e	enum:__anon51
DAC_OutputBuffer_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_OutputBuffer_Enable  = ((uint8_t)0x00), \/*!< DAC output buffer Enabled  *\/$/;"	e	enum:__anon51
DAC_OutputBuffer_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_OutputBuffer_TypeDef;$/;"	t	typeref:enum:__anon51
DAC_TriangleAmplitude_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_1                =  ((uint8_t)0x00), \/*!<  Triangle Amplitude = Vref.(1\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_1023	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_1023             =  ((uint8_t)0x09), \/*!<  Triangle Amplitude = Vref.(1023\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_127	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_127              =  ((uint8_t)0x06), \/*!<  Triangle Amplitude = Vref.(127\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_15               =  ((uint8_t)0x03), \/*!<  Triangle Amplitude = Vref.(15\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_2047	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_2047             =  ((uint8_t)0x0A), \/*!<  Triangle Amplitude = Vref.(2047\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_255	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_255              =  ((uint8_t)0x07), \/*!<  Triangle Amplitude = Vref.(255\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_3                =  ((uint8_t)0x01), \/*!<  Triangle Amplitude = Vref.(3\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_31	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_31               =  ((uint8_t)0x04), \/*!<  Triangle Amplitude = Vref.(31\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_4095	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_4095             =  ((uint8_t)0x0B) \/*!<  Triangle Amplitude = Vref.(4095\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_511	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_511              =  ((uint8_t)0x08), \/*!<  Triangle Amplitude = Vref.(511\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_63	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_63               =  ((uint8_t)0x05), \/*!<  Triangle Amplitude = Vref.(63\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_TriangleAmplitude_7                =  ((uint8_t)0x02), \/*!<  Triangle Amplitude = Vref.(7\/4096)*\/$/;"	e	enum:__anon55
DAC_TriangleAmplitude_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_TriangleAmplitude_TypeDef;$/;"	t	typeref:enum:__anon55
DAC_Trigger_Ext	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Trigger_Ext      = ((uint8_t)0x10), \/*!< DAC trigger External Trigger (PE4) *\/$/;"	e	enum:__anon47
DAC_Trigger_None	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Trigger_None     = ((uint8_t)0x30), \/*!< DAC trigger None  *\/$/;"	e	enum:__anon47
DAC_Trigger_Software	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Trigger_Software = ((uint8_t)0x38)  \/*!< DAC trigger software  *\/$/;"	e	enum:__anon47
DAC_Trigger_T4_TRGO	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Trigger_T4_TRGO  = ((uint8_t)0x00), \/*!< DAC trigger TIM4 TRGO  *\/$/;"	e	enum:__anon47
DAC_Trigger_T5_TRGO	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Trigger_T5_TRGO  = ((uint8_t)0x08), \/*!< DAC trigger TIM5 TRGO  *\/$/;"	e	enum:__anon47
DAC_Trigger_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_Trigger_TypeDef;$/;"	t	typeref:enum:__anon47
DAC_Wave_Noise	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Wave_Noise    = ((uint8_t)0x40), \/*!< Noise Wave Generation  *\/$/;"	e	enum:__anon50
DAC_Wave_Triangle	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^  DAC_Wave_Triangle = ((uint8_t)0x80)  \/*!< Triangle Wave Generation *\/$/;"	e	enum:__anon50
DAC_Wave_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	/^}DAC_Wave_TypeDef;$/;"	t	typeref:enum:__anon50
DCH1RDHRH_Offset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	219;"	d
IS_DAC_ALIGN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	163;"	d
IS_DAC_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	169;"	d
IS_DAC_DATA_08R	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	196;"	d
IS_DAC_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	191;"	d
IS_DAC_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	181;"	d
IS_DAC_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	186;"	d
IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	208;"	d
IS_DAC_OUTPUT_BUFFER_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	176;"	d
IS_DAC_TRIGGER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	154;"	d
IS_DAC_WAVE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	203;"	d
__STM8L15x_DAC_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dac.h	24;"	d
DMA1_FLAG_BUSY0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_BUSY0 = ((uint16_t)0x0180), \/*!< No DMA transfer on going in Channel 0 *\/$/;"	e	enum:__anon61
DMA1_FLAG_BUSY1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_BUSY1 = ((uint16_t)0x0280), \/*!< No DMA transfer on going in Channel 1 *\/$/;"	e	enum:__anon61
DMA1_FLAG_BUSY2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_BUSY2 = ((uint16_t)0x0480), \/*!< No DMA transfer on going in Channel 2 *\/$/;"	e	enum:__anon61
DMA1_FLAG_BUSY3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_BUSY3 = ((uint16_t)0x0880)  \/*!< No DMA transfer on going in Channel 3 *\/$/;"	e	enum:__anon61
DMA1_FLAG_GB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_GB    = ((uint16_t)0x0002), \/*!< Global Busy Flag *\/$/;"	e	enum:__anon61
DMA1_FLAG_HT0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_HT0   = ((uint16_t)0x0104), \/*!< Half Transaction Interrupt Flag Channel 0 *\/$/;"	e	enum:__anon61
DMA1_FLAG_HT1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_HT1   = ((uint16_t)0x0204), \/*!< Half Transaction Interrupt Flag Channel 1 *\/$/;"	e	enum:__anon61
DMA1_FLAG_HT2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_HT2   = ((uint16_t)0x0404), \/*!< Half Transaction Interrupt Flag Channel 2 *\/$/;"	e	enum:__anon61
DMA1_FLAG_HT3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_HT3   = ((uint16_t)0x0804), \/*!< Half Transaction Interrupt Flag Channel 3 *\/$/;"	e	enum:__anon61
DMA1_FLAG_IFC0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_IFC0  = ((uint16_t)0x1001), \/*!< Global Interrupt Flag Channel 0 *\/$/;"	e	enum:__anon61
DMA1_FLAG_IFC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_IFC1  = ((uint16_t)0x1002), \/*!< Global Interrupt Flag Channel 1 *\/$/;"	e	enum:__anon61
DMA1_FLAG_IFC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_IFC2  = ((uint16_t)0x1004), \/*!< Global Interrupt Flag Channel 2 *\/$/;"	e	enum:__anon61
DMA1_FLAG_IFC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_IFC3  = ((uint16_t)0x1008), \/*!< Global Interrupt Flag Channel 3 *\/$/;"	e	enum:__anon61
DMA1_FLAG_PEND0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_PEND0 = ((uint16_t)0x0140), \/*!< DMA Request pending on Channel 0 *\/$/;"	e	enum:__anon61
DMA1_FLAG_PEND1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_PEND1 = ((uint16_t)0x0240), \/*!< DMA Request pending on Channel 1 *\/$/;"	e	enum:__anon61
DMA1_FLAG_PEND2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_PEND2 = ((uint16_t)0x0440), \/*!< DMA Request pending on Channel 2 *\/$/;"	e	enum:__anon61
DMA1_FLAG_PEND3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_PEND3 = ((uint16_t)0x0840), \/*!< DMA Request pending on Channel 3 *\/$/;"	e	enum:__anon61
DMA1_FLAG_TC0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_TC0   = ((uint16_t)0x0102), \/*!< Transaction Complete Interrupt Flag Channel 0 *\/$/;"	e	enum:__anon61
DMA1_FLAG_TC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_TC1   = ((uint16_t)0x0202), \/*!< Transaction Complete Interrupt Flag Channel 1 *\/$/;"	e	enum:__anon61
DMA1_FLAG_TC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_TC2   = ((uint16_t)0x0402), \/*!< Transaction Complete Interrupt Flag Channel 2 *\/$/;"	e	enum:__anon61
DMA1_FLAG_TC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_FLAG_TC3   = ((uint16_t)0x0802), \/*!< Transaction Complete Interrupt Flag  Channel 3 *\/$/;"	e	enum:__anon61
DMA1_IT_HT0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_HT0 = ((uint8_t)0x14), \/*!< Half Transaction Interrupt Channel 0 *\/$/;"	e	enum:__anon63
DMA1_IT_HT1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_HT1 = ((uint8_t)0x24), \/*!< Half Transaction Interrupt Channel 1 *\/$/;"	e	enum:__anon63
DMA1_IT_HT2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_HT2 = ((uint8_t)0x44), \/*!< Half Transaction Interrupt Channel 2 *\/$/;"	e	enum:__anon63
DMA1_IT_HT3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_HT3 = ((uint8_t)0x84)  \/*!< Half Transaction Interrupt Channel 3 *\/$/;"	e	enum:__anon63
DMA1_IT_TC0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_TC0 = ((uint8_t)0x12), \/*!< Transaction Complete Interrupt Channel 0 *\/$/;"	e	enum:__anon63
DMA1_IT_TC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_TC1 = ((uint8_t)0x22), \/*!< Transaction Complete Interrupt Channel 1 *\/$/;"	e	enum:__anon63
DMA1_IT_TC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_TC2 = ((uint8_t)0x42), \/*!< Transaction Complete Interrupt Channel 2 *\/$/;"	e	enum:__anon63
DMA1_IT_TC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA1_IT_TC3 = ((uint8_t)0x82), \/*!< Transaction Complete Interrupt Channel 3 *\/$/;"	e	enum:__anon63
DMA_DIR_Memory0ToMemory1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_DIR_Memory0ToMemory1    = ((uint8_t)0x40) \/*!< Data transfer direction is Memory0 To Memory 1 *\/$/;"	e	enum:__anon56
DMA_DIR_MemoryToPeripheral	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_DIR_MemoryToPeripheral  = ((uint8_t)0x08), \/*!< Data transfer direction is Memory To Peripheral *\/$/;"	e	enum:__anon56
DMA_DIR_PeripheralToMemory	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_DIR_PeripheralToMemory  = ((uint8_t)0x00), \/*!< Data transfer direction is Peripheral To Memory   *\/$/;"	e	enum:__anon56
DMA_DIR_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_DIR_TypeDef;$/;"	t	typeref:enum:__anon56
DMA_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_FLAG_TypeDef;$/;"	t	typeref:enum:__anon61
DMA_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_IT_TypeDef;$/;"	t	typeref:enum:__anon63
DMA_ITx_HT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_ITx_HT = ((uint8_t)0x04) \/*!< Half Transaction Interrupt*\/$/;"	e	enum:__anon62
DMA_ITx_TC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_ITx_TC = ((uint8_t)0x02),\/*!<Transaction Complete Interrupt  *\/$/;"	e	enum:__anon62
DMA_ITx_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_ITx_TypeDef;$/;"	t	typeref:enum:__anon62
DMA_MemoryDataSize_Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_MemoryDataSize_Byte     = ((uint8_t)0x00),\/*!< Memory Data Size is 1 Byte *\/$/;"	e	enum:__anon60
DMA_MemoryDataSize_HalfWord	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_MemoryDataSize_HalfWord = ((uint8_t)0x08) \/*!< Memory Data Size is 2 Bytes *\/$/;"	e	enum:__anon60
DMA_MemoryDataSize_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_MemoryDataSize_TypeDef;$/;"	t	typeref:enum:__anon60
DMA_MemoryIncMode_Dec	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_MemoryIncMode_Dec = ((uint8_t)0x00), \/*!< DMA memory incremented mode is decremantal *\/$/;"	e	enum:__anon58
DMA_MemoryIncMode_Inc	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_MemoryIncMode_Inc = ((uint8_t)0x20)  \/*!< DMA memory incremented mode is incremantal *\/$/;"	e	enum:__anon58
DMA_MemoryIncMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_MemoryIncMode_TypeDef;$/;"	t	typeref:enum:__anon58
DMA_Mode_Circular	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_Mode_Circular = ((uint8_t)0x10) \/*!< DMA circular buffer mode *\/$/;"	e	enum:__anon57
DMA_Mode_Normal	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_Mode_Normal = ((uint8_t)0x00),\/*!< DMA normal buffer mode*\/$/;"	e	enum:__anon57
DMA_Mode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_Mode_TypeDef;$/;"	t	typeref:enum:__anon57
DMA_Priority_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_Priority_High     = ((uint8_t)0x20), \/*!< Software Priority is High *\/$/;"	e	enum:__anon59
DMA_Priority_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_Priority_Low      = ((uint8_t)0x00), \/*!< Software Priority is Low *\/$/;"	e	enum:__anon59
DMA_Priority_Medium	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_Priority_Medium   = ((uint8_t)0x10), \/*!< Software Priority is Medium *\/$/;"	e	enum:__anon59
DMA_Priority_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^}DMA_Priority_TypeDef;$/;"	t	typeref:enum:__anon59
DMA_Priority_VeryHigh	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	/^  DMA_Priority_VeryHigh = ((uint8_t)0x30)  \/*!< Software Priority is VeryHigh *\/$/;"	e	enum:__anon59
IS_DMA_BUFFER_SIZE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	261;"	d
IS_DMA_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	163;"	d
IS_DMA_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	224;"	d
IS_DMA_CLEAR_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	245;"	d
IS_DMA_CONFIG_ITX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	240;"	d
IS_DMA_DATA_SIZE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	195;"	d
IS_DMA_DIR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	177;"	d
IS_DMA_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	200;"	d
IS_DMA_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	273;"	d
IS_DMA_MEMORY_INC_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	182;"	d
IS_DMA_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	171;"	d
IS_DMA_PRIORITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	187;"	d
IS_DMA_TIMEOUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	267;"	d
__STM8L15x_DMA_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_dma.h	23;"	d
EXTI_HalfPort_B_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_B_LSB  = (uint8_t)0x01, \/*!< Interrupt selector PB(3:0) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_B_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_B_MSB  = (uint8_t)0x02, \/*!< Interrupt selector PB(7:4) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_D_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_D_LSB  = (uint8_t)0x04, \/*!< Interrupt selector PD(3:0) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_D_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_D_MSB  = (uint8_t)0x08, \/*!< Interrupt selector PD(7:4) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_E_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_E_LSB  = (uint8_t)0x10, \/*!< Interrupt selector PE(3:0) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_E_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_E_MSB  = (uint8_t)0x20, \/*!< Interrupt selector PE(7:4) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_F_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_F_LSB  = (uint8_t)0x40, \/*!< Interrupt selector PF(3:0) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_F_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_F_MSB  = (uint8_t)0x81, \/*!< Interrupt selector PF(7:4) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_G_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_G_LSB  = (uint8_t)0x82, \/*!< Interrupt selector PG(3:0) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_G_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_G_MSB  = (uint8_t)0x84, \/*!< Interrupt selector PG(7:4) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_H_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_H_LSB  = (uint8_t)0x88, \/*!< Interrupt selector PH(3:0) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_H_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_HalfPort_H_MSB  = (uint8_t)0x90  \/*!< Interrupt selector PH(7:4) *\/$/;"	e	enum:__anon65
EXTI_HalfPort_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^} EXTI_HalfPort_TypeDef;$/;"	t	typeref:enum:__anon65
EXTI_IT_Pin0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin0    = (uint16_t)0x0001, \/*!< GPIO Pin pos 0 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin1    = (uint16_t)0x0002, \/*!< GPIO Pin pos 1 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin2    = (uint16_t)0x0004, \/*!< GPIO Pin pos 2 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin3    = (uint16_t)0x0008, \/*!< GPIO Pin pos 3 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin4    = (uint16_t)0x0010, \/*!< GPIO Pin pos 4 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin5    = (uint16_t)0x0020, \/*!< GPIO Pin pos 5 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin6    = (uint16_t)0x0040, \/*!< GPIO Pin pos 6 *\/$/;"	e	enum:__anon68
EXTI_IT_Pin7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_Pin7    = (uint16_t)0x0080, \/*!< GPIO Pin pos 7 *\/$/;"	e	enum:__anon68
EXTI_IT_PortB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_PortB   = (uint16_t)0x0101, \/*!< GPIO Port B    *\/$/;"	e	enum:__anon68
EXTI_IT_PortD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_PortD   = (uint16_t)0x0102, \/*!< GPIO Port D    *\/$/;"	e	enum:__anon68
EXTI_IT_PortE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_PortE   = (uint16_t)0x0104, \/*!< GPIO Port E    *\/$/;"	e	enum:__anon68
EXTI_IT_PortF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_PortF   = (uint16_t)0x0108, \/*!< GPIO Port F    *\/$/;"	e	enum:__anon68
EXTI_IT_PortG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_PortG   = (uint16_t)0x0110, \/*!< GPIO Port G    *\/$/;"	e	enum:__anon68
EXTI_IT_PortH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_IT_PortH   = (uint16_t)0x0120  \/*!< GPIO Port H    *\/$/;"	e	enum:__anon68
EXTI_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^} EXTI_IT_TypeDef;$/;"	t	typeref:enum:__anon68
EXTI_Pin_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_0 = (uint8_t)0x00, \/*!< GPIO Pin 0 *\/$/;"	e	enum:__anon67
EXTI_Pin_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_1 = (uint8_t)0x02, \/*!< GPIO Pin 1 *\/$/;"	e	enum:__anon67
EXTI_Pin_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_2 = (uint8_t)0x04, \/*!< GPIO Pin 2 *\/$/;"	e	enum:__anon67
EXTI_Pin_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_3 = (uint8_t)0x06, \/*!< GPIO Pin 3 *\/$/;"	e	enum:__anon67
EXTI_Pin_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_4 = (uint8_t)0x10, \/*!< GPIO Pin 4 *\/$/;"	e	enum:__anon67
EXTI_Pin_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_5 = (uint8_t)0x12, \/*!< GPIO Pin 5 *\/$/;"	e	enum:__anon67
EXTI_Pin_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_6 = (uint8_t)0x14, \/*!< GPIO Pin 6 *\/$/;"	e	enum:__anon67
EXTI_Pin_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Pin_7 = (uint8_t)0x16  \/*!< GPIO Pin 7 *\/$/;"	e	enum:__anon67
EXTI_Pin_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^} EXTI_Pin_TypeDef;$/;"	t	typeref:enum:__anon67
EXTI_Port_B	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Port_B = (uint8_t)0x00, \/*!< GPIO Port B *\/$/;"	e	enum:__anon66
EXTI_Port_D	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Port_D = (uint8_t)0x02, \/*!< GPIO Port D *\/$/;"	e	enum:__anon66
EXTI_Port_E	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Port_E = (uint8_t)0x04, \/*!< GPIO Port E *\/$/;"	e	enum:__anon66
EXTI_Port_F	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Port_F = (uint8_t)0x06, \/*!< GPIO Port F *\/$/;"	e	enum:__anon66
EXTI_Port_G	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Port_G = (uint8_t)0x10, \/*!< GPIO Port G *\/$/;"	e	enum:__anon66
EXTI_Port_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Port_H = (uint8_t)0x12  \/*!< GPIO Port H *\/$/;"	e	enum:__anon66
EXTI_Port_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^} EXTI_Port_TypeDef;$/;"	t	typeref:enum:__anon66
EXTI_Trigger_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Trigger_Falling        = (uint8_t)0x02, \/*!< Interrupt on Falling edge only *\/$/;"	e	enum:__anon64
EXTI_Trigger_Falling_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Trigger_Falling_Low    = (uint8_t)0x00, \/*!< Interrupt on Falling edge and Low level *\/$/;"	e	enum:__anon64
EXTI_Trigger_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Trigger_Rising         = (uint8_t)0x01, \/*!< Interrupt on Rising edge only *\/$/;"	e	enum:__anon64
EXTI_Trigger_Rising_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^  EXTI_Trigger_Rising_Falling = (uint8_t)0x03  \/*!< Interrupt on Rising and Falling edges *\/$/;"	e	enum:__anon64
EXTI_Trigger_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	/^} EXTI_Trigger_TypeDef;$/;"	t	typeref:enum:__anon64
IS_EXTI_HALFPORT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	168;"	d
IS_EXTI_ITPENDINGBIT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	208;"	d
IS_EXTI_PINNUM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	195;"	d
IS_EXTI_PORT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	185;"	d
IS_EXTI_TRIGGER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	158;"	d
__STM8L15x_EXTI_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_exti.h	24;"	d
FLASH_BLOCK_SIZE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	54;"	d
FLASH_DATA_EEPROM_BLOCKS_NUMBER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	45;"	d
FLASH_DATA_EEPROM_BLOCKS_NUMBER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	50;"	d
FLASH_DATA_EEPROM_END_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	43;"	d
FLASH_DATA_EEPROM_END_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	48;"	d
FLASH_DATA_EEPROM_START_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	40;"	d
FLASH_FLAG_DUL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_FLAG_DUL       = (uint8_t)0x08,     \/*!< Data EEPROM unlocked flag *\/$/;"	e	enum:__anon75
FLASH_FLAG_EOP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_FLAG_EOP       = (uint8_t)0x04,     \/*!< End of programming (write or erase operation) flag *\/$/;"	e	enum:__anon75
FLASH_FLAG_HVOFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_FLAG_HVOFF     = (uint8_t)0x40,     \/*!< End of high voltage flag *\/$/;"	e	enum:__anon75
FLASH_FLAG_PUL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_FLAG_PUL       = (uint8_t)0x02,     \/*!< Flash Program memory unlocked flag *\/$/;"	e	enum:__anon75
FLASH_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^} FLASH_FLAG_TypeDef;$/;"	t	typeref:enum:__anon75
FLASH_FLAG_WR_PG_DIS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_FLAG_WR_PG_DIS = (uint8_t)0x01      \/*!< Write attempted to protected page flag *\/$/;"	e	enum:__anon75
FLASH_MemType_Data	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^    FLASH_MemType_Data         = (uint8_t)0xF7  \/*!< Data EEPROM memory *\/$/;"	e	enum:__anon69
FLASH_MemType_Program	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^    FLASH_MemType_Program      = (uint8_t)0xFD, \/*!< Program memory *\/$/;"	e	enum:__anon69
FLASH_MemType_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  } FLASH_MemType_TypeDef;$/;"	t	typeref:enum:__anon69
FLASH_OPTION_BYTES_END_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	53;"	d
FLASH_OPTION_BYTES_START_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	52;"	d
FLASH_PROGRAM_BLOCKS_NUMBER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	44;"	d
FLASH_PROGRAM_BLOCKS_NUMBER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	49;"	d
FLASH_PROGRAM_END_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	42;"	d
FLASH_PROGRAM_END_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	47;"	d
FLASH_PROGRAM_START_PHYSICAL_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	39;"	d
FLASH_PowerStatus_IDDQDuringRunMode	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_PowerStatus_IDDQDuringRunMode           = (uint8_t)0x08, \/*!< Flash program and data EEPROM$/;"	e	enum:__anon74
FLASH_PowerStatus_IDDQDuringWaitAndRunModes	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_PowerStatus_IDDQDuringWaitAndRunModes   = (uint8_t)0x0C,  \/*!<Flash program and data EEPROM$/;"	e	enum:__anon74
FLASH_PowerStatus_IDDQDuringWaitMode	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_PowerStatus_IDDQDuringWaitMode          = (uint8_t)0x04, \/*!< Flash program and data EEPROM$/;"	e	enum:__anon74
FLASH_PowerStatus_On	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_PowerStatus_On                          = (uint8_t)0x00  \/*!< Flash program and data EEPROM$/;"	e	enum:__anon74
FLASH_PowerStatus_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^} FLASH_PowerStatus_TypeDef;$/;"	t	typeref:enum:__anon74
FLASH_Power_IDDQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_Power_IDDQ = (uint8_t)0x00,  \/*!< Flash program and data EEPROM in IDDQ *\/$/;"	e	enum:__anon72
FLASH_Power_On	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_Power_On    = (uint8_t)0x01  \/*!< Flash program and data EEPROM not in IDDQ *\/$/;"	e	enum:__anon72
FLASH_Power_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^} FLASH_Power_TypeDef;$/;"	t	typeref:enum:__anon72
FLASH_ProgramMode_Fast	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_ProgramMode_Fast     = (uint8_t)0x10  \/*!< Fast programming mode *\/$/;"	e	enum:__anon70
FLASH_ProgramMode_Standard	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_ProgramMode_Standard = (uint8_t)0x00, \/*!< Standard programming mode *\/$/;"	e	enum:__anon70
FLASH_ProgramMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^} FLASH_ProgramMode_TypeDef;$/;"	t	typeref:enum:__anon70
FLASH_ProgramTime_Standard	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_ProgramTime_Standard = (uint8_t)0x00, \/*!< Standard programming time fixed at 1\/2 tprog *\/$/;"	e	enum:__anon71
FLASH_ProgramTime_TProg	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_ProgramTime_TProg    = (uint8_t)0x01  \/*!< Programming time fixed at tprog *\/$/;"	e	enum:__anon71
FLASH_ProgramTime_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^} FLASH_ProgramTime_TypeDef;$/;"	t	typeref:enum:__anon71
FLASH_RASS_KEY1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	56;"	d
FLASH_RASS_KEY2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	57;"	d
FLASH_READOUTPROTECTION_KEY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	58;"	d
FLASH_Status_Successful_Operation	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_Status_Successful_Operation   = (uint8_t)0x04  \/*!< End of operation flag *\/$/;"	e	enum:__anon73
FLASH_Status_TimeOut	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_Status_TimeOut                = (uint8_t)0x02, \/*!< Time out error *\/$/;"	e	enum:__anon73
FLASH_Status_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^} FLASH_Status_TypeDef;$/;"	t	typeref:enum:__anon73
FLASH_Status_Write_Protection_Error	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	/^  FLASH_Status_Write_Protection_Error = (uint8_t)0x01, \/*!< Write attempted to protected Block *\/$/;"	e	enum:__anon73
IS_FLASH_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	176;"	d
IS_FLASH_DATA_EEPROM_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	169;"	d
IS_FLASH_DATA_EEPROM_BLOCK_NUMBER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	196;"	d
IS_FLASH_FLAGS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	235;"	d
IS_FLASH_MEMORY_TYPE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	202;"	d
IS_FLASH_POWER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	221;"	d
IS_FLASH_POWERSTATUS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	227;"	d
IS_FLASH_PROGRAM_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	160;"	d
IS_FLASH_PROGRAM_BLOCK_NUMBER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	190;"	d
IS_FLASH_PROGRAM_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	209;"	d
IS_FLASH_PROGRAM_TIME	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	215;"	d
IS_OPTION_BYTE_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	183;"	d
__STM8L15x_FLASH_H__	STM8L15x_StdPeriph_Driver\inc\stm8l15x_flash.h	24;"	d
GPIO_Mode_In_FL_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_In_FL_IT         = (uint8_t)0x20,   \/*!< Input floating, external interrupt *\/$/;"	e	enum:__anon76
GPIO_Mode_In_FL_No_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_In_FL_No_IT      = (uint8_t)0x00,   \/*!< Input floating, no external interrupt *\/$/;"	e	enum:__anon76
GPIO_Mode_In_PU_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_In_PU_IT         = (uint8_t)0x60,   \/*!< Input pull-up, external interrupt *\/$/;"	e	enum:__anon76
GPIO_Mode_In_PU_No_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_In_PU_No_IT      = (uint8_t)0x40,   \/*!< Input pull-up, no external interrupt *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_OD_HiZ_Fast	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_OD_HiZ_Fast  = (uint8_t)0xB0,   \/*!< Output open-drain, high-impedance level, 10MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_OD_HiZ_Slow	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_OD_HiZ_Slow  = (uint8_t)0x90,   \/*!< Output open-drain, high-impedance level, 2MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_OD_Low_Fast	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_OD_Low_Fast  = (uint8_t)0xA0,   \/*!< Output open-drain, low level, 10MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_OD_Low_Slow	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_OD_Low_Slow  = (uint8_t)0x80,   \/*!< Output open-drain, low level, 2MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_PP_High_Fast	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_PP_High_Fast = (uint8_t)0xF0,   \/*!< Output push-pull, high level, 10MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_PP_High_Slow	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_PP_High_Slow = (uint8_t)0xD0    \/*!< Output push-pull, high level, 2MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_PP_Low_Fast	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_PP_Low_Fast  = (uint8_t)0xE0,   \/*!< Output push-pull, low level, 10MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_Out_PP_Low_Slow	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Mode_Out_PP_Low_Slow  = (uint8_t)0xC0,   \/*!< Output push-pull, low level, 2MHz *\/$/;"	e	enum:__anon76
GPIO_Mode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^}GPIO_Mode_TypeDef;$/;"	t	typeref:enum:__anon76
GPIO_Pin_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_0    = ((uint8_t)0x01),   \/*!< Pin 0 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_1    = ((uint8_t)0x02),   \/*!< Pin 1 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_2    = ((uint8_t)0x04),   \/*!< Pin 2 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_3    = ((uint8_t)0x08),   \/*!< Pin 3 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_4    = ((uint8_t)0x10),   \/*!< Pin 4 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_5    = ((uint8_t)0x20),   \/*!< Pin 5 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_6    = ((uint8_t)0x40),   \/*!< Pin 6 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_7    = ((uint8_t)0x80),   \/*!< Pin 7 selected *\/$/;"	e	enum:__anon77
GPIO_Pin_All	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_All  = ((uint8_t)0xFF)    \/*!< All pins selected *\/$/;"	e	enum:__anon77
GPIO_Pin_HNib	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_HNib = ((uint8_t)0xF0),   \/*!< High nibble pins selected *\/$/;"	e	enum:__anon77
GPIO_Pin_LNib	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^  GPIO_Pin_LNib = ((uint8_t)0x0F),   \/*!< Low nibble pins selected *\/$/;"	e	enum:__anon77
GPIO_Pin_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	/^}GPIO_Pin_TypeDef;$/;"	t	typeref:enum:__anon77
IS_GPIO_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	108;"	d
IS_GPIO_PIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	126;"	d
__STM8L15x_GPIO_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_gpio.h	24;"	d
I2C_AckPosition_Current	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_AckPosition_Current = (uint8_t)0x00,   \/*!< Acknowledge on the current byte *\/$/;"	e	enum:__anon81
I2C_AckPosition_Next	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_AckPosition_Next    = (uint8_t)0x08    \/*!< Acknowledge on the next byte *\/$/;"	e	enum:__anon81
I2C_AckPosition_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_AckPosition_TypeDef;$/;"	t	typeref:enum:__anon81
I2C_Ack_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Ack_Disable = (uint8_t)0x00,  \/*!< No acknowledge *\/$/;"	e	enum:__anon80
I2C_Ack_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Ack_Enable  = (uint8_t)0x04   \/*!< Acknowledge Enabled *\/$/;"	e	enum:__anon80
I2C_Ack_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_Ack_TypeDef;$/;"	t	typeref:enum:__anon80
I2C_AcknowledgedAddress_10bit	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_AcknowledgedAddress_10bit = (uint8_t)0x80   \/*!< 10-bit slave address (7-bit address not acknowledged) *\/$/;"	e	enum:__anon82
I2C_AcknowledgedAddress_7bit	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_AcknowledgedAddress_7bit  = (uint8_t)0x00,  \/*!< 7-bit slave address (10-bit address not acknowledged) *\/$/;"	e	enum:__anon82
I2C_AcknowledgedAddress_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_AcknowledgedAddress_TypeDef;$/;"	t	typeref:enum:__anon82
I2C_Direction_Receiver	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Direction_Receiver    = (uint8_t)0x01   \/*!< Reception direction *\/$/;"	e	enum:__anon83
I2C_Direction_Transmitter	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Direction_Transmitter = (uint8_t)0x00,  \/*!< Transmission direction *\/$/;"	e	enum:__anon83
I2C_Direction_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_Direction_TypeDef;$/;"	t	typeref:enum:__anon83
I2C_DutyCycle_16_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_DutyCycle_16_9 = (uint8_t)0x40   \/*!< Fast mode Tlow\/Thigh = 16\/9 *\/$/;"	e	enum:__anon79
I2C_DutyCycle_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_DutyCycle_2    = (uint8_t)0x00,  \/*!< Fast mode Tlow\/THigh = 2 *\/$/;"	e	enum:__anon79
I2C_DutyCycle_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_DutyCycle_TypeDef;$/;"	t	typeref:enum:__anon79
I2C_EVENT_MASTER_BYTE_RECEIVED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_BYTE_RECEIVED             = (uint16_t)0x0340,  \/*!< BUSY, MSL and RXNE flags *\/$/;"	e	enum:__anon88
I2C_EVENT_MASTER_BYTE_TRANSMITTED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_BYTE_TRANSMITTED          = (uint16_t)0x0784,  \/*!< EV8_2: TRA, BUSY, MSL, TXE and BTF flags *\/$/;"	e	enum:__anon88
I2C_EVENT_MASTER_BYTE_TRANSMITTING	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_BYTE_TRANSMITTING         = (uint16_t)0x0780,  \/*!< TRA, BUSY, MSL, TXE flags *\/$/;"	e	enum:__anon88
I2C_EVENT_MASTER_MODE_ADDRESS10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_MODE_ADDRESS10            = (uint16_t)0x0308,  \/*!< BUSY, MSL and ADD10 flags *\/$/;"	e	enum:__anon88
I2C_EVENT_MASTER_MODE_SELECT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_MODE_SELECT               = (uint16_t)0x0301,  \/*!< BUSY, MSL and SB flag *\/$/;"	e	enum:__anon88
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED    = (uint16_t)0x0302,  \/*!< BUSY, MSL and ADDR flags *\/$/;"	e	enum:__anon88
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED = (uint16_t)0x0782,  \/*!< BUSY, MSL, ADDR, TXE and TRA flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_ACK_FAILURE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_ACK_FAILURE                = (uint16_t)0x0004  \/*!< AF flag *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_BYTE_RECEIVED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_BYTE_RECEIVED              = (uint16_t)0x0240,  \/*!< BUSY and RXNE flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_BYTE_TRANSMITTED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_BYTE_TRANSMITTED           = (uint16_t)0x0684,  \/*!< TRA, BUSY, TXE and BTF flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_BYTE_TRANSMITTING	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_BYTE_TRANSMITTING          = (uint16_t)0x0680,  \/*!< TRA, BUSY and TXE flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED  = (uint16_t)0x1200,  \/*!< EV2: GENCALL and BUSY flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED    = (uint16_t)0x0202,  \/*!< BUSY and ADDR flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED    = (uint16_t)0x8200,  \/*! DUALF and BUSY flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_STOP_DETECTED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_STOP_DETECTED              = (uint16_t)0x0010,  \/*!< STOPF flag *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED = (uint16_t)0x0682,  \/*!< TRA, BUSY, TXE and ADDR flags *\/$/;"	e	enum:__anon88
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED = (uint16_t)0x8680,  \/*! DUALF, TRA, BUSY and TXE flags *\/$/;"	e	enum:__anon88
I2C_Event_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_Event_TypeDef;$/;"	t	typeref:enum:__anon88
I2C_FLAG_ADD10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_ADD10      = (uint16_t)0x0108,  \/*!< 10-bit Header sent flag *\/$/;"	e	enum:__anon86
I2C_FLAG_ADDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_ADDR       = (uint16_t)0x0102,  \/*!< Address Sent\/Matched (master\/slave) flag *\/$/;"	e	enum:__anon86
I2C_FLAG_AF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_AF         = (uint16_t)0x0204,  \/*!< Acknowledge Failure flag *\/$/;"	e	enum:__anon86
I2C_FLAG_ARLO	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_ARLO       = (uint16_t)0x0202,  \/*!< Arbitration Loss flag *\/$/;"	e	enum:__anon86
I2C_FLAG_BERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_BERR       = (uint16_t)0x0201,  \/*!< Misplaced Start or Stop condition *\/$/;"	e	enum:__anon86
I2C_FLAG_BTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_BTF        = (uint16_t)0x0104,  \/*!< Data Byte Transfer Finished flag *\/$/;"	e	enum:__anon86
I2C_FLAG_BUSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_BUSY       = (uint16_t)0x0302,  \/*!< Bus Busy flag *\/$/;"	e	enum:__anon86
I2C_FLAG_DUALF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_DUALF    = (uint16_t)0x0380,  \/*!< DUAL Flag *\/$/;"	e	enum:__anon86
I2C_FLAG_GENCALL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_GENCALL    = (uint16_t)0x0310,  \/*!< General Call header received Flag *\/$/;"	e	enum:__anon86
I2C_FLAG_MSL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_MSL        = (uint16_t)0x0301   \/*!< Master Slave flag *\/$/;"	e	enum:__anon86
I2C_FLAG_OVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_OVR        = (uint16_t)0x0208,  \/*!< Overrun\/Underrun flag *\/$/;"	e	enum:__anon86
I2C_FLAG_PECERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_PECERR     = (uint16_t)0x0210,  \/*!< PEC error flag *\/$/;"	e	enum:__anon86
I2C_FLAG_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_RXNE       = (uint16_t)0x0140,  \/*!< Read Data Register Not Empty flag *\/$/;"	e	enum:__anon86
I2C_FLAG_SB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_SB         = (uint16_t)0x0101,  \/*!< Start bit sent flag *\/$/;"	e	enum:__anon86
I2C_FLAG_SMBALERT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_SMBALERT   = (uint16_t)0x0280,  \/*!< SMBUS Alert flag *\/$/;"	e	enum:__anon86
I2C_FLAG_SMBDEFAULT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_SMBDEFAULT = (uint16_t)0x0320,  \/*!< SMBUS default flag *\/$/;"	e	enum:__anon86
I2C_FLAG_SMBHOST	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_SMBHOST    = (uint16_t)0x0340,  \/*!< SMBUS host Flag *\/$/;"	e	enum:__anon86
I2C_FLAG_STOPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_STOPF      = (uint16_t)0x0110,  \/*!< Stop detected flag *\/$/;"	e	enum:__anon86
I2C_FLAG_TIMEOUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_TIMEOUT     = (uint16_t)0x0240,  \/*!< Time out flag *\/$/;"	e	enum:__anon86
I2C_FLAG_TRA	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_TRA        = (uint16_t)0x0304,  \/*!< Transmitter Receiver flag *\/$/;"	e	enum:__anon86
I2C_FLAG_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_TXE        = (uint16_t)0x0180,  \/*!< Transmit Data Register Empty flag *\/$/;"	e	enum:__anon86
I2C_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_FLAG_TypeDef;$/;"	t	typeref:enum:__anon86
I2C_FLAG_WUFH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_FLAG_WUFH       = (uint16_t)0x0220,  \/*!< Wake Up From Halt flag *\/$/;"	e	enum:__anon86
I2C_IT_ADD10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_ADD10           = (uint16_t)0x1208,   \/*!< 10-bit Header sent *\/$/;"	e	enum:__anon87
I2C_IT_ADDR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_ADDR            = (uint16_t)0x1202,   \/*!< Address Sent\/Matched (master\/slave)  *\/$/;"	e	enum:__anon87
I2C_IT_AF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_AF              = (uint16_t)0x2104,   \/*!< Acknowledge Failure  *\/$/;"	e	enum:__anon87
I2C_IT_ARLO	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_ARLO            = (uint16_t)0x2102,   \/*!< Arbitration Loss  *\/$/;"	e	enum:__anon87
I2C_IT_BERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_BERR            = (uint16_t)0x2101    \/*!< Misplaced Start or Stop condition *\/$/;"	e	enum:__anon87
I2C_IT_BTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_BTF             = (uint16_t)0x1204,   \/*!< Data Byte Transfer Finished  *\/$/;"	e	enum:__anon87
I2C_IT_BUF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_BUF             = (uint16_t)0x0004,   \/*!< Buffer Interruption *\/$/;"	e	enum:__anon87
I2C_IT_ERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_ERR             = (uint16_t)0x0001,   \/*!< Error Interruption *\/$/;"	e	enum:__anon87
I2C_IT_EVT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_EVT             = (uint16_t)0x0002,   \/*!< Event Interruption *\/$/;"	e	enum:__anon87
I2C_IT_OVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_OVR             = (uint16_t)0x2108,   \/*!< Overrun\/Underrun  *\/$/;"	e	enum:__anon87
I2C_IT_PECERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_PECERR          = (uint16_t)0x2110,   \/*!< Wake Up From Halt  *\/$/;"	e	enum:__anon87
I2C_IT_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_RXNE            = (uint16_t)0x1640,   \/*!< Read Data Register Not Empty  *\/$/;"	e	enum:__anon87
I2C_IT_SB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_SB              = (uint16_t)0x1201,   \/*!< Start bit sent  *\/$/;"	e	enum:__anon87
I2C_IT_SMBALERT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_SMBALERT        = (uint16_t)0x2180,   \/*!< SMBUS alert  *\/$/;"	e	enum:__anon87
I2C_IT_STOPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_STOPF           = (uint16_t)0x1210,   \/*!< Stop detected  *\/$/;"	e	enum:__anon87
I2C_IT_TIMEOUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_TIMEOUT         = (uint16_t)0x2140,   \/*!< Time out  *\/$/;"	e	enum:__anon87
I2C_IT_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_TXE             = (uint16_t)0x1680,   \/*!< Transmit Data Register Empty  *\/$/;"	e	enum:__anon87
I2C_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_IT_TypeDef;$/;"	t	typeref:enum:__anon87
I2C_IT_WUFH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_IT_WUFH            = (uint16_t)0x2220,   \/*!< PEC error  *\/$/;"	e	enum:__anon87
I2C_MAX_FAST_FREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	459;"	d
I2C_MAX_STANDARD_FREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	458;"	d
I2C_Mode_I2C	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Mode_I2C           = (uint8_t)0x00,   \/*!< I2C mode *\/$/;"	e	enum:__anon78
I2C_Mode_SMBusDevice	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Mode_SMBusDevice   = (uint8_t)0x02,   \/*!< SMBus Device mode *\/$/;"	e	enum:__anon78
I2C_Mode_SMBusHost	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Mode_SMBusHost     = (uint8_t)0x0A     \/*!< SMBus Host mode *\/$/;"	e	enum:__anon78
I2C_Mode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_Mode_TypeDef;$/;"	t	typeref:enum:__anon78
I2C_PECPosition_Current	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_PECPosition_Current = (uint8_t)0x00,  \/*!< Current byte in shift register is PEC *\/$/;"	e	enum:__anon85
I2C_PECPosition_Next	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_PECPosition_Next    = (uint8_t)0x08   \/*!< Next  byte in shift register is PEC *\/$/;"	e	enum:__anon85
I2C_PECPosition_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_PECPosition_TypeDef;$/;"	t	typeref:enum:__anon85
I2C_Register_CCRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_CCRH   = (uint8_t)0x0C,   \/*!< Clock control register high *\/$/;"	e	enum:__anon89
I2C_Register_CCRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_CCRL   = (uint8_t)0x0B,   \/*!< Clock control register low *\/$/;"	e	enum:__anon89
I2C_Register_CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_CR1    = (uint8_t)0x00,   \/*!< Control register 1 *\/$/;"	e	enum:__anon89
I2C_Register_CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_CR2    = (uint8_t)0x01,   \/*!< Control register 2 *\/$/;"	e	enum:__anon89
I2C_Register_DR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_DR     = (uint8_t)0x06,   \/*!< Data register *\/$/;"	e	enum:__anon89
I2C_Register_FREQR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_FREQR  = (uint8_t)0x02,   \/*!< Frequency register *\/$/;"	e	enum:__anon89
I2C_Register_ITR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_ITR    = (uint8_t)0x0A,   \/*!< Interrupt and DMA register *\/$/;"	e	enum:__anon89
I2C_Register_OARH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_OARH   = (uint8_t)0x04,   \/*!< Own address register MSB *\/$/;"	e	enum:__anon89
I2C_Register_OARL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_OARL   = (uint8_t)0x03,   \/*!< Own address register LSB *\/$/;"	e	enum:__anon89
I2C_Register_PECR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_PECR   = (uint8_t)0x0E    \/*!< PEC register *\/$/;"	e	enum:__anon89
I2C_Register_SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_SR1    = (uint8_t)0x07,   \/*!< Status register 1 *\/$/;"	e	enum:__anon89
I2C_Register_SR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_SR2    = (uint8_t)0x08,   \/*!< Status register 2 *\/$/;"	e	enum:__anon89
I2C_Register_SR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_SR3    = (uint8_t)0x09,   \/*!< Status register 3 *\/$/;"	e	enum:__anon89
I2C_Register_TRISER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_Register_TRISER = (uint8_t)0x0D,   \/*!< TRISE register *\/$/;"	e	enum:__anon89
I2C_Register_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_Register_TypeDef;$/;"	t	typeref:enum:__anon89
I2C_SMBusAlert_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_SMBusAlert_High = (uint8_t)0x00,  \/*!< SMBAlert pin high *\/$/;"	e	enum:__anon84
I2C_SMBusAlert_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^  I2C_SMBusAlert_Low  =  (uint8_t)0x01   \/*!< SMBAlert pin Low *\/$/;"	e	enum:__anon84
I2C_SMBusAlert_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	/^} I2C_SMBusAlert_TypeDef;$/;"	t	typeref:enum:__anon84
IS_I2C_ACKNOWLEDGE_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	509;"	d
IS_I2C_ACK_POSITION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	497;"	d
IS_I2C_ACK_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	492;"	d
IS_I2C_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	634;"	d
IS_I2C_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	553;"	d
IS_I2C_CLEAR_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	565;"	d
IS_I2C_CONFIG_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	559;"	d
IS_I2C_DIRECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	521;"	d
IS_I2C_DUTY_CYCLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	486;"	d
IS_I2C_EVENT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	588;"	d
IS_I2C_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	527;"	d
IS_I2C_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	570;"	d
IS_I2C_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	479;"	d
IS_I2C_OUTPUT_CLOCK_FREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	639;"	d
IS_I2C_OWN_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	628;"	d
IS_I2C_PEC_POSITION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	503;"	d
IS_I2C_REGISTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	611;"	d
IS_I2C_SMBUS_ALERT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	515;"	d
__STM8L15x_I2C_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_i2c.h	24;"	d
__STM8L15x_IRTIM_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_irtim.h	24;"	d
__STM8L15x_IT_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_it.h	23;"	d
ADC1_COMP_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  ADC1_COMP_IRQn                           = (uint8_t)18,  \/*!< ADC1\/Comparator interrupt *\/$/;"	e	enum:__anon90
CPU_SOFT_INT_DISABLED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	109;"	d
DMA1_CHANNEL0_1_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  DMA1_CHANNEL0_1_IRQn                     = (uint8_t)2,   \/*!< DMA Channels 0\/1 *\/$/;"	e	enum:__anon90
DMA1_CHANNEL2_3_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  DMA1_CHANNEL2_3_IRQn                     = (uint8_t)3,   \/*!< DMA Channels 2\/3 *\/$/;"	e	enum:__anon90
EXTI0_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI0_IRQn                               = (uint8_t)8,   \/*!< PIN0 interrupt   *\/$/;"	e	enum:__anon90
EXTI1_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI1_IRQn                               = (uint8_t)9,   \/*!< PIN1 interrupt   *\/$/;"	e	enum:__anon90
EXTI2_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI2_IRQn                               = (uint8_t)10,  \/*!< PIN2 interrupt   *\/$/;"	e	enum:__anon90
EXTI3_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI3_IRQn                               = (uint8_t)11,  \/*!< PIN3 interrupt   *\/$/;"	e	enum:__anon90
EXTI4_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI4_IRQn                               = (uint8_t)12,  \/*!< PIN4 interrupt   *\/$/;"	e	enum:__anon90
EXTI5_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI5_IRQn                               = (uint8_t)13,  \/*!< PIN5 interrupt   *\/$/;"	e	enum:__anon90
EXTI6_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI6_IRQn                               = (uint8_t)14,  \/*!< PIN6 interrupt   *\/$/;"	e	enum:__anon90
EXTI7_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTI7_IRQn                               = (uint8_t)15,  \/*!< PIN7 interrupt   *\/$/;"	e	enum:__anon90
EXTIB_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTIB_IRQn                               = (uint8_t)6,   \/*!< GPIOB interrupt  *\/$/;"	e	enum:__anon90
EXTID_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTID_IRQn                               = (uint8_t)7,   \/*!< GPIOD interrupt  *\/$/;"	e	enum:__anon90
EXTIE_F_PVD_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  EXTIE_F_PVD_IRQn                         = (uint8_t)5,   \/*!< GPIOE\/F and PVD interrupt *\/$/;"	e	enum:__anon90
FLASH_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  FLASH_IRQn                               = (uint8_t)1,   \/*!< Flash interrupt  *\/$/;"	e	enum:__anon90
I2C1_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  I2C1_IRQn                                = (uint8_t)29   \/*!< I2C1 interrupt *\/$/;"	e	enum:__anon90
IRQn_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^}IRQn_TypeDef;$/;"	t	typeref:enum:__anon90
IS_ITC_INTERRUPTS_DISABLED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	198;"	d
IS_ITC_IRQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	126;"	d
IS_ITC_IRQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	156;"	d
IS_ITC_PRIORITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	189;"	d
ITC_PriorityLevel_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  ITC_PriorityLevel_0 = (uint8_t)0x02, \/*!< Software priority level 0 (cannot be written) *\/$/;"	e	enum:__anon91
ITC_PriorityLevel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  ITC_PriorityLevel_1 = (uint8_t)0x01, \/*!< Software priority level 1 *\/$/;"	e	enum:__anon91
ITC_PriorityLevel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  ITC_PriorityLevel_2 = (uint8_t)0x00, \/*!< Software priority level 2 *\/$/;"	e	enum:__anon91
ITC_PriorityLevel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  ITC_PriorityLevel_3 = (uint8_t)0x03  \/*!< Software priority level 3 *\/$/;"	e	enum:__anon91
ITC_PriorityLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^} ITC_PriorityLevel_TypeDef;$/;"	t	typeref:enum:__anon91
LCD_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  LCD_IRQn                                 = (uint8_t)16,  \/*!< LCD Driver interrupt    *\/$/;"	e	enum:__anon90
RTC_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  RTC_IRQn                                 = (uint8_t)4,   \/*!< RTC interrupt    *\/$/;"	e	enum:__anon90
SPI1_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  SPI1_IRQn                                = (uint8_t)26,  \/*!< SPI1 interrupt *\/$/;"	e	enum:__anon90
SWITCH_CSS_BREAK_DAC_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  SWITCH_CSS_BREAK_DAC_IRQn                = (uint8_t)17,  \/*!< Clock switch\/CSS interrupt\/TIM1 Break \/DAC  interrupt *\/$/;"	e	enum:__anon90
TIM1_CC_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM1_CC_IRQn                             = (uint8_t)24,  \/*!< TIM1 capture\/compare interrupt  *\/$/;"	e	enum:__anon90
TIM1_UPD_OVF_TRG_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM1_UPD_OVF_TRG_IRQn                    = (uint8_t)23,  \/*!< TIM1 TIM1 Update\/Overflow\/Trigger interrupt *\/$/;"	e	enum:__anon90
TIM2_CC_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM2_CC_IRQn                             = (uint8_t)20,  \/*!< TIM2 input captute\/output compare interrupt  *\/$/;"	e	enum:__anon90
TIM2_UPD_OVF_TRG_BRK_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM2_UPD_OVF_TRG_BRK_IRQn                = (uint8_t)19,  \/*!< TIM2 Update\/Overflow\/Trigger\/Break interrupt*\/$/;"	e	enum:__anon90
TIM3_CC_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM3_CC_IRQn                             = (uint8_t)22,  \/*!< TIM3 capture\/compare interrupt  *\/$/;"	e	enum:__anon90
TIM3_UPD_OVF_TRG_BRK_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM3_UPD_OVF_TRG_BRK_IRQn                = (uint8_t)21,  \/*!< TIM3 Update\/Overflow\/Trigger\/Break interrupt *\/$/;"	e	enum:__anon90
TIM4_UPD_OVF_TRG_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  TIM4_UPD_OVF_TRG_IRQn                    = (uint8_t)25,  \/*!< TIM4 Update\/Overflow\/Trigger interrupt *\/$/;"	e	enum:__anon90
USART1_RX_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  USART1_RX_IRQn                           = (uint8_t)28,  \/*!< USART1 RX interrupt *\/$/;"	e	enum:__anon90
USART1_TX_IRQn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	/^  USART1_TX_IRQn                           = (uint8_t)27,  \/*!< USART1 TX interrupt *\/$/;"	e	enum:__anon90
__STM8L15x_ITC_H__	STM8L15x_StdPeriph_Driver\inc\stm8l15x_itc.h	24;"	d
IS_IWDG_PRESCALER_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	98;"	d
IS_IWDG_WRITE_ACCESS_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	111;"	d
IWDG_KEY_ENABLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	46;"	d
IWDG_KEY_REFRESH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	42;"	d
IWDG_Prescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_128 = (uint8_t)0x05, \/*!< Used to set prescaler register to 128 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_16  = (uint8_t)0x02, \/*!< Used to set prescaler register to 16 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_256	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_256 = (uint8_t)0x06  \/*!< Used to set prescaler register to 256 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_32  = (uint8_t)0x03, \/*!< Used to set prescaler register to 32 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_4   = (uint8_t)0x00, \/*!< Used to set prescaler register to 4 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_64  = (uint8_t)0x04, \/*!< Used to set prescaler register to 64 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_Prescaler_8   = (uint8_t)0x01, \/*!< Used to set prescaler register to 8 *\/$/;"	e	enum:__anon93
IWDG_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^} IWDG_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon93
IWDG_WriteAccess_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_WriteAccess_Disable = (uint8_t)0x00  \/*!< Code 0x00 in Key register, not allow write access to Prescaler and Reload registers *\/$/;"	e	enum:__anon92
IWDG_WriteAccess_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^  IWDG_WriteAccess_Enable  = (uint8_t)0x55, \/*!< Code 0x55 in Key register, allow write access to Prescaler and Reload registers *\/$/;"	e	enum:__anon92
IWDG_WriteAccess_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	/^} IWDG_WriteAccess_TypeDef;$/;"	t	typeref:enum:__anon92
__STM8L15x_IWDG_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_iwdg.h	22;"	d
IS_LCD_BIAS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	302;"	d
IS_LCD_BLINK_FREQUENCY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	358;"	d
IS_LCD_BLINK_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	350;"	d
IS_LCD_CLOCK_DIVIDER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	274;"	d
IS_LCD_CLOCK_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	254;"	d
IS_LCD_CONTRAST	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	308;"	d
IS_LCD_DEAD_TIME	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	338;"	d
IS_LCD_DUTY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	294;"	d
IS_LCD_PAGE_SELECT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	407;"	d
IS_LCD_PORT_MASK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	397;"	d
IS_LCD_PULSE_DURATION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	326;"	d
IS_LCD_RAM_REGISTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	370;"	d
IS_LCD_VOLTAGE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	320;"	d
LCD_Bias_1_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Bias_1_2  = (uint8_t)0x01   \/*!< 1\/2 bias  *\/$/;"	e	enum:__anon95
LCD_Bias_1_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Bias_1_3  = (uint8_t)0x00,  \/*!< 1\/3 bias  *\/$/;"	e	enum:__anon95
LCD_Bias_1_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Bias_1_4  = (uint8_t)0x10,  \/*!< 1\/4 bias  *\/$/;"	e	enum:__anon95
LCD_Bias_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_Bias_TypeDef;$/;"	t	typeref:enum:__anon95
LCD_BlinkFrequency_Div1024	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div1024 = (uint8_t)0x38  \/*!< The Blink frequency = fLcd\/1024 *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div128  = (uint8_t)0x20, \/*!< The Blink frequency = fLcd\/128  *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div16   = (uint8_t)0x08, \/*!< The Blink frequency = fLcd\/16   *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div256	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div256  = (uint8_t)0x28, \/*!< The Blink frequency = fLcd\/256  *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div32   = (uint8_t)0x10, \/*!< The Blink frequency = fLcd\/32   *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div512	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div512  = (uint8_t)0x30, \/*!< The Blink frequency = fLcd\/512  *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div64   = (uint8_t)0x18, \/*!< The Blink frequency = fLcd\/64   *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_Div8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkFrequency_Div8    = (uint8_t)0x00, \/*!< The Blink frequency = fLcd\/8    *\/$/;"	e	enum:__anon103
LCD_BlinkFrequency_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_BlinkFrequency_TypeDef;$/;"	t	typeref:enum:__anon103
LCD_BlinkMode_AllSEG_AllCOM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkMode_AllSEG_AllCOM = (uint8_t)0xC0  \/*!< All SEG on All COm Blink  *\/$/;"	e	enum:__anon102
LCD_BlinkMode_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkMode_Off           = (uint8_t)0x00, \/*!< Blink inactive            *\/$/;"	e	enum:__anon102
LCD_BlinkMode_SEG0_AllCOM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkMode_SEG0_AllCOM   = (uint8_t)0x80, \/*!< SEG0 on All COM blink     *\/$/;"	e	enum:__anon102
LCD_BlinkMode_SEG0_COM0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_BlinkMode_SEG0_COM0     = (uint8_t)0x40, \/*!< SEG0 on COM0 blink        *\/$/;"	e	enum:__anon102
LCD_BlinkMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_BlinkMode_TypeDef;$/;"	t	typeref:enum:__anon102
LCD_Contrast_2V6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_2V6 = (uint8_t)0x00, \/*!< Maximum Voltage = 2.60V *\/$/;"	e	enum:__anon98
LCD_Contrast_2V7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_2V7 = (uint8_t)0x02, \/*!< Maximum Voltage = 2.70V *\/$/;"	e	enum:__anon98
LCD_Contrast_2V8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_2V8 = (uint8_t)0x04, \/*!< Maximum Voltage = 2.80V *\/$/;"	e	enum:__anon98
LCD_Contrast_2V9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_2V9 = (uint8_t)0x06, \/*!< Maximum Voltage = 2.90V *\/$/;"	e	enum:__anon98
LCD_Contrast_3V0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_3V0 = (uint8_t)0x08, \/*!< Maximum Voltage = 3.00V *\/$/;"	e	enum:__anon98
LCD_Contrast_3V1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_3V1 = (uint8_t)0x0A, \/*!< Maximum Voltage = 3.10V *\/$/;"	e	enum:__anon98
LCD_Contrast_3V2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_3V2 = (uint8_t)0x0C, \/*!< Maximum Voltage = 3.20V *\/$/;"	e	enum:__anon98
LCD_Contrast_3V3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Contrast_3V3 = (uint8_t)0x0E  \/*!< Maximum Voltage = 3.30V *\/$/;"	e	enum:__anon98
LCD_Contrast_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_Contrast_TypeDef;$/;"	t	typeref:enum:__anon98
LCD_DeadTime_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_0 = (uint8_t)0x00, \/*!< No dead Time  *\/$/;"	e	enum:__anon101
LCD_DeadTime_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_1 = (uint8_t)0x01, \/*!< One Phase between different couple of Frame   *\/$/;"	e	enum:__anon101
LCD_DeadTime_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_2 = (uint8_t)0x02, \/*!< Two Phase between different couple of Frame   *\/$/;"	e	enum:__anon101
LCD_DeadTime_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_3 = (uint8_t)0x03, \/*!< Tree Phase between different couple of Frame  *\/$/;"	e	enum:__anon101
LCD_DeadTime_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_4 = (uint8_t)0x04, \/*!< Four Phase between different couple of Frame  *\/$/;"	e	enum:__anon101
LCD_DeadTime_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_5 = (uint8_t)0x05, \/*!< Five Phase between different couple of Frame  *\/$/;"	e	enum:__anon101
LCD_DeadTime_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_6 = (uint8_t)0x06, \/*!< Six Phase between different couple of Frame   *\/$/;"	e	enum:__anon101
LCD_DeadTime_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_DeadTime_7 = (uint8_t)0x07  \/*!< Seven Phase between different couple of Frame *\/$/;"	e	enum:__anon101
LCD_DeadTime_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_DeadTime_TypeDef;$/;"	t	typeref:enum:__anon101
LCD_Divider_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_16 = (uint8_t)0x00, \/*!< LCD frequency = CLKprescaler\/16 *\/$/;"	e	enum:__anon97
LCD_Divider_17	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_17 = (uint8_t)0x01, \/*!< LCD frequency = CLKprescaler\/17 *\/$/;"	e	enum:__anon97
LCD_Divider_18	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_18 = (uint8_t)0x02, \/*!< LCD frequency = CLKprescaler\/18 *\/$/;"	e	enum:__anon97
LCD_Divider_19	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_19 = (uint8_t)0x03, \/*!< LCD frequency = CLKprescaler\/19 *\/$/;"	e	enum:__anon97
LCD_Divider_20	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_20 = (uint8_t)0x04, \/*!< LCD frequency = CLKprescaler\/20 *\/$/;"	e	enum:__anon97
LCD_Divider_21	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_21 = (uint8_t)0x05, \/*!< LCD frequency = CLKprescaler\/21 *\/$/;"	e	enum:__anon97
LCD_Divider_22	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_22 = (uint8_t)0x06, \/*!< LCD frequency = CLKprescaler\/22 *\/$/;"	e	enum:__anon97
LCD_Divider_23	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_23 = (uint8_t)0x07, \/*!< LCD frequency = CLKprescaler\/23 *\/$/;"	e	enum:__anon97
LCD_Divider_24	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_24 = (uint8_t)0x08, \/*!< LCD frequency = CLKprescaler\/24 *\/$/;"	e	enum:__anon97
LCD_Divider_25	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_25 = (uint8_t)0x09, \/*!< LCD frequency = CLKprescaler\/25 *\/$/;"	e	enum:__anon97
LCD_Divider_26	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_26 = (uint8_t)0x0A, \/*!< LCD frequency = CLKprescaler\/26 *\/$/;"	e	enum:__anon97
LCD_Divider_27	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_27 = (uint8_t)0x0B, \/*!< LCD frequency = CLKprescaler\/27 *\/$/;"	e	enum:__anon97
LCD_Divider_28	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_28 = (uint8_t)0x0C, \/*!< LCD frequency = CLKprescaler\/28 *\/$/;"	e	enum:__anon97
LCD_Divider_29	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_29 = (uint8_t)0x0D, \/*!< LCD frequency = CLKprescaler\/29 *\/$/;"	e	enum:__anon97
LCD_Divider_30	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_30 = (uint8_t)0x0E, \/*!< LCD frequency = CLKprescaler\/30 *\/$/;"	e	enum:__anon97
LCD_Divider_31	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Divider_31 = (uint8_t)0x0F  \/*!< LCD frequency = CLKprescaler\/31 *\/$/;"	e	enum:__anon97
LCD_Divider_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_Divider_TypeDef;$/;"	t	typeref:enum:__anon97
LCD_Duty_1_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Duty_1_2    = (uint8_t)0x02, \/*!< 1\/2 duty    *\/$/;"	e	enum:__anon94
LCD_Duty_1_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Duty_1_3    = (uint8_t)0x04, \/*!< 1\/3 duty    *\/$/;"	e	enum:__anon94
LCD_Duty_1_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Duty_1_4    = (uint8_t)0x06, \/*!< 1\/4 duty    *\/$/;"	e	enum:__anon94
LCD_Duty_1_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Duty_1_8    = (uint8_t)0x20  \/*!< 1\/8 duty    *\/$/;"	e	enum:__anon94
LCD_Duty_Static	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Duty_Static = (uint8_t)0x00, \/*!< Static duty *\/$/;"	e	enum:__anon94
LCD_Duty_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_Duty_TypeDef;$/;"	t	typeref:enum:__anon94
LCD_PageSelection_FirstPage	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PageSelection_FirstPage  = (uint8_t)0x00,  \/*!< The LCD RAM is selected as the first page  *\/$/;"	e	enum:__anon106
LCD_PageSelection_SecondPage	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PageSelection_SecondPage = (uint8_t)0x04   \/*!< The LCD RAM is selected as the second page *\/$/;"	e	enum:__anon106
LCD_PageSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_PageSelection_TypeDef;$/;"	t	typeref:enum:__anon106
LCD_PortMaskRegister_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PortMaskRegister_0 = (uint8_t)0x00,  \/*!< PortMask Register 0  *\/$/;"	e	enum:__anon105
LCD_PortMaskRegister_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PortMaskRegister_1 = (uint8_t)0x01,  \/*!< PortMask Register 1  *\/$/;"	e	enum:__anon105
LCD_PortMaskRegister_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PortMaskRegister_2 = (uint8_t)0x02,  \/*!< PortMask Register 2  *\/$/;"	e	enum:__anon105
LCD_PortMaskRegister_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PortMaskRegister_3 = (uint8_t)0x03,  \/*!< PortMask Register 3  *\/$/;"	e	enum:__anon105
LCD_PortMaskRegister_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PortMaskRegister_4 = (uint8_t)0x04,  \/*!< PortMask Register 4  *\/$/;"	e	enum:__anon105
LCD_PortMaskRegister_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PortMaskRegister_5 = (uint8_t)0x05   \/*!< PortMask Register 5  *\/$/;"	e	enum:__anon105
LCD_PortMaskRegister_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_PortMaskRegister_TypeDef;$/;"	t	typeref:enum:__anon105
LCD_Prescaler_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_1     = (uint8_t)0x00, \/*!< CLKprescaler = ClKinput       *\/$/;"	e	enum:__anon96
LCD_Prescaler_1024	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_1024  = (uint8_t)0xA0, \/*!< CLKprescaler = ClKinput\/1024  *\/$/;"	e	enum:__anon96
LCD_Prescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_128   = (uint8_t)0x70, \/*!< CLKprescaler = ClKinput\/128   *\/$/;"	e	enum:__anon96
LCD_Prescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_16    = (uint8_t)0x40, \/*!< CLKprescaler = ClKinput\/16    *\/$/;"	e	enum:__anon96
LCD_Prescaler_16384	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_16384 = (uint8_t)0xE0, \/*!< CLKprescaler = ClKinput\/16384 *\/$/;"	e	enum:__anon96
LCD_Prescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_2     = (uint8_t)0x10, \/*!< CLKprescaler = ClKinput\/2     *\/$/;"	e	enum:__anon96
LCD_Prescaler_2048	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_2048  = (uint8_t)0xB0, \/*!< CLKprescaler = ClKinput\/2048  *\/$/;"	e	enum:__anon96
LCD_Prescaler_256	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_256   = (uint8_t)0x80, \/*!< CLKprescaler = ClKinput\/256   *\/$/;"	e	enum:__anon96
LCD_Prescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_32    = (uint8_t)0x50, \/*!< CLKprescaler = ClKinput\/32    *\/$/;"	e	enum:__anon96
LCD_Prescaler_32768	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_32768 = (uint8_t)0xF0  \/*!< CLKprescaler = ClKinput\/32768 *\/$/;"	e	enum:__anon96
LCD_Prescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_4     = (uint8_t)0x20, \/*!< CLKprescaler = ClKinput\/4     *\/$/;"	e	enum:__anon96
LCD_Prescaler_4096	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_4096  = (uint8_t)0xC0, \/*!< CLKprescaler = ClKinput\/4096  *\/$/;"	e	enum:__anon96
LCD_Prescaler_512	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_512   = (uint8_t)0x90, \/*!< CLKprescaler = ClKinput\/512   *\/$/;"	e	enum:__anon96
LCD_Prescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_64    = (uint8_t)0x60, \/*!< CLKprescaler = ClKinput\/64    *\/$/;"	e	enum:__anon96
LCD_Prescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_8     = (uint8_t)0x30, \/*!< CLKprescaler = ClKinput\/8     *\/$/;"	e	enum:__anon96
LCD_Prescaler_8192	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_Prescaler_8192  = (uint8_t)0xD0, \/*!< CLKprescaler = ClKinput\/8192  *\/$/;"	e	enum:__anon96
LCD_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon96
LCD_PulseOnDuration_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_0 = (uint8_t)0x00, \/*!< Pulse on duration = 0\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_1 = (uint8_t)0x20, \/*!< Pulse on duration = 1\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_2 = (uint8_t)0x40, \/*!< Pulse on duration = 2\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_3 = (uint8_t)0x60, \/*!< Pulse on duration = 3\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_4 = (uint8_t)0x80, \/*!< Pulse on duration = 4\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_5 = (uint8_t)0xA0, \/*!< Pulse on duration = 5\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_6 = (uint8_t)0xC0, \/*!< Pulse on duration = 6\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_PulseOnDuration_7 = (uint8_t)0xE0  \/*!< Pulse on duration = 7\/CLKprescaler  *\/$/;"	e	enum:__anon100
LCD_PulseOnDuration_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_PulseOnDuration_TypeDef;$/;"	t	typeref:enum:__anon100
LCD_RAMRegister_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_0   = (uint8_t)0x00,  \/*!< RAM Register 0  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_1   = (uint8_t)0x01,  \/*!< RAM Register 1  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_10  = (uint8_t)0x0A,  \/*!< RAM Register 10 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_11  = (uint8_t)0x0B,  \/*!< RAM Register 11 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_12  = (uint8_t)0x0C,  \/*!< RAM Register 12 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_13	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_13  = (uint8_t)0x0D,  \/*!< RAM Register 13 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_14  = (uint8_t)0x0E,  \/*!< RAM Register 14 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_15  = (uint8_t)0x0F,  \/*!< RAM Register 15 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_16  = (uint8_t)0x10,  \/*!< RAM Register 16 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_17	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_17  = (uint8_t)0x11,  \/*!< RAM Register 17 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_18	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_18  = (uint8_t)0x12,  \/*!< RAM Register 18 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_19	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_19  = (uint8_t)0x13,  \/*!< RAM Register 19 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_2   = (uint8_t)0x02,  \/*!< RAM Register 2  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_20	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_20  = (uint8_t)0x14,  \/*!< RAM Register 20 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_21	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_21  = (uint8_t)0x15   \/*!< RAM Register 21 *\/$/;"	e	enum:__anon104
LCD_RAMRegister_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_3   = (uint8_t)0x03,  \/*!< RAM Register 3  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_4   = (uint8_t)0x04,  \/*!< RAM Register 4  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_5   = (uint8_t)0x05,  \/*!< RAM Register 5  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_6   = (uint8_t)0x06,  \/*!< RAM Register 6  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_7   = (uint8_t)0x07,  \/*!< RAM Register 7  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_8   = (uint8_t)0x08,  \/*!< RAM Register 8  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_RAMRegister_9   = (uint8_t)0x09,  \/*!< RAM Register 9  *\/$/;"	e	enum:__anon104
LCD_RAMRegister_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_RAMRegister_TypeDef;$/;"	t	typeref:enum:__anon104
LCD_VoltageSource_External	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_VoltageSource_External = (uint8_t)0x01  \/*!< External voltage source for the LCD *\/$/;"	e	enum:__anon99
LCD_VoltageSource_Internal	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^  LCD_VoltageSource_Internal = (uint8_t)0x00, \/*!< Internal voltage source for the LCD *\/$/;"	e	enum:__anon99
LCD_VoltageSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	/^} LCD_VoltageSource_TypeDef;$/;"	t	typeref:enum:__anon99
__STM8L15x_LCD_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_lcd.h	24;"	d
IS_PWR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	97;"	d
IS_PWR_PVD_LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	84;"	d
PWR_FLAG_PVDIF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_FLAG_PVDIF    = (uint8_t)0x20, \/*!< PVD Interrupt flag *\/$/;"	e	enum:__anon108
PWR_FLAG_PVDOF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_FLAG_PVDOF    = (uint8_t)0x40,\/*!< PVD output flag *\/$/;"	e	enum:__anon108
PWR_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^} PWR_FLAG_TypeDef;$/;"	t	typeref:enum:__anon108
PWR_FLAG_VREFINTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_FLAG_VREFINTF = (uint8_t)0x01  \/*!< Internal reference voltage status flag *\/$/;"	e	enum:__anon108
PWR_PVDLevel_1V85	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_1V85  = (uint8_t)0x00, \/*!< PVD threshold = 1.85 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_2V05	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_2V05  = (uint8_t)0x02, \/*!< PVD threshold = 2.05 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_2V26	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_2V26  = (uint8_t)0x04, \/*!< PVD threshold = 2.26 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_2V45	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_2V45  = (uint8_t)0x06, \/*!< PVD threshold = 2.45 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_2V65	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_2V65  = (uint8_t)0x08, \/*!< PVD threshold = 2.65 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_2V85	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_2V85  = (uint8_t)0x0A, \/*!< PVD threshold = 2.85 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_3V05	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_3V05  = (uint8_t)0x0C, \/*!< PVD threshold = 3.05 V *\/$/;"	e	enum:__anon107
PWR_PVDLevel_PVDIn	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^  PWR_PVDLevel_PVDIn = (uint8_t)0x0E  \/*!< PVD threshold = PVD_IN input pin *\/$/;"	e	enum:__anon107
PWR_PVDLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	/^} PWR_PVDLevel_TypeDef;$/;"	t	typeref:enum:__anon107
__STM8L15x_PWR_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_pwr.h	24;"	d
IS_RST_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	69;"	d
RST_FLAG_BORF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^  RST_FLAG_BORF   = (uint8_t)0x20  \/*!< BOR reset flag *\/$/;"	e	enum:__anon109
RST_FLAG_ILLOPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^  RST_FLAG_ILLOPF = (uint8_t)0x04, \/*!< Illigal opcode reset flag *\/$/;"	e	enum:__anon109
RST_FLAG_IWDGF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^  RST_FLAG_IWDGF  = (uint8_t)0x02, \/*!< Independent watchdog reset flag *\/$/;"	e	enum:__anon109
RST_FLAG_PORF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^  RST_FLAG_PORF   = (uint8_t)0x01, \/*!< POR reset flag *\/$/;"	e	enum:__anon109
RST_FLAG_SWIMF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^  RST_FLAG_SWIMF  = (uint8_t)0x08, \/*!< SWIM reset flag *\/$/;"	e	enum:__anon109
RST_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^} RST_FLAG_TypeDef;$/;"	t	typeref:enum:__anon109
RST_FLAG_WWDGF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	/^  RST_FLAG_WWDGF  = (uint8_t)0x10, \/*!< Window watchdog reset flag *\/$/;"	e	enum:__anon109
__STM8L15x_RST_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rst.h	24;"	d
IS_RTC_ALARM_DATEWEEKDAY_SEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	548;"	d
IS_RTC_ALARM_MASK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	552;"	d
IS_RTC_ALARM_SS_MASK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	712;"	d
IS_RTC_ALARM_SS_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	706;"	d
IS_RTC_ASYNCH_PREDIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	490;"	d
IS_RTC_CALOUTPUT_SELECT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	701;"	d
IS_RTC_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	617;"	d
IS_RTC_CLEAR_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	633;"	d
IS_RTC_CONFIG_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	623;"	d
IS_RTC_DATE_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	529;"	d
IS_RTC_DATE_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	530;"	d
IS_RTC_DAYLIGHT_SAVING	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	584;"	d
IS_RTC_FORMAT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	598;"	d
IS_RTC_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	605;"	d
IS_RTC_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	627;"	d
IS_RTC_H12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	515;"	d
IS_RTC_HOUR12_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	498;"	d
IS_RTC_HOUR12_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	499;"	d
IS_RTC_HOUR24	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	503;"	d
IS_RTC_HOUR_FORMAT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	483;"	d
IS_RTC_MINUTES	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	507;"	d
IS_RTC_MONTH_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	524;"	d
IS_RTC_MONTH_MIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	525;"	d
IS_RTC_OUTPUT_POL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	578;"	d
IS_RTC_OUTPUT_SEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	572;"	d
IS_RTC_OUTPUT_SELECT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	693;"	d
IS_RTC_SECONDS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	511;"	d
IS_RTC_SHIFT_ADD1S	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	723;"	d
IS_RTC_SHIFT_SUBFS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	718;"	d
IS_RTC_SMOOTH_CALIB_MINUS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	689;"	d
IS_RTC_SMOOTH_CALIB_PERIOD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	678;"	d
IS_RTC_SMOOTH_CALIB_PLUS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	684;"	d
IS_RTC_STORE_OPERATION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	590;"	d
IS_RTC_SYNCH_PREDIV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	494;"	d
IS_RTC_TAMPER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	647;"	d
IS_RTC_TAMPER_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	653;"	d
IS_RTC_TAMPER_LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	638;"	d
IS_RTC_TAMPER_PINS_PRECHAR_DURATION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	669;"	d
IS_RTC_TAMPER_SAMPLING_FREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	662;"	d
IS_RTC_WAKEUP_CLOCK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	560;"	d
IS_RTC_WEEKDAY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	534;"	d
IS_RTC_YEAR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	520;"	d
NOT_CORRECT_TAMPER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	646;"	d
RTC_AlarmDateWeekDay	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_AlarmDateWeekDay;                            \/*!< The RTC Alarm Date\/WeekDay value.$/;"	m	struct:__anon138
RTC_AlarmDateWeekDaySel	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmDateWeekDaySel_TypeDef RTC_AlarmDateWeekDaySel; \/*!< The RTC Alarm Date\/WeekDay selection. *\/$/;"	m	struct:__anon138
RTC_AlarmDateWeekDaySel_Date	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmDateWeekDaySel_Date     = ((uint8_t)0x00), \/*!< Date\/WeekDay selection is Date *\/$/;"	e	enum:__anon114
RTC_AlarmDateWeekDaySel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_AlarmDateWeekDaySel_TypeDef;$/;"	t	typeref:enum:__anon114
RTC_AlarmDateWeekDaySel_WeekDay	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmDateWeekDaySel_WeekDay  = ((uint8_t)0x40)  \/*!< Date\/WeekDay selection is WeekDay *\/$/;"	e	enum:__anon114
RTC_AlarmMask	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_AlarmMask;                                   \/*!< The RTC Alarm Fields Masks. *\/$/;"	m	struct:__anon138
RTC_AlarmMask_All	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmMask_All          =  ((uint8_t)0xF0)  \/*!< Alarm All Mask are enabled*\/$/;"	e	enum:__anon115
RTC_AlarmMask_DateWeekDay	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmMask_DateWeekDay  =  ((uint8_t)0x10), \/*!< Alarm Date\/WeekDay Mask *\/$/;"	e	enum:__anon115
RTC_AlarmMask_Hours	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmMask_Hours        =  ((uint8_t)0x20), \/*!< Alarm Hours Mask *\/$/;"	e	enum:__anon115
RTC_AlarmMask_Minutes	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmMask_Minutes      =  ((uint8_t)0x40), \/*!< Alarm Minutes Mask *\/$/;"	e	enum:__anon115
RTC_AlarmMask_None	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmMask_None         =  ((uint8_t)0x00), \/*!< Alarm Masks disabled *\/$/;"	e	enum:__anon115
RTC_AlarmMask_Seconds	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmMask_Seconds      =  ((uint8_t)0x80), \/*!< Alarm Seconds Mask *\/$/;"	e	enum:__anon115
RTC_AlarmMask_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_AlarmMask_TypeDef;$/;"	t	typeref:enum:__anon115
RTC_AlarmSubSecondMask_All	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_All      =  ((uint8_t)0x00), \/*!< All Alarm SS fields are masked. There is no comparison on sub seconds for Alarm *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_None	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_None     =  ((uint8_t)0x0F) \/*!< SS[14:0] are compared and must match to activate alarm. *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14     =  ((uint8_t)0x0E), \/*!< SS[14] is don�t care in Alarm A comparison. Only SS[13:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_1   =  ((uint8_t)0x01), \/*!< SS[14:1] are don�t care in Alarm comparison. Only SS[0] is compared. *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_10  =  ((uint8_t)0x0A), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_11  =  ((uint8_t)0x0B), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_12  =  ((uint8_t)0x0C), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_13	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_13  =  ((uint8_t)0x0D), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_2   =  ((uint8_t)0x02), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_3   =  ((uint8_t)0x03), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_4   =  ((uint8_t)0x04), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_5   =  ((uint8_t)0x05), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_6   =  ((uint8_t)0x06), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_7   =  ((uint8_t)0x07), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_8   =  ((uint8_t)0x08), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_SS14_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_AlarmSubSecondMask_SS14_9   =  ((uint8_t)0x09), \/*!< SS[14:2] are don�t care in Alarm A comparison. Only SS[1:0] are compared *\/$/;"	e	enum:__anon116
RTC_AlarmSubSecondMask_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_AlarmSubSecondMask_TypeDef;$/;"	t	typeref:enum:__anon116
RTC_AlarmTime	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TimeTypeDef RTC_AlarmTime;                           \/*!< RTC Alarm Time *\/$/;"	m	struct:__anon138
RTC_AlarmTypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_AlarmTypeDef;$/;"	t	typeref:struct:__anon138
RTC_AsynchPrediv	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_AsynchPrediv;   \/*!< RTC Asynchronious Predivisor.$/;"	m	struct:__anon135
RTC_CalibOutput_1Hz	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_CalibOutput_1Hz    = ((uint8_t)0x80)  \/*!< RTC Calib Output is 1Hz     *\/$/;"	e	enum:__anon120
RTC_CalibOutput_512Hz	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_CalibOutput_512Hz  = ((uint8_t)0x00), \/*!< RTC Calib Output is 512Hz  *\/$/;"	e	enum:__anon120
RTC_CalibOutput_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_CalibOutput_TypeDef;$/;"	t	typeref:enum:__anon120
RTC_Date	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_Date;                 \/*!< The RTC Calender Date.$/;"	m	struct:__anon137
RTC_DateTypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_DateTypeDef;$/;"	t	typeref:struct:__anon137
RTC_DayLightSaving_ADD1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_DayLightSaving_ADD1H  = ((uint8_t)0x01)  \/*!< Add 1 hour to the current Time (Summer Time Adjustment) *\/$/;"	e	enum:__anon121
RTC_DayLightSaving_SUB1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_DayLightSaving_SUB1H  = ((uint8_t)0x02), \/*!< Substract 1 hour to the current Time (Winter Time Adjustment) *\/$/;"	e	enum:__anon121
RTC_DayLightSaving_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_DayLightSaving_TypeDef;$/;"	t	typeref:enum:__anon121
RTC_FLAG_ALRAF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_ALRAF   = ((uint16_t)0x0001), \/*!< Alarm A Flag. If set, the Time\/Date registers matches Alarm A registers *\/$/;"	e	enum:__anon124
RTC_FLAG_ALRAWF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_ALRAWF  = ((uint16_t)0x0100)  \/*!< Alarm  A write Flag. If set, Alarm A update is allowed   *\/$/;"	e	enum:__anon124
RTC_FLAG_CLRBLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	616;"	d
RTC_FLAG_INITF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_INITF   = ((uint16_t)0x4000), \/*!< Initialisation Flag. If set,Calender registers has been initialized  *\/$/;"	e	enum:__anon124
RTC_FLAG_INITS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_INITS   = ((uint16_t)0x1000), \/*!< Initialisation Status Flag. If set,Calender  update is allowed  *\/$/;"	e	enum:__anon124
RTC_FLAG_RECALPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_RECALPF = ((uint16_t)0x0200), \/*!<   Recalibration pending Flag, The status flag RECALPF is automatically set to �1� when software$/;"	e	enum:__anon124
RTC_FLAG_RSF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_RSF     = ((uint16_t)0x2000), \/*!< Registers Synchronization Flag. If set,Calender registers synchronized  *\/$/;"	e	enum:__anon124
RTC_FLAG_SHPF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_SHPF    = ((uint16_t)0x0800), \/*!< Shift operation pending Flag. This flag is set by hardware as soon as a shift operation is$/;"	e	enum:__anon124
RTC_FLAG_TAMP1F	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_TAMP1F  = ((uint16_t)0x0020), \/*!< TAMPER1 detection  Flag. If set, tamper detection event is detected on tamper input 1 *\/$/;"	e	enum:__anon124
RTC_FLAG_TAMP2F	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_TAMP2F  = ((uint16_t)0x0040), \/*!< TAMPER2 detection  Flag. If set, tamper detection event is detected on tamper input 2 *\/$/;"	e	enum:__anon124
RTC_FLAG_TAMP3F	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_TAMP3F  = ((uint16_t)0x0080), \/*!< TAMPER3 detection  Flag. If set, tamper detection event is detected on tamper input 3 *\/$/;"	e	enum:__anon124
RTC_FLAG_WUTF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_WUTF    = ((uint16_t)0x0004), \/*!< Wake up Timer Flag. If set, the Wake Up downcounter reaches 0 *\/$/;"	e	enum:__anon124
RTC_FLAG_WUTWF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_FLAG_WUTWF   = ((uint16_t)0x0400), \/*!< Wake up Timer write Flag. If set, Wake up Timer update is allowed *\/$/;"	e	enum:__anon124
RTC_Flag_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_Flag_TypeDef;$/;"	t	typeref:enum:__anon124
RTC_Format_BCD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Format_BCD  = ((uint8_t)0x01)  \/*!< BCD Format is used  *\/$/;"	e	enum:__anon123
RTC_Format_BIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Format_BIN  = ((uint8_t)0x00), \/*!< Binary Format is used  *\/$/;"	e	enum:__anon123
RTC_Format_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_Format_TypeDef;$/;"	t	typeref:enum:__anon123
RTC_H12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_H12_TypeDef RTC_H12; \/*!< RTC 12-hour clock period (AM\/PM)*\/$/;"	m	struct:__anon136
RTC_H12_AM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_H12_AM     = ((uint8_t)0x00), \/*!< AM\/PM notation is AM or 24 hour format  *\/$/;"	e	enum:__anon113
RTC_H12_PM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_H12_PM     = ((uint8_t)0x40)  \/*!< AM\/PM notation is PM  *\/$/;"	e	enum:__anon113
RTC_H12_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_H12_TypeDef;$/;"	t	typeref:enum:__anon113
RTC_HourFormat	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_HourFormat_TypeDef RTC_HourFormat; \/*!< RTC Hour Format *\/$/;"	m	struct:__anon135
RTC_HourFormat_12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_HourFormat_12  = ((uint8_t)0x40)  \/*!< Hour Format is 12H (using AM\/PM) *\/$/;"	e	enum:__anon112
RTC_HourFormat_24	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_HourFormat_24  = ((uint8_t)0x00), \/*!< Hour Format is 24H *\/$/;"	e	enum:__anon112
RTC_HourFormat_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_HourFormat_TypeDef;$/;"	t	typeref:enum:__anon112
RTC_Hours	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_Hours;       \/*!< RTC Hours.$/;"	m	struct:__anon136
RTC_IT_ALRA	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_IT_ALRA = ((uint16_t)0x0010),  \/*!< Alarm A Interrupt *\/$/;"	e	enum:__anon125
RTC_IT_TAMP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_IT_TAMP = ((uint16_t)0x0F01)   \/*!< Tamper Interrupt *\/$/;"	e	enum:__anon125
RTC_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_IT_TypeDef;$/;"	t	typeref:enum:__anon125
RTC_IT_WUT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_IT_WUT  = ((uint16_t)0x0040),  \/*!< Wake up Timer Interrupt *\/$/;"	e	enum:__anon125
RTC_InitTypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_InitTypeDef;$/;"	t	typeref:struct:__anon135
RTC_Minutes	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_Minutes;     \/*!< RTC Minutes.$/;"	m	struct:__anon136
RTC_Month	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_TypeDef RTC_Month;      \/*!< The RTC Calender Month. *\/$/;"	m	struct:__anon137
RTC_Month_April	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_April     =  ((uint8_t)0x04), \/*!< Month is April*\/$/;"	e	enum:__anon111
RTC_Month_August	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_August    =  ((uint8_t)0x08), \/*!< Month is August*\/$/;"	e	enum:__anon111
RTC_Month_December	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_December  =  ((uint8_t)0x12)  \/*!< Month is December*\/$/;"	e	enum:__anon111
RTC_Month_February	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_February  =  ((uint8_t)0x02), \/*!< Month is February*\/$/;"	e	enum:__anon111
RTC_Month_January	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_January   =  ((uint8_t)0x01), \/*!< Month is January*\/$/;"	e	enum:__anon111
RTC_Month_July	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_July      =  ((uint8_t)0x07), \/*!< Month is July*\/$/;"	e	enum:__anon111
RTC_Month_June	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_June      =  ((uint8_t)0x06), \/*!< Month is June*\/$/;"	e	enum:__anon111
RTC_Month_March	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_March     =  ((uint8_t)0x03), \/*!< Month is March*\/$/;"	e	enum:__anon111
RTC_Month_May	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_May       =  ((uint8_t)0x05), \/*!< Month is May*\/$/;"	e	enum:__anon111
RTC_Month_November	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_November  =  ((uint8_t)0x11), \/*!< Month is November*\/$/;"	e	enum:__anon111
RTC_Month_October	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_October   =  ((uint8_t)0x10), \/*!< Month is October*\/$/;"	e	enum:__anon111
RTC_Month_September	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Month_September =  ((uint8_t)0x09), \/*!< Month is September*\/$/;"	e	enum:__anon111
RTC_Month_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_Month_TypeDef;$/;"	t	typeref:enum:__anon111
RTC_OutputPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_OutputPolarity_High  = ((uint8_t)0x00), \/*!< RTC Alternate function Output Polarity is High  *\/$/;"	e	enum:__anon119
RTC_OutputPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_OutputPolarity_Low   = ((uint8_t)0x10)  \/*!< RTC Alternate function Output Polarity is Low  *\/$/;"	e	enum:__anon119
RTC_OutputPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_OutputPolarity_TypeDef;$/;"	t	typeref:enum:__anon119
RTC_Output_Alarm	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Output_Alarm   = ((uint8_t)0x20), \/*!< RTC Alternate function Output is the Alarm A event*\/$/;"	e	enum:__anon118
RTC_Output_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Output_Disable = ((uint8_t)0x00), \/*!< RTC Alternate function Output is disabled  *\/$/;"	e	enum:__anon118
RTC_Output_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_Output_TypeDef;$/;"	t	typeref:enum:__anon118
RTC_Output_WakeUp	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Output_WakeUp  = ((uint8_t)0x60)  \/*!< RTC Alternate function Output is the WakeUp event *\/$/;"	e	enum:__anon118
RTC_Seconds	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_Seconds;     \/*!< RTC Seconds.$/;"	m	struct:__anon136
RTC_ShiftAdd1S_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_ShiftAdd1S_Reset  = ((uint8_t)0x00)  \/*!< Do not Add 1 Second *\/$/;"	e	enum:__anon132
RTC_ShiftAdd1S_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_ShiftAdd1S_Set    = ((uint8_t)0x80), \/*!< Add 1 Second *\/$/;"	e	enum:__anon132
RTC_ShiftAdd1S_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_ShiftAdd1S_TypeDef;$/;"	t	typeref:enum:__anon132
RTC_SmoothCalibPeriod_16sec	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_SmoothCalibPeriod_16sec  = ((uint8_t)0x20), \/*!<  if RTCCLK = 32768 Hz, Smooth calibation period is 16s, else 2exp19 RTCCLK seconds *\/$/;"	e	enum:__anon133
RTC_SmoothCalibPeriod_32sec	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_SmoothCalibPeriod_32sec  = ((uint8_t)0x00), \/*!<  if RTCCLK = 32768 Hz, Smooth calibation period is 32s,  else 2exp20 RTCCLK seconds *\/$/;"	e	enum:__anon133
RTC_SmoothCalibPeriod_8sec	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_SmoothCalibPeriod_8sec   = ((uint8_t)0x40)  \/*!<  if RTCCLK = 32768 Hz, Smooth calibation period is 8s, else 2exp18 RTCCLK seconds *\/$/;"	e	enum:__anon133
RTC_SmoothCalibPeriod_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_SmoothCalibPeriod_TypeDef;$/;"	t	typeref:enum:__anon133
RTC_SmoothCalibPlusPulses_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_SmoothCalibPlusPulses_Reset  = ((uint8_t)0x00)  \/*!<  The number of RTCCLK pulses subbstited during a 32-second window =   CALM[8:0]. *\/$/;"	e	enum:__anon134
RTC_SmoothCalibPlusPulses_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_SmoothCalibPlusPulses_Set    = ((uint8_t)0x80), \/*!<  The number of RTCCLK pulses added during a X -second window =  Y  - CALM[8:0].  wth Y = 512, 256, 128 when X = 32, 16, 8 *\/$/;"	e	enum:__anon134
RTC_SmoothCalibPlusPulses_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_SmoothCalibPlusPulses_TypeDef;$/;"	t	typeref:enum:__anon134
RTC_StoreOperation_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_StoreOperation_Reset = ((uint8_t)0x00)  \/*!< Store Operation Reset *\/$/;"	e	enum:__anon122
RTC_StoreOperation_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_StoreOperation_Set   = ((uint8_t)0x04), \/*!< Store Operation Set *\/$/;"	e	enum:__anon122
RTC_StoreOperation_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_StoreOperation_TypeDef;$/;"	t	typeref:enum:__anon122
RTC_SynchPrediv	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint16_t RTC_SynchPrediv;   \/*!< RTC Synchronious Predivisor.$/;"	m	struct:__anon135
RTC_TamperFilter_1Sample	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperFilter_1Sample    = ((uint8_t)0x00), \/*!< Tamper is activated after 1 sample at the active level *\/$/;"	e	enum:__anon130
RTC_TamperFilter_2Sample	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperFilter_2Sample    = ((uint8_t)0x08), \/*!< Tamper is activated after 2 consecutive samples at the active level. *\/$/;"	e	enum:__anon130
RTC_TamperFilter_4Sample	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperFilter_4Sample    = ((uint8_t)0x10), \/*!< Tamper is activated after 4 consecutive samples at the active level. *\/$/;"	e	enum:__anon130
RTC_TamperFilter_8Sample	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperFilter_8Sample    = ((uint8_t)0x18)  \/*!< Tamper is activated after 8 consecutive samples at the active level. *\/$/;"	e	enum:__anon130
RTC_TamperFilter_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_TamperFilter_TypeDef;$/;"	t	typeref:enum:__anon130
RTC_TamperLevel_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperLevel_High   = ((uint8_t)0x54)  \/*!< Tamper staying high triggers a tamper detection event. *\/$/;"	e	enum:__anon126
RTC_TamperLevel_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperLevel_Low    = ((uint8_t)0x00), \/*!< Tamper staying low triggers a tamper detection event. *\/$/;"	e	enum:__anon126
RTC_TamperLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_TamperLevel_TypeDef;$/;"	t	typeref:enum:__anon126
RTC_TamperPrechargeDuration_1RTCCLK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperPrechargeDuration_1RTCCLK = ((uint8_t)0x00),  \/*!< Tamper pins are pre-charged before sampling during 1 RTCCLK cycle  *\/$/;"	e	enum:__anon129
RTC_TamperPrechargeDuration_2RTCCLK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperPrechargeDuration_2RTCCLK = ((uint8_t)0x20),  \/*!< Tamper pins are pre-charged before sampling during 2 RTCCLK cycles *\/$/;"	e	enum:__anon129
RTC_TamperPrechargeDuration_4RTCCLK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperPrechargeDuration_4RTCCLK = ((uint8_t)0x40),  \/*!< Tamper pins are pre-charged before sampling during 4 RTCCLK cycles *\/$/;"	e	enum:__anon129
RTC_TamperPrechargeDuration_8RTCCLK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperPrechargeDuration_8RTCCLK = ((uint8_t)0x60)   \/*!< Tamper pins are pre-charged before sampling during 8 RTCCLK cycles *\/$/;"	e	enum:__anon129
RTC_TamperPrechargeDuration_None	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperPrechargeDuration_None    = ((uint8_t)0x80),  \/*!< Tamper pins are not pre-charged before sampling *\/$/;"	e	enum:__anon129
RTC_TamperPrechargeDuration_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_TamperPrechargeDuration_TypeDef;$/;"	t	typeref:enum:__anon129
RTC_TamperSamplingFreq_RTCCLK_Div1024	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div1024   = ((uint8_t)0x05), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 1024  *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div16384	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div16384  = ((uint8_t)0x01), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 16384 *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div2048	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div2048   = ((uint8_t)0x04), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 2048  *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div256	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div256    = ((uint8_t)0x07)  \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 256   *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div32768	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div32768  = ((uint8_t)0x00), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 32768 *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div4096	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div4096   = ((uint8_t)0x03), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 4096  *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div512	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div512    = ((uint8_t)0x06), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 512   *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_RTCCLK_Div8192	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperSamplingFreq_RTCCLK_Div8192   = ((uint8_t)0x02), \/*!< Each of the tamper inputs are sampled with a freqeuncy =  RTCCLK \/ 8192  *\/$/;"	e	enum:__anon131
RTC_TamperSamplingFreq_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_TamperSamplingFreq_TypeDef;$/;"	t	typeref:enum:__anon131
RTC_TamperState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperState_Disable  = ((uint8_t)0x00), \/*!< Tamper State is  Disable *\/$/;"	e	enum:__anon127
RTC_TamperState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_TamperState_Enable   = ((uint8_t)0x01)  \/*!< Tamper State is  Enable  *\/$/;"	e	enum:__anon127
RTC_TamperState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_TamperState_TypeDef;$/;"	t	typeref:enum:__anon127
RTC_Tamper_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Tamper_1 = ((uint8_t)0x02),  \/*!< Tamper 1 *\/$/;"	e	enum:__anon128
RTC_Tamper_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Tamper_2 = ((uint8_t)0x08),  \/*!< Tamper 2 *\/$/;"	e	enum:__anon128
RTC_Tamper_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Tamper_3 = ((uint8_t)0x20)   \/*!< Tamper 3 *\/$/;"	e	enum:__anon128
RTC_Tamper_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_Tamper_TypeDef;$/;"	t	typeref:enum:__anon128
RTC_TimeTypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_TimeTypeDef;$/;"	t	typeref:struct:__anon136
RTC_WakeUpClock_CK_SPRE_16bits	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_WakeUpClock_CK_SPRE_16bits  = ((uint8_t)0x04), \/*!< CK SPRE with a counter from 0x0000 to 0xFFFF*\/$/;"	e	enum:__anon117
RTC_WakeUpClock_CK_SPRE_17bits	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_WakeUpClock_CK_SPRE_17bits  = ((uint8_t)0x06)  \/*!< CK SPRE with a counter from 0x10000 to 0x1FFFF*\/$/;"	e	enum:__anon117
RTC_WakeUpClock_RTCCLK_Div16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_WakeUpClock_RTCCLK_Div16    = ((uint8_t)0x00), \/*!< (RTC clock) div 16*\/$/;"	e	enum:__anon117
RTC_WakeUpClock_RTCCLK_Div2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_WakeUpClock_RTCCLK_Div2     = ((uint8_t)0x03), \/*!< (RTC clock) div 2*\/$/;"	e	enum:__anon117
RTC_WakeUpClock_RTCCLK_Div4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_WakeUpClock_RTCCLK_Div4     = ((uint8_t)0x02), \/*!< (RTC clock) div 4*\/$/;"	e	enum:__anon117
RTC_WakeUpClock_RTCCLK_Div8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_WakeUpClock_RTCCLK_Div8     = ((uint8_t)0x01), \/*!< (RTC clock) div 8*\/$/;"	e	enum:__anon117
RTC_WakeUpClock_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_WakeUpClock_TypeDef;$/;"	t	typeref:enum:__anon117
RTC_WeekDay	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_TypeDef  RTC_WeekDay; \/*!< The RTC Calender Weekday. *\/$/;"	m	struct:__anon137
RTC_Weekday_Friday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Friday      =  ((uint8_t)0x05), \/*!< WeekDay Friday*\/$/;"	e	enum:__anon110
RTC_Weekday_Monday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Monday      =  ((uint8_t)0x01), \/*!< WeekDay Monday*\/$/;"	e	enum:__anon110
RTC_Weekday_Saturday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Saturday    =  ((uint8_t)0x06), \/*!< WeekDay Saturday*\/$/;"	e	enum:__anon110
RTC_Weekday_Sunday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Sunday      =  ((uint8_t)0x07)  \/*!< WeekDay Sunday*\/$/;"	e	enum:__anon110
RTC_Weekday_Thursday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Thursday    =  ((uint8_t)0x04), \/*!< WeekDay Thursday*\/$/;"	e	enum:__anon110
RTC_Weekday_Tuesday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Tuesday     =  ((uint8_t)0x02), \/*!< WeekDay Tuesday *\/$/;"	e	enum:__anon110
RTC_Weekday_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^RTC_Weekday_TypeDef;$/;"	t	typeref:enum:__anon110
RTC_Weekday_Wednesday	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  RTC_Weekday_Wednesday   =  ((uint8_t)0x03), \/*!< WeekDay Wednesday*\/$/;"	e	enum:__anon110
RTC_Year	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	/^  uint8_t RTC_Year;                 \/*!< The RTC Calender Date.$/;"	m	struct:__anon137
__STM8L15x_RTC_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_rtc.h	23;"	d
IS_SPI_BAUDRATE_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	215;"	d
IS_SPI_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	269;"	d
IS_SPI_CLEAR_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	296;"	d
IS_SPI_CONFIG_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	276;"	d
IS_SPI_CRC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	246;"	d
IS_SPI_CRC_POLYNOMIAL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	204;"	d
IS_SPI_DATA_DIRECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	182;"	d
IS_SPI_DIRECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	190;"	d
IS_SPI_DMAREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	252;"	d
IS_SPI_FIRSTBIT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	240;"	d
IS_SPI_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	257;"	d
IS_SPI_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	285;"	d
IS_SPI_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	209;"	d
IS_SPI_PHASE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	233;"	d
IS_SPI_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	227;"	d
IS_SPI_SLAVEMANAGEMENT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	196;"	d
SPI_BaudRatePrescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_128 = (uint8_t)0x30, \/*!< SPI frequency = frequency(CPU)\/128 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_16  = (uint8_t)0x18, \/*!< SPI frequency = frequency(CPU)\/16 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_2   = (uint8_t)0x00, \/*!< SPI frequency = frequency(CPU)\/2 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_256	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_256 = (uint8_t)0x38  \/*!< SPI frequency = frequency(CPU)\/256 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_32  = (uint8_t)0x20, \/*!< SPI frequency = frequency(CPU)\/32 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_4   = (uint8_t)0x08, \/*!< SPI frequency = frequency(CPU)\/4 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_64  = (uint8_t)0x28, \/*!< SPI frequency = frequency(CPU)\/64 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_BaudRatePrescaler_8   = (uint8_t)0x10, \/*!< SPI frequency = frequency(CPU)\/8 *\/$/;"	e	enum:__anon143
SPI_BaudRatePrescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_BaudRatePrescaler_TypeDef;$/;"	t	typeref:enum:__anon143
SPI_CPHA_1Edge	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_CPHA_1Edge = (uint8_t)0x00, \/*!< The first clock transition is the first data capture edge *\/$/;"	e	enum:__anon145
SPI_CPHA_2Edge	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_CPHA_2Edge = (uint8_t)0x01  \/*!< The second clock transition is the first data capture edge *\/$/;"	e	enum:__anon145
SPI_CPHA_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_CPHA_TypeDef;$/;"	t	typeref:enum:__anon145
SPI_CPOL_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_CPOL_High = (uint8_t)0x02  \/*!< Clock to 1 when idle *\/$/;"	e	enum:__anon144
SPI_CPOL_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_CPOL_Low  = (uint8_t)0x00, \/*!< Clock to 0 when idle *\/$/;"	e	enum:__anon144
SPI_CPOL_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_CPOL_TypeDef;$/;"	t	typeref:enum:__anon144
SPI_CRC_RX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_CRC_RX = (uint8_t)0x00, \/*!< Select Tx CRC register *\/$/;"	e	enum:__anon148
SPI_CRC_TX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_CRC_TX = (uint8_t)0x01  \/*!< Select Rx CRC register *\/$/;"	e	enum:__anon148
SPI_CRC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_CRC_TypeDef;$/;"	t	typeref:enum:__anon148
SPI_DMAReq_RX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_DMAReq_RX = (uint8_t)0x01,    \/*!< SPI DMA Rx transfer requests *\/$/;"	e	enum:__anon147
SPI_DMAReq_TX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_DMAReq_TX = (uint8_t)0x02     \/*!< SPI DMA Tx transfer requests *\/$/;"	e	enum:__anon147
SPI_DMAReq_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_DMAReq_TypeDef;$/;"	t	typeref:enum:__anon147
SPI_DirectionMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_DirectionMode_TypeDef;$/;"	t	typeref:enum:__anon139
SPI_Direction_1Line_Rx	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Direction_1Line_Rx          = (uint8_t)0x80, \/*!< Receiver only in 1 line bi-directional data mode *\/$/;"	e	enum:__anon139
SPI_Direction_1Line_Tx	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Direction_1Line_Tx          = (uint8_t)0xC0  \/*!< Transmit only in 1 line bi-directional data mode *\/$/;"	e	enum:__anon139
SPI_Direction_2Lines_FullDuplex	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Direction_2Lines_FullDuplex = (uint8_t)0x00, \/*!< 2-line uni-directional data mode enable *\/$/;"	e	enum:__anon139
SPI_Direction_2Lines_RxOnly	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Direction_2Lines_RxOnly     = (uint8_t)0x04, \/*!< Receiver only in 2 line uni-directional data mode *\/$/;"	e	enum:__anon139
SPI_Direction_Rx	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Direction_Rx = (uint8_t)0x00, \/*!< Select Rx receive direction in bi-directional mode *\/$/;"	e	enum:__anon141
SPI_Direction_Tx	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Direction_Tx = (uint8_t)0x01  \/*!< Select Tx transmission direction in bi-directional mode *\/$/;"	e	enum:__anon141
SPI_Direction_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_Direction_TypeDef;$/;"	t	typeref:enum:__anon141
SPI_FLAG_BSY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_BSY    = (uint8_t)0x80, \/*!< Busy flag *\/$/;"	e	enum:__anon149
SPI_FLAG_CRCERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_CRCERR = (uint8_t)0x10, \/*!< CRC error flag *\/$/;"	e	enum:__anon149
SPI_FLAG_MODF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_MODF   = (uint8_t)0x20, \/*!< Mode fault *\/$/;"	e	enum:__anon149
SPI_FLAG_OVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_OVR    = (uint8_t)0x40, \/*!< Overrun flag *\/$/;"	e	enum:__anon149
SPI_FLAG_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_RXNE   = (uint8_t)0x01  \/*!< Receive buffer empty *\/$/;"	e	enum:__anon149
SPI_FLAG_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_TXE    = (uint8_t)0x02, \/*!< Transmit buffer empty *\/$/;"	e	enum:__anon149
SPI_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_FLAG_TypeDef;$/;"	t	typeref:enum:__anon149
SPI_FLAG_WKUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FLAG_WKUP   = (uint8_t)0x08, \/*!< Wake-up flag *\/$/;"	e	enum:__anon149
SPI_FirstBit_LSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FirstBit_LSB = (uint8_t)0x80  \/*!< LSB bit will be transmitted first *\/$/;"	e	enum:__anon146
SPI_FirstBit_MSB	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_FirstBit_MSB = (uint8_t)0x00, \/*!< MSB bit will be transmitted first *\/$/;"	e	enum:__anon146
SPI_FirstBit_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_FirstBit_TypeDef;$/;"	t	typeref:enum:__anon146
SPI_IT_CRCERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_CRCERR = (uint8_t)0x45, \/*!< CRC error interrupt*\/$/;"	e	enum:__anon150
SPI_IT_ERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_ERR    = (uint8_t)0x05  \/*!< Error interrupt*\/$/;"	e	enum:__anon150
SPI_IT_MODF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_MODF   = (uint8_t)0x55, \/*!< Mode fault interrupt*\/$/;"	e	enum:__anon150
SPI_IT_OVR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_OVR    = (uint8_t)0x65,  \/*!< Overrun interrupt*\/$/;"	e	enum:__anon150
SPI_IT_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_RXNE   = (uint8_t)0x06, \/*!< Receive buffer not empty interrupt*\/$/;"	e	enum:__anon150
SPI_IT_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_TXE    = (uint8_t)0x17, \/*!< Transmit buffer empty interrupt*\/$/;"	e	enum:__anon150
SPI_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_IT_TypeDef;$/;"	t	typeref:enum:__anon150
SPI_IT_WKUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_IT_WKUP   = (uint8_t)0x34, \/*!< Wake-up interrupt*\/$/;"	e	enum:__anon150
SPI_Mode_Master	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Mode_Master = (uint8_t)0x04, \/*!< SPI Master configuration *\/$/;"	e	enum:__anon142
SPI_Mode_Slave	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_Mode_Slave  = (uint8_t)0x00  \/*!< SPI Slave configuration *\/$/;"	e	enum:__anon142
SPI_Mode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_Mode_TypeDef;$/;"	t	typeref:enum:__anon142
SPI_NSS_Hard	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_NSS_Hard  = (uint8_t)0x00  \/*!< Software slave management enabled *\/$/;"	e	enum:__anon140
SPI_NSS_Soft	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^  SPI_NSS_Soft  = (uint8_t)0x02, \/*!< Software slave management disabled *\/$/;"	e	enum:__anon140
SPI_NSS_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	/^} SPI_NSS_TypeDef;$/;"	t	typeref:enum:__anon140
__STM8L15x_SPI_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_spi.h	24;"	d
IS_REMAP_DMACHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	326;"	d
IS_REMAP_PIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	302;"	d
IS_RI_ANALOGSWITCH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	247;"	d
IS_RI_INPUTCAPTURE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	212;"	d
IS_RI_INPUTCAPTUREROUTING	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	219;"	d
IS_RI_IOSWITCH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	265;"	d
IS_RI_RESISTOR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	294;"	d
REMAP_DMA1Channel_ADC1ToChannel0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_ADC1ToChannel0  = ((uint8_t)0x00), \/*!< ADC1 DMA1 req\/ack mapped on DMA1 channel 0 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_ADC1ToChannel1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_ADC1ToChannel1  = ((uint8_t)0x01), \/*!< ADC1 DMA1 req\/ack mapped on DMA1 channel 1 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_ADC1ToChannel2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_ADC1ToChannel2  = ((uint8_t)0x02), \/*!< ADC1 DMA1 req\/ack mapped on DMA1 channel 2 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_ADC1ToChannel3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_ADC1ToChannel3  = ((uint8_t)0x03), \/*!< ADC1 DMA1 req\/ack mapped on DMA1 channel 3 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_TIM4ToChannel0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_TIM4ToChannel0  = ((uint8_t)0xF0), \/*!< TIM4 DMA1 req\/ack mapped on DMA1 channel 0 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_TIM4ToChannel1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_TIM4ToChannel1  = ((uint8_t)0xF4), \/*!< TIM4 DMA1 req\/ack mapped on DMA1 channel 1 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_TIM4ToChannel2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_TIM4ToChannel2  = ((uint8_t)0xF8), \/*!< TIM4 DMA1 req\/ack mapped on DMA1 channel 2 *\/$/;"	e	enum:__anon157
REMAP_DMA1Channel_TIM4ToChannel3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_DMA1Channel_TIM4ToChannel3  = ((uint8_t)0xFC)  \/*!< TIM4 DMA1 req\/ack mapped on DMA1 channel 3 *\/$/;"	e	enum:__anon157
REMAP_DMAChannel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}REMAP_DMAChannel_TypeDef;$/;"	t	typeref:enum:__anon157
REMAP_Pin_ADC1ExtTRIG1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_ADC1ExtTRIG1    = ((uint16_t)0x0201), \/*!< ADC1 External Trigger 1 (PA6) remapping to PD0 *\/$/;"	e	enum:__anon156
REMAP_Pin_CCO	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_CCO             = ((uint16_t)0x0320)  \/*!< CCO (PC4) remapping to PE2 *\/$/;"	e	enum:__anon156
REMAP_Pin_SPI1Full	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_SPI1Full        = ((uint16_t)0x0187), \/*!< SPI1 MISO- MOSI- SCK- NSS(PB7- PB6- PB5- PB4)$/;"	e	enum:__anon156
REMAP_Pin_SPI1PortF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_SPI1PortF       = ((uint16_t)0x0301), \/*!< SPI1 MISO- MOSI- SCK- NSS(PB7- PB6- PB5- PB4)$/;"	e	enum:__anon156
REMAP_Pin_SPI2Full	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_SPI2Full        = ((uint16_t)0x0220), \/*!< SPI2 MISO- MOSI- SCK- NSS(PG7- PG6- PG5- PG4)$/;"	e	enum:__anon156
REMAP_Pin_TIM23BKIN	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM23BKIN       = ((uint16_t)0x0280), \/*!< TIM2 Break Input (PA4) remapping to PG0$/;"	e	enum:__anon156
REMAP_Pin_TIM2TRIGLSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM2TRIGLSE     = ((uint16_t)0x0208), \/*!< TIM2 Trigger remapping to LSE *\/$/;"	e	enum:__anon156
REMAP_Pin_TIM2TRIGPortA	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM2TRIGPortA   = ((uint16_t)0x0202), \/*!< TIM2 Trigger (PB3) remapping to PA4 *\/$/;"	e	enum:__anon156
REMAP_Pin_TIM3Channel1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM3Channel1    = ((uint16_t)0x0308), \/*!< TIM3 Channel 1 (PB1) remapping to PI0 *\/$/;"	e	enum:__anon156
REMAP_Pin_TIM3Channel2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM3Channel2    = ((uint16_t)0x0310), \/*!< TIM3 Channel 2 (PD0) remapping to PI3 *\/$/;"	e	enum:__anon156
REMAP_Pin_TIM3TRIGLSE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM3TRIGLSE     = ((uint16_t)0x0210), \/*!< TIM3 Trigger remapping to LSE *\/$/;"	e	enum:__anon156
REMAP_Pin_TIM3TRIGPortA	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM3TRIGPortA   = ((uint16_t)0x0204), \/*!< TIM3 Trigger (PD1) remapping to PA5 *\/$/;"	e	enum:__anon156
REMAP_Pin_TIM3TRIGPortG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_TIM3TRIGPortG   = ((uint16_t)0x0240), \/*!< TIM3 Trigger (PD1) remapping to PG3 *\/$/;"	e	enum:__anon156
REMAP_Pin_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}REMAP_Pin_TypeDef;$/;"	t	typeref:enum:__anon156
REMAP_Pin_USART1Clk	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_USART1Clk       = ((uint16_t)0x014B), \/*!< USART1 CK (PC4) remapping to PA0 *\/$/;"	e	enum:__anon156
REMAP_Pin_USART1TxRxPortA	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_USART1TxRxPortA = ((uint16_t)0x011C), \/*!< USART1 Tx- Rx (PC3- PC2) remapping to PA2- PA3 *\/$/;"	e	enum:__anon156
REMAP_Pin_USART1TxRxPortC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_USART1TxRxPortC = ((uint16_t)0x012C), \/*!< USART1 Tx- Rx (PC3- PC2) remapping to PC5- PC6 *\/$/;"	e	enum:__anon156
REMAP_Pin_USART3Clk	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_USART3Clk       = ((uint16_t)0x0304), \/*!< USART3 CK (PG2) remapping to PF2 *\/$/;"	e	enum:__anon156
REMAP_Pin_USART3TxRxPortF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  REMAP_Pin_USART3TxRxPortF = ((uint16_t)0x0302), \/*!< USART3 Tx- Rx (PG1- PG0) remapping to PF0- PF1 *\/$/;"	e	enum:__anon156
RI_AnalogSwitch_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_0  = ((uint8_t) 0x10), \/*!< Analog switch 0 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_1  = ((uint8_t) 0x11), \/*!< Analog switch 1 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_10 = ((uint8_t) 0x22), \/*!< Analog switch 10 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_11 = ((uint8_t) 0x23), \/*!< Analog switch 11 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_14 = ((uint8_t) 0x26)  \/*!< Analog switch 14 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_2  = ((uint8_t) 0x12), \/*!< Analog switch 2 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_3  = ((uint8_t) 0x13), \/*!< Analog switch 3 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_4  = ((uint8_t) 0x14), \/*!< Analog switch 4 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_5  = ((uint8_t) 0x15), \/*!< Analog switch 5 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_6  = ((uint8_t) 0x16), \/*!< Analog switch 6 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_7  = ((uint8_t) 0x17), \/*!< Analog switch 7 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_8  = ((uint8_t) 0x20), \/*!< Analog switch 8 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_AnalogSwitch_9  = ((uint8_t) 0x21), \/*!< Analog switch 9 *\/$/;"	e	enum:__anon153
RI_AnalogSwitch_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}RI_AnalogSwitch_TypeDef;$/;"	t	typeref:enum:__anon153
RI_IOSwitch_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_1   = ((uint8_t) 0x10),  \/*!< Input Output Switch switch 1  *\/$/;"	e	enum:__anon154
RI_IOSwitch_10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_10  = ((uint8_t) 0x13),  \/*!< Input Output Switch switch 10 *\/$/;"	e	enum:__anon154
RI_IOSwitch_11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_11  = ((uint8_t) 0x23),  \/*!< Input Output Switch switch 11 *\/$/;"	e	enum:__anon154
RI_IOSwitch_12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_12  = ((uint8_t) 0x33),  \/*!< Input Output Switch switch 12 *\/$/;"	e	enum:__anon154
RI_IOSwitch_13	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_13  = ((uint8_t) 0x14),  \/*!< Input Output Switch switch 13 *\/$/;"	e	enum:__anon154
RI_IOSwitch_14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_14  = ((uint8_t) 0x24),  \/*!< Input Output Switch switch 14 *\/$/;"	e	enum:__anon154
RI_IOSwitch_15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_15  = ((uint8_t) 0x34),  \/*!< Input Output Switch switch 15 *\/$/;"	e	enum:__anon154
RI_IOSwitch_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_16  = ((uint8_t) 0x15),  \/*!< Input Output Switch switch 16 *\/$/;"	e	enum:__anon154
RI_IOSwitch_17	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_17  = ((uint8_t) 0x25),  \/*!< Input Output Switch switch 17 *\/$/;"	e	enum:__anon154
RI_IOSwitch_18	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_18  = ((uint8_t) 0x35),  \/*!< Input Output Switch switch 18 *\/$/;"	e	enum:__anon154
RI_IOSwitch_19	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_19  = ((uint8_t) 0x16),  \/*!< Input Output Switch switch 19 *\/$/;"	e	enum:__anon154
RI_IOSwitch_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_2   = ((uint8_t) 0x20),  \/*!< Input Output Switch switch 2  *\/$/;"	e	enum:__anon154
RI_IOSwitch_20	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_20  = ((uint8_t) 0x26),  \/*!< Input Output Switch switch 20 *\/$/;"	e	enum:__anon154
RI_IOSwitch_21	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_21  = ((uint8_t) 0x36),  \/*!< Input Output Switch switch 21 *\/$/;"	e	enum:__anon154
RI_IOSwitch_22	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_22  = ((uint8_t) 0x17),  \/*!< Input Output Switch switch 22 *\/$/;"	e	enum:__anon154
RI_IOSwitch_23	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_23  = ((uint8_t) 0x27),  \/*!< Input Output Switch switch 23 *\/$/;"	e	enum:__anon154
RI_IOSwitch_24	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_24  = ((uint8_t) 0x37)   \/*!< Input Output Switch switch 24 *\/$/;"	e	enum:__anon154
RI_IOSwitch_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_3   = ((uint8_t) 0x30),  \/*!< Input Output Switch switch 3  *\/$/;"	e	enum:__anon154
RI_IOSwitch_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_4   = ((uint8_t) 0x11),  \/*!< Input Output Switch switch 4  *\/$/;"	e	enum:__anon154
RI_IOSwitch_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_5   = ((uint8_t) 0x21),  \/*!< Input Output Switch switch 4  *\/$/;"	e	enum:__anon154
RI_IOSwitch_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_6   = ((uint8_t) 0x31),  \/*!< Input Output Switch switch 6  *\/$/;"	e	enum:__anon154
RI_IOSwitch_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_7   = ((uint8_t) 0x12),  \/*!< Input Output Switch switch 7  *\/$/;"	e	enum:__anon154
RI_IOSwitch_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_8   = ((uint8_t) 0x22),  \/*!< Input Output Switch switch 8  *\/$/;"	e	enum:__anon154
RI_IOSwitch_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_IOSwitch_9   = ((uint8_t) 0x32),  \/*!< Input Output Switch switch 9  *\/$/;"	e	enum:__anon154
RI_IOSwitch_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}RI_IOSwitch_TypeDef;$/;"	t	typeref:enum:__anon154
RI_InputCaptureRouting_0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_0  = ((uint8_t) 0x00), \/*!< TIM1 IC2 is routed to PD4, IC3 to PD5 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_1  = ((uint8_t) 0x01), \/*!< TIM1 IC2 is routed to PF0, IC3 to PF1 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_10	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_10 = ((uint8_t) 0x0A), \/*!< TIM1 IC2 is routed to PD6, IC3 to PD7 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_11	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_11 = ((uint8_t) 0x0B), \/*!< TIM1 IC2 is routed to PC0, IC3 to PC1 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_12 = ((uint8_t) 0x0C), \/*!< TIM1 IC2 is routed to PC2, IC3 to PC3 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_13	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_13 = ((uint8_t) 0x0D), \/*!< TIM1 IC2 is routed to PC4, IC3 to PC5 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_14	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_14 = ((uint8_t) 0x0E), \/*!< TIM1 IC2 is routed to PC6, IC3 to PC7 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_15	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_15 = ((uint8_t) 0x0F), \/*!< TIM1 IC2 is routed to PB0, IC3 to PB1 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_16 = ((uint8_t) 0x10), \/*!< TIM1 IC2 is routed to PB2, IC3 to PB3 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_17	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_17 = ((uint8_t) 0x11), \/*!< TIM1 IC2 is routed to PB4, IC3 to PB5 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_18	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_18 = ((uint8_t) 0x12), \/*!< TIM1 IC2 is routed to PB6, IC3 to PB7 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_19	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_19 = ((uint8_t) 0x13), \/*!< TIM1 IC2 is routed to PA0, IC3 to PA2 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_2  = ((uint8_t) 0x02), \/*!< TIM1 IC2 is routed to PF2, IC3 to PF3 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_20	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_20 = ((uint8_t) 0x14), \/*!< TIM1 IC2 is routed to PA3, IC3 to PA4 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_21	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_21 = ((uint8_t) 0x15), \/*!< TIM1 IC2 is routed to PA5, IC3 to PA6 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_22	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_22 = ((uint8_t) 0x16)  \/*!< TIM1 IC2 is routed to PA7, IC3 to PD5 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_3  = ((uint8_t) 0x03), \/*!< TIM1 IC2 is routed to PE0, IC3 to PE1 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_4  = ((uint8_t) 0x04), \/*!< TIM1 IC2 is routed to PE2, IC3 to PE3 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_5  = ((uint8_t) 0x05), \/*!< TIM1 IC2 is routed to PE4, IC3 to PE5 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_6  = ((uint8_t) 0x06), \/*!< TIM1 IC2 is routed to PE6, IC3 to PE7 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_7  = ((uint8_t) 0x07), \/*!< TIM1 IC2 is routed to PD0, IC3 to PD1 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_8  = ((uint8_t) 0x08), \/*!< TIM1 IC2 is routed to PD2, IC3 to PD3 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_9	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCaptureRouting_9  = ((uint8_t) 0x09), \/*!< TIM1 IC2 is routed to PD4, IC3 to PD5 *\/$/;"	e	enum:__anon152
RI_InputCaptureRouting_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}RI_InputCaptureRouting_TypeDef;$/;"	t	typeref:enum:__anon152
RI_InputCapture_IC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCapture_IC2 = ((uint8_t) 0x02), \/*!< TIM1 Input Capture 2 is routed *\/$/;"	e	enum:__anon151
RI_InputCapture_IC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_InputCapture_IC3 = ((uint8_t) 0x03)  \/*!< TIM1 Input Capture 3 is routed *\/$/;"	e	enum:__anon151
RI_InputCapture_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}RI_InputCapture_TypeDef;$/;"	t	typeref:enum:__anon151
RI_Resistor_10KPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_Resistor_10KPD  = ((uint8_t) 0x04),$/;"	e	enum:__anon155
RI_Resistor_10KPU	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_Resistor_10KPU  = ((uint8_t) 0x01),$/;"	e	enum:__anon155
RI_Resistor_400KPD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_Resistor_400KPD = ((uint8_t) 0x08)$/;"	e	enum:__anon155
RI_Resistor_400KPU	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^  RI_Resistor_400KPU = ((uint8_t) 0x02),$/;"	e	enum:__anon155
RI_Resistor_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	/^}RI_Resistor_TypeDef;$/;"	t	typeref:enum:__anon155
__STM8L15x_SYSCFG_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_syscfg.h	24;"	d
IS_TIM1_AUTOMATIC_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	488;"	d
IS_TIM1_BREAK_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	485;"	d
IS_TIM1_BREAK_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	482;"	d
IS_TIM1_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	452;"	d
IS_TIM1_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	600;"	d
IS_TIM1_COMPLEMENTARY_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	460;"	d
IS_TIM1_COUNTER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	464;"	d
IS_TIM1_DMABase	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	613;"	d
IS_TIM1_DMABurstLength	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	647;"	d
IS_TIM1_DMA_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	605;"	d
IS_TIM1_ENCODER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	562;"	d
IS_TIM1_EVENT_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	566;"	d
IS_TIM1_EXT_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	556;"	d
IS_TIM1_EXT_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	531;"	d
IS_TIM1_EXT_TRG_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	682;"	d
IS_TIM1_FORCED_ACTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	602;"	d
IS_TIM1_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	581;"	d
IS_TIM1_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	522;"	d
IS_TIM1_IC_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	685;"	d
IS_TIM1_IC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	505;"	d
IS_TIM1_IC_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	512;"	d
IS_TIM1_IC_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	508;"	d
IS_TIM1_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	520;"	d
IS_TIM1_LOCK_LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	491;"	d
IS_TIM1_OCIDLE_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	499;"	d
IS_TIM1_OCM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	440;"	d
IS_TIM1_OCNIDLE_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	502;"	d
IS_TIM1_OCN_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	473;"	d
IS_TIM1_OCREFERENCECECLEAR_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	517;"	d
IS_TIM1_OC_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	433;"	d
IS_TIM1_OC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	470;"	d
IS_TIM1_OPM_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	449;"	d
IS_TIM1_OSSI_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	496;"	d
IS_TIM1_OUTPUTN_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	479;"	d
IS_TIM1_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	476;"	d
IS_TIM1_PRESCALER_RELOAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	559;"	d
IS_TIM1_PWMI_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	457;"	d
IS_TIM1_SLAVE_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	595;"	d
IS_TIM1_TIXCLK_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	552;"	d
IS_TIM1_TIX_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	547;"	d
IS_TIM1_TRGO_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	568;"	d
IS_TIM1_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	536;"	d
IS_TIM1_UPDATE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	578;"	d
TIM1_AutomaticOutput_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_AutomaticOutput_Disable       = ((uint8_t)0x00)$/;"	e	enum:__anon168
TIM1_AutomaticOutput_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_AutomaticOutput_Enable        = ((uint8_t)0x40),$/;"	e	enum:__anon168
TIM1_AutomaticOutput_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_AutomaticOutput_TypeDef;$/;"	t	typeref:enum:__anon168
TIM1_BreakPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_BreakPolarity_High            = ((uint8_t)0x20)$/;"	e	enum:__anon167
TIM1_BreakPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_BreakPolarity_Low             = ((uint8_t)0x00),$/;"	e	enum:__anon167
TIM1_BreakPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_BreakPolarity_TypeDef;$/;"	t	typeref:enum:__anon167
TIM1_BreakState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_BreakState_Disable            = ((uint8_t)0x00)$/;"	e	enum:__anon166
TIM1_BreakState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_BreakState_Enable             = ((uint8_t)0x10),$/;"	e	enum:__anon166
TIM1_BreakState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_BreakState_TypeDef;$/;"	t	typeref:enum:__anon166
TIM1_Channel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_Channel_1                     = ((uint8_t)0x00),$/;"	e	enum:__anon160
TIM1_Channel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_Channel_2                     = ((uint8_t)0x01),$/;"	e	enum:__anon160
TIM1_Channel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_Channel_3                     = ((uint8_t)0x02),$/;"	e	enum:__anon160
TIM1_Channel_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_Channel_4                     = ((uint8_t)0x03)$/;"	e	enum:__anon160
TIM1_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_Channel_TypeDef;$/;"	t	typeref:enum:__anon160
TIM1_CounterMode_CenterAligned1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_CounterMode_CenterAligned1    = ((uint8_t)0x20),$/;"	e	enum:__anon161
TIM1_CounterMode_CenterAligned2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_CounterMode_CenterAligned2    = ((uint8_t)0x40),$/;"	e	enum:__anon161
TIM1_CounterMode_CenterAligned3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_CounterMode_CenterAligned3    = ((uint8_t)0x60)$/;"	e	enum:__anon161
TIM1_CounterMode_Down	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_CounterMode_Down              = ((uint8_t)0x10),$/;"	e	enum:__anon161
TIM1_CounterMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_CounterMode_TypeDef;$/;"	t	typeref:enum:__anon161
TIM1_CounterMode_Up	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_CounterMode_Up                = ((uint8_t)0x00),$/;"	e	enum:__anon161
TIM1_DMABase_ARRH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_ARRH     = ((uint8_t)0x13),$/;"	e	enum:__anon191
TIM1_DMABase_ARRL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_ARRL     = ((uint8_t)0x14),$/;"	e	enum:__anon191
TIM1_DMABase_BKR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_BKR      = ((uint8_t)0x1E),$/;"	e	enum:__anon191
TIM1_DMABase_CCER1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCER1    = ((uint8_t)0x0D),$/;"	e	enum:__anon191
TIM1_DMABase_CCER2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCER2    = ((uint8_t)0x0E),$/;"	e	enum:__anon191
TIM1_DMABase_CCMR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCMR1    = ((uint8_t)0x09),$/;"	e	enum:__anon191
TIM1_DMABase_CCMR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCMR2    = ((uint8_t)0x0A),$/;"	e	enum:__anon191
TIM1_DMABase_CCMR3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCMR3    = ((uint8_t)0x0B),$/;"	e	enum:__anon191
TIM1_DMABase_CCMR4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCMR4    = ((uint8_t)0x0C),$/;"	e	enum:__anon191
TIM1_DMABase_CCR1H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR1H    = ((uint8_t)0x16),$/;"	e	enum:__anon191
TIM1_DMABase_CCR1L	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR1L    = ((uint8_t)0x17),$/;"	e	enum:__anon191
TIM1_DMABase_CCR2H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR2H    = ((uint8_t)0x18),$/;"	e	enum:__anon191
TIM1_DMABase_CCR2L	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR2L    = ((uint8_t)0x19),$/;"	e	enum:__anon191
TIM1_DMABase_CCR3H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR3H    = ((uint8_t)0x1A),$/;"	e	enum:__anon191
TIM1_DMABase_CCR3L	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR3L    = ((uint8_t)0x1B),$/;"	e	enum:__anon191
TIM1_DMABase_CCR4H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR4H    = ((uint8_t)0x1C),$/;"	e	enum:__anon191
TIM1_DMABase_CCR4L	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CCR4L    = ((uint8_t)0x1D),$/;"	e	enum:__anon191
TIM1_DMABase_CNTH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CNTH     = ((uint8_t)0x0F),$/;"	e	enum:__anon191
TIM1_DMABase_CNTL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CNTL     = ((uint8_t)0x10),$/;"	e	enum:__anon191
TIM1_DMABase_CR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CR1      = ((uint8_t)0x00),$/;"	e	enum:__anon191
TIM1_DMABase_CR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_CR2      = ((uint8_t)0x01),$/;"	e	enum:__anon191
TIM1_DMABase_DER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_DER      = ((uint8_t)0x04),$/;"	e	enum:__anon191
TIM1_DMABase_DTR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_DTR      = ((uint8_t)0x1F)$/;"	e	enum:__anon191
TIM1_DMABase_EGR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_EGR      = ((uint8_t)0x08),$/;"	e	enum:__anon191
TIM1_DMABase_ETR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_ETR      = ((uint8_t)0x03),$/;"	e	enum:__anon191
TIM1_DMABase_IER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_IER      = ((uint8_t)0x05),$/;"	e	enum:__anon191
TIM1_DMABase_PSCH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_PSCH     = ((uint8_t)0x11),$/;"	e	enum:__anon191
TIM1_DMABase_PSCL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_PSCL     = ((uint8_t)0x12),$/;"	e	enum:__anon191
TIM1_DMABase_RCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_RCR      = ((uint8_t)0x15),$/;"	e	enum:__anon191
TIM1_DMABase_SMCR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_SMCR     = ((uint8_t)0x02),$/;"	e	enum:__anon191
TIM1_DMABase_SR1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_SR1      = ((uint8_t)0x06),$/;"	e	enum:__anon191
TIM1_DMABase_SR2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABase_SR2      = ((uint8_t)0x07),$/;"	e	enum:__anon191
TIM1_DMABase_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^} TIM1_DMABase_TypeDef;$/;"	t	typeref:enum:__anon191
TIM1_DMABurstLength_10Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_10Byte     = ((uint8_t)0x09),$/;"	e	enum:__anon192
TIM1_DMABurstLength_11Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_11Byte     = ((uint8_t)0x0A),$/;"	e	enum:__anon192
TIM1_DMABurstLength_12Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_12Byte     = ((uint8_t)0x0B),$/;"	e	enum:__anon192
TIM1_DMABurstLength_13Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_13Byte     = ((uint8_t)0x0C),$/;"	e	enum:__anon192
TIM1_DMABurstLength_14Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_14Byte     = ((uint8_t)0x0D),$/;"	e	enum:__anon192
TIM1_DMABurstLength_15Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_15Byte     = ((uint8_t)0x0E),$/;"	e	enum:__anon192
TIM1_DMABurstLength_16Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_16Byte     = ((uint8_t)0x0F),$/;"	e	enum:__anon192
TIM1_DMABurstLength_17Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_17Byte     = ((uint8_t)0x10),$/;"	e	enum:__anon192
TIM1_DMABurstLength_18Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_18Byte     = ((uint8_t)0x11),$/;"	e	enum:__anon192
TIM1_DMABurstLength_19Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_19Byte     = ((uint8_t)0x12),$/;"	e	enum:__anon192
TIM1_DMABurstLength_1Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_1Byte      = ((uint8_t)0x00),$/;"	e	enum:__anon192
TIM1_DMABurstLength_20Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_20Byte     = ((uint8_t)0x13),$/;"	e	enum:__anon192
TIM1_DMABurstLength_21Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_21Byte     = ((uint8_t)0x14),$/;"	e	enum:__anon192
TIM1_DMABurstLength_22Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_22Byte     = ((uint8_t)0x15),$/;"	e	enum:__anon192
TIM1_DMABurstLength_23Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_23Byte     = ((uint8_t)0x16),$/;"	e	enum:__anon192
TIM1_DMABurstLength_24Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_24Byte     = ((uint8_t)0x17),$/;"	e	enum:__anon192
TIM1_DMABurstLength_25Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_25Byte     = ((uint8_t)0x18),$/;"	e	enum:__anon192
TIM1_DMABurstLength_26Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_26Byte     = ((uint8_t)0x19),$/;"	e	enum:__anon192
TIM1_DMABurstLength_27Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_27Byte     = ((uint8_t)0x1A),$/;"	e	enum:__anon192
TIM1_DMABurstLength_28Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_28Byte     = ((uint8_t)0x1B),$/;"	e	enum:__anon192
TIM1_DMABurstLength_29Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_29Byte     = ((uint8_t)0x1C),$/;"	e	enum:__anon192
TIM1_DMABurstLength_2Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_2Byte      = ((uint8_t)0x01),$/;"	e	enum:__anon192
TIM1_DMABurstLength_30Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_30Byte     = ((uint8_t)0x1D),$/;"	e	enum:__anon192
TIM1_DMABurstLength_31Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_31Byte     = ((uint8_t)0x1E),$/;"	e	enum:__anon192
TIM1_DMABurstLength_32Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_32Byte     = ((uint8_t)0x1F)$/;"	e	enum:__anon192
TIM1_DMABurstLength_3Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_3Byte      = ((uint8_t)0x02),$/;"	e	enum:__anon192
TIM1_DMABurstLength_4Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_4Byte      = ((uint8_t)0x03),$/;"	e	enum:__anon192
TIM1_DMABurstLength_5Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_5Byte      = ((uint8_t)0x04),$/;"	e	enum:__anon192
TIM1_DMABurstLength_6Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_6Byte      = ((uint8_t)0x05),$/;"	e	enum:__anon192
TIM1_DMABurstLength_7Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_7Byte      = ((uint8_t)0x06),$/;"	e	enum:__anon192
TIM1_DMABurstLength_8Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_8Byte      = ((uint8_t)0x07),$/;"	e	enum:__anon192
TIM1_DMABurstLength_9Byte	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMABurstLength_9Byte      = ((uint8_t)0x08),$/;"	e	enum:__anon192
TIM1_DMABurstLength_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^} TIM1_DMABurstLength_TypeDef;$/;"	t	typeref:enum:__anon192
TIM1_DMASource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMASource_CC1        = ((uint8_t)0x02),  \/*!< TIM1 DMA CC1 Request*\/$/;"	e	enum:__anon190
TIM1_DMASource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMASource_CC2        = ((uint8_t)0x04),  \/*!< TIM1 DMA CC2 Request*\/$/;"	e	enum:__anon190
TIM1_DMASource_CC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMASource_CC3        = ((uint8_t)0x08),  \/*!< TIM1 DMA CC3 Request*\/$/;"	e	enum:__anon190
TIM1_DMASource_CC4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMASource_CC4        = ((uint8_t)0x10),  \/*!< TIM1 DMA CC4 Request*\/$/;"	e	enum:__anon190
TIM1_DMASource_COM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMASource_COM        = ((uint8_t)0x20)  \/*!< TIM1 DMA COM Req *\/$/;"	e	enum:__anon190
TIM1_DMASource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^} TIM1_DMASource_TypeDef;$/;"	t	typeref:enum:__anon190
TIM1_DMASource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_DMASource_Update     = ((uint8_t)0x01),  \/*!< TIM1 DMA Update Request*\/$/;"	e	enum:__anon190
TIM1_EncoderMode_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EncoderMode_TI1               = ((uint8_t)0x01),$/;"	e	enum:__anon183
TIM1_EncoderMode_TI12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EncoderMode_TI12              = ((uint8_t)0x03)$/;"	e	enum:__anon183
TIM1_EncoderMode_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EncoderMode_TI2               = ((uint8_t)0x02),$/;"	e	enum:__anon183
TIM1_EncoderMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_EncoderMode_TypeDef;$/;"	t	typeref:enum:__anon183
TIM1_EventSource_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_Break             = ((uint8_t)0x80)$/;"	e	enum:__anon184
TIM1_EventSource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_CC1               = ((uint8_t)0x02),$/;"	e	enum:__anon184
TIM1_EventSource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_CC2               = ((uint8_t)0x04),$/;"	e	enum:__anon184
TIM1_EventSource_CC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_CC3               = ((uint8_t)0x08),$/;"	e	enum:__anon184
TIM1_EventSource_CC4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_CC4               = ((uint8_t)0x10),$/;"	e	enum:__anon184
TIM1_EventSource_COM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_COM               = ((uint8_t)0x20),$/;"	e	enum:__anon184
TIM1_EventSource_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_Trigger           = ((uint8_t)0x40),$/;"	e	enum:__anon184
TIM1_EventSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_EventSource_TypeDef;$/;"	t	typeref:enum:__anon184
TIM1_EventSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_EventSource_Update            = ((uint8_t)0x01),$/;"	e	enum:__anon184
TIM1_ExtTRGPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ExtTRGPSC_DIV2                = ((uint8_t)0x10),$/;"	e	enum:__anon178
TIM1_ExtTRGPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ExtTRGPSC_DIV4                = ((uint8_t)0x20),$/;"	e	enum:__anon178
TIM1_ExtTRGPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ExtTRGPSC_DIV8                = ((uint8_t)0x30)$/;"	e	enum:__anon178
TIM1_ExtTRGPSC_OFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ExtTRGPSC_OFF                 = ((uint8_t)0x00),$/;"	e	enum:__anon178
TIM1_ExtTRGPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_ExtTRGPSC_TypeDef;$/;"	t	typeref:enum:__anon178
TIM1_ExtTRGPolarity_Inverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ExtTRGPolarity_Inverted       = ((uint8_t)0x80),$/;"	e	enum:__anon181
TIM1_ExtTRGPolarity_NonInverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ExtTRGPolarity_NonInverted    = ((uint8_t)0x00)$/;"	e	enum:__anon181
TIM1_ExtTRGPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_ExtTRGPolarity_TypeDef;$/;"	t	typeref:enum:__anon181
TIM1_FLAG_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_Break                    = ((uint16_t)0x0080),$/;"	e	enum:__anon188
TIM1_FLAG_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC1                      = ((uint16_t)0x0002),$/;"	e	enum:__anon188
TIM1_FLAG_CC1OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC1OF                    = ((uint16_t)0x0200),$/;"	e	enum:__anon188
TIM1_FLAG_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC2                      = ((uint16_t)0x0004),$/;"	e	enum:__anon188
TIM1_FLAG_CC2OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC2OF                    = ((uint16_t)0x0400),$/;"	e	enum:__anon188
TIM1_FLAG_CC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC3                      = ((uint16_t)0x0008),$/;"	e	enum:__anon188
TIM1_FLAG_CC3OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC3OF                    = ((uint16_t)0x0800),$/;"	e	enum:__anon188
TIM1_FLAG_CC4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC4                      = ((uint16_t)0x0010),$/;"	e	enum:__anon188
TIM1_FLAG_CC4OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_CC4OF                    = ((uint16_t)0x1000)$/;"	e	enum:__anon188
TIM1_FLAG_COM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_COM                      = ((uint16_t)0x0020),$/;"	e	enum:__anon188
TIM1_FLAG_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_Trigger                  = ((uint16_t)0x0040),$/;"	e	enum:__anon188
TIM1_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_FLAG_TypeDef;$/;"	t	typeref:enum:__anon188
TIM1_FLAG_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_FLAG_Update                   = ((uint16_t)0x0001),$/;"	e	enum:__anon188
TIM1_ForcedAction_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ForcedAction_Active           = ((uint8_t)0x50),$/;"	e	enum:__anon189
TIM1_ForcedAction_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ForcedAction_Inactive         = ((uint8_t)0x40)$/;"	e	enum:__anon189
TIM1_ForcedAction_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_ForcedAction_TypeDef;$/;"	t	typeref:enum:__anon189
TIM1_ICPSC_DIV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICPSC_DIV1                    = ((uint8_t)0x00),$/;"	e	enum:__anon175
TIM1_ICPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICPSC_DIV2                    = ((uint8_t)0x04),$/;"	e	enum:__anon175
TIM1_ICPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICPSC_DIV4                    = ((uint8_t)0x08),$/;"	e	enum:__anon175
TIM1_ICPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICPSC_DIV8                    = ((uint8_t)0x0C)$/;"	e	enum:__anon175
TIM1_ICPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_ICPSC_TypeDef;$/;"	t	typeref:enum:__anon175
TIM1_ICPolarity_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICPolarity_Falling           = ((uint8_t)0x01)$/;"	e	enum:__anon173
TIM1_ICPolarity_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICPolarity_Rising            = ((uint8_t)0x00),$/;"	e	enum:__anon173
TIM1_ICPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_ICPolarity_TypeDef;$/;"	t	typeref:enum:__anon173
TIM1_ICSelection_DirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICSelection_DirectTI          = ((uint8_t)0x01),$/;"	e	enum:__anon174
TIM1_ICSelection_IndirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICSelection_IndirectTI        = ((uint8_t)0x02),$/;"	e	enum:__anon174
TIM1_ICSelection_TRGI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_ICSelection_TRGI              = ((uint8_t)0x03)$/;"	e	enum:__anon174
TIM1_ICSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_ICSelection_TypeDef;$/;"	t	typeref:enum:__anon174
TIM1_IT_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_Break                      = ((uint8_t)0x80)$/;"	e	enum:__anon177
TIM1_IT_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_CC1                        = ((uint8_t)0x02),$/;"	e	enum:__anon177
TIM1_IT_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_CC2                        = ((uint8_t)0x04),$/;"	e	enum:__anon177
TIM1_IT_CC3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_CC3                        = ((uint8_t)0x08),$/;"	e	enum:__anon177
TIM1_IT_CC4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_CC4                        = ((uint8_t)0x10),$/;"	e	enum:__anon177
TIM1_IT_COM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_COM                        = ((uint8_t)0x20),$/;"	e	enum:__anon177
TIM1_IT_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_Trigger                    = ((uint8_t)0x40),$/;"	e	enum:__anon177
TIM1_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_IT_TypeDef;$/;"	t	typeref:enum:__anon177
TIM1_IT_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_IT_Update                     = ((uint8_t)0x01),$/;"	e	enum:__anon177
TIM1_LockLevel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_LockLevel_1                   = ((uint8_t)0x01),$/;"	e	enum:__anon169
TIM1_LockLevel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_LockLevel_2                   = ((uint8_t)0x02),$/;"	e	enum:__anon169
TIM1_LockLevel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_LockLevel_3                   = ((uint8_t)0x03)$/;"	e	enum:__anon169
TIM1_LockLevel_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_LockLevel_Off                 = ((uint8_t)0x00),$/;"	e	enum:__anon169
TIM1_LockLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_LockLevel_TypeDef;$/;"	t	typeref:enum:__anon169
TIM1_OCIdleState_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCIdleState_Reset             = ((uint8_t)0x00)$/;"	e	enum:__anon171
TIM1_OCIdleState_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCIdleState_Set               = ((uint8_t)0x55),$/;"	e	enum:__anon171
TIM1_OCIdleState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OCIdleState_TypeDef;$/;"	t	typeref:enum:__anon171
TIM1_OCMode_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCMode_Active     = ((uint8_t)0x10),$/;"	e	enum:__anon158
TIM1_OCMode_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCMode_Inactive   = ((uint8_t)0x20),$/;"	e	enum:__anon158
TIM1_OCMode_PWM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCMode_PWM1       = ((uint8_t)0x60),$/;"	e	enum:__anon158
TIM1_OCMode_PWM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCMode_PWM2       = ((uint8_t)0x70)$/;"	e	enum:__anon158
TIM1_OCMode_Timing	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCMode_Timing     = ((uint8_t)0x00),$/;"	e	enum:__anon158
TIM1_OCMode_Toggle	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCMode_Toggle     = ((uint8_t)0x30),$/;"	e	enum:__anon158
TIM1_OCMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OCMode_TypeDef;$/;"	t	typeref:enum:__anon158
TIM1_OCNIdleState_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCNIdleState_Reset           = ((uint8_t)0x00)$/;"	e	enum:__anon172
TIM1_OCNIdleState_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCNIdleState_Set             = ((uint8_t)0x2A),$/;"	e	enum:__anon172
TIM1_OCNIdleState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OCNIdleState_TypeDef;$/;"	t	typeref:enum:__anon172
TIM1_OCNPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCNPolarity_High              = ((uint8_t)0x00),$/;"	e	enum:__anon163
TIM1_OCNPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCNPolarity_Low               = ((uint8_t)0x88)$/;"	e	enum:__anon163
TIM1_OCNPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OCNPolarity_TypeDef;$/;"	t	typeref:enum:__anon163
TIM1_OCPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCPolarity_High               = ((uint8_t)0x00),$/;"	e	enum:__anon162
TIM1_OCPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCPolarity_Low                = ((uint8_t)0x22)$/;"	e	enum:__anon162
TIM1_OCPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OCPolarity_TypeDef;$/;"	t	typeref:enum:__anon162
TIM1_OCReferenceClear_ETRF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCReferenceClear_ETRF       = ((uint8_t)0x08),$/;"	e	enum:__anon176
TIM1_OCReferenceClear_OCREFCLR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OCReferenceClear_OCREFCLR   = ((uint8_t)0x00)$/;"	e	enum:__anon176
TIM1_OCReferenceClear_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^TIM1_OCReferenceClear_TypeDef;$/;"	t	typeref:enum:__anon176
TIM1_OPMode_Repetitive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OPMode_Repetitive             = ((uint8_t)0x00)$/;"	e	enum:__anon159
TIM1_OPMode_Single	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OPMode_Single                 = ((uint8_t)0x01),$/;"	e	enum:__anon159
TIM1_OPMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OPMode_TypeDef;$/;"	t	typeref:enum:__anon159
TIM1_OSSIState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OSSIState_Disable             = ((uint8_t)0x00)$/;"	e	enum:__anon170
TIM1_OSSIState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OSSIState_Enable              = ((uint8_t)0x04),$/;"	e	enum:__anon170
TIM1_OSSIState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OSSIState_TypeDef;$/;"	t	typeref:enum:__anon170
TIM1_OutputNState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OutputNState_Disable = ((uint8_t)0x00),$/;"	e	enum:__anon165
TIM1_OutputNState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OutputNState_Enable  = ((uint8_t)0x44)$/;"	e	enum:__anon165
TIM1_OutputNState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^} TIM1_OutputNState_TypeDef;$/;"	t	typeref:enum:__anon165
TIM1_OutputState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OutputState_Disable           = ((uint8_t)0x00),$/;"	e	enum:__anon164
TIM1_OutputState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_OutputState_Enable            = ((uint8_t)0x11)$/;"	e	enum:__anon164
TIM1_OutputState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_OutputState_TypeDef;$/;"	t	typeref:enum:__anon164
TIM1_PSCReloadMode_Immediate	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_PSCReloadMode_Immediate       = ((uint8_t)0x01)$/;"	e	enum:__anon182
TIM1_PSCReloadMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_PSCReloadMode_TypeDef;$/;"	t	typeref:enum:__anon182
TIM1_PSCReloadMode_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_PSCReloadMode_Update          = ((uint8_t)0x00),$/;"	e	enum:__anon182
TIM1_SlaveMode_External1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_SlaveMode_External1           = ((uint8_t)0x07)$/;"	e	enum:__anon187
TIM1_SlaveMode_Gated	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_SlaveMode_Gated               = ((uint8_t)0x05),$/;"	e	enum:__anon187
TIM1_SlaveMode_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_SlaveMode_Reset               = ((uint8_t)0x04),$/;"	e	enum:__anon187
TIM1_SlaveMode_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_SlaveMode_Trigger             = ((uint8_t)0x06),$/;"	e	enum:__anon187
TIM1_SlaveMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_SlaveMode_TypeDef;$/;"	t	typeref:enum:__anon187
TIM1_TIxExternalCLK1Source_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TIxExternalCLK1Source_TI1     = ((uint8_t)0x50),$/;"	e	enum:__anon180
TIM1_TIxExternalCLK1Source_TI1ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TIxExternalCLK1Source_TI1ED   = ((uint8_t)0x40),$/;"	e	enum:__anon180
TIM1_TIxExternalCLK1Source_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TIxExternalCLK1Source_TI2     = ((uint8_t)0x60)$/;"	e	enum:__anon180
TIM1_TIxExternalCLK1Source_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_TIxExternalCLK1Source_TypeDef;$/;"	t	typeref:enum:__anon180
TIM1_TRGOSource_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_Enable             = ((uint8_t)0x10),$/;"	e	enum:__anon186
TIM1_TRGOSource_OC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_OC1                = ((uint8_t)0x30),$/;"	e	enum:__anon186
TIM1_TRGOSource_OC1REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_OC1REF             = ((uint8_t)0x40),$/;"	e	enum:__anon186
TIM1_TRGOSource_OC2REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_OC2REF             = ((uint8_t)0x50),$/;"	e	enum:__anon186
TIM1_TRGOSource_OC3REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_OC3REF             = ((uint8_t)0x60),$/;"	e	enum:__anon186
TIM1_TRGOSource_OC4REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_OC4REF             = ((uint8_t)0x70)$/;"	e	enum:__anon186
TIM1_TRGOSource_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_Reset              = ((uint8_t)0x00),$/;"	e	enum:__anon186
TIM1_TRGOSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_TRGOSource_TypeDef;$/;"	t	typeref:enum:__anon186
TIM1_TRGOSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGOSource_Update             = ((uint8_t)0x20),$/;"	e	enum:__anon186
TIM1_TRGSelection_ETRF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_ETRF             = ((uint8_t)0x70)$/;"	e	enum:__anon179
TIM1_TRGSelection_TI1FP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TI1FP1           = ((uint8_t)0x50),$/;"	e	enum:__anon179
TIM1_TRGSelection_TI1F_ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TI1F_ED          = ((uint8_t)0x40),$/;"	e	enum:__anon179
TIM1_TRGSelection_TI2FP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TI2FP2           = ((uint8_t)0x60),$/;"	e	enum:__anon179
TIM1_TRGSelection_TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TIM2             = ((uint8_t)0x30),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon179
TIM1_TRGSelection_TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TIM3             = ((uint8_t)0x20),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon179
TIM1_TRGSelection_TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TIM4             = ((uint8_t)0x00),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon179
TIM1_TRGSelection_TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_TRGSelection_TIM5             = ((uint8_t)0x10),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon179
TIM1_TRGSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_TRGSelection_TypeDef;$/;"	t	typeref:enum:__anon179
TIM1_UpdateSource_Global	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_UpdateSource_Global           = ((uint8_t)0x00),$/;"	e	enum:__anon185
TIM1_UpdateSource_Regular	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^  TIM1_UpdateSource_Regular          = ((uint8_t)0x01)$/;"	e	enum:__anon185
TIM1_UpdateSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	/^}TIM1_UpdateSource_TypeDef;$/;"	t	typeref:enum:__anon185
__STM8L15x_TIM1_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim1.h	24;"	d
IS_TIM2_AUTOMATIC_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	470;"	d
IS_TIM2_BREAK_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	463;"	d
IS_TIM2_BREAK_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	456;"	d
IS_TIM2_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	425;"	d
IS_TIM2_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	648;"	d
IS_TIM2_COUNTER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	432;"	d
IS_TIM2_DMA_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	655;"	d
IS_TIM2_ENCODER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	599;"	d
IS_TIM2_EVENT_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	607;"	d
IS_TIM2_EXT_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	586;"	d
IS_TIM2_EXT_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	579;"	d
IS_TIM2_EXT_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	544;"	d
IS_TIM2_FORCED_ACTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	378;"	d
IS_TIM2_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	639;"	d
IS_TIM2_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	534;"	d
IS_TIM2_IC_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	525;"	d
IS_TIM2_IC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	501;"	d
IS_TIM2_IC_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	516;"	d
IS_TIM2_IC_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	508;"	d
IS_TIM2_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	531;"	d
IS_TIM2_LOCK_LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	477;"	d
IS_TIM2_OCIDLE_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	493;"	d
IS_TIM2_OCM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	406;"	d
IS_TIM2_OC_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	398;"	d
IS_TIM2_OC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	442;"	d
IS_TIM2_OPM_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	418;"	d
IS_TIM2_OSSI_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	486;"	d
IS_TIM2_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	449;"	d
IS_TIM2_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	385;"	d
IS_TIM2_PRESCALER_RELOAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	592;"	d
IS_TIM2_SLAVE_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	631;"	d
IS_TIM2_TIXCLK_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	571;"	d
IS_TIM2_TIX_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	563;"	d
IS_TIM2_TRGO_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	621;"	d
IS_TIM2_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	552;"	d
IS_TIM2_UPDATE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	614;"	d
TIM2_AutomaticOutput_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_AutomaticOutput_Disable   = ((uint8_t)0x00)    \/*!< Automatic Output option disabled *\/$/;"	e	enum:__anon203
TIM2_AutomaticOutput_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_AutomaticOutput_Enable    = ((uint8_t)0x40),   \/*!< Automatic Output option enabled *\/$/;"	e	enum:__anon203
TIM2_AutomaticOutput_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_AutomaticOutput_TypeDef;$/;"	t	typeref:enum:__anon203
TIM2_BreakPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_BreakPolarity_High  = ((uint8_t)0x20),  \/*!< if Break, channel polarity = High *\/$/;"	e	enum:__anon202
TIM2_BreakPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_BreakPolarity_Low   = ((uint8_t)0x00)   \/*!< if Break, channel polarity = Low *\/$/;"	e	enum:__anon202
TIM2_BreakPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_BreakPolarity_TypeDef;$/;"	t	typeref:enum:__anon202
TIM2_BreakState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_BreakState_Disable  = ((uint8_t)0x00),   \/*!< Break State disabled (break option disabled) *\/$/;"	e	enum:__anon201
TIM2_BreakState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_BreakState_Enable   = ((uint8_t)0x10)    \/*!< Break State enabled (break option enabled) *\/$/;"	e	enum:__anon201
TIM2_BreakState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_BreakState_TypeDef;$/;"	t	typeref:enum:__anon201
TIM2_Channel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Channel_1  = ((uint8_t)0x00),  \/*!< Channel 1*\/$/;"	e	enum:__anon197
TIM2_Channel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Channel_2  = ((uint8_t)0x01)   \/*!< Channel 2*\/$/;"	e	enum:__anon197
TIM2_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_Channel_TypeDef;$/;"	t	typeref:enum:__anon197
TIM2_CounterMode_CenterAligned1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_CounterMode_CenterAligned1   = ((uint8_t)0x20),   \/*!< Counter Central aligned Mode 1 *\/$/;"	e	enum:__anon198
TIM2_CounterMode_CenterAligned2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_CounterMode_CenterAligned2   = ((uint8_t)0x40),   \/*!< Counter Central aligned Mode 2 *\/$/;"	e	enum:__anon198
TIM2_CounterMode_CenterAligned3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_CounterMode_CenterAligned3   = ((uint8_t)0x60)    \/*!< Counter Central aligned Mode 3 *\/$/;"	e	enum:__anon198
TIM2_CounterMode_Down	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_CounterMode_Down             = ((uint8_t)0x10),   \/*!< Counter Down Mode *\/$/;"	e	enum:__anon198
TIM2_CounterMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_CounterMode_TypeDef;$/;"	t	typeref:enum:__anon198
TIM2_CounterMode_Up	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_CounterMode_Up               = ((uint8_t)0x00),   \/*!< Counter Up Mode *\/$/;"	e	enum:__anon198
TIM2_DMASource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_DMASource_CC1      = ((uint8_t)0x02),  \/*!< TIM2 DMA CC1 Request*\/$/;"	e	enum:__anon222
TIM2_DMASource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_DMASource_CC2      = ((uint8_t)0x04)   \/*!< TIM2 DMA CC2 Request*\/$/;"	e	enum:__anon222
TIM2_DMASource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_DMASource_TypeDef;$/;"	t	typeref:enum:__anon222
TIM2_DMASource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_DMASource_Update   = ((uint8_t)0x01),  \/*!< TIM2 DMA Update Request*\/$/;"	e	enum:__anon222
TIM2_EncoderMode_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EncoderMode_TI1     = ((uint8_t)0x01),   \/*!< Encoder mode 1*\/$/;"	e	enum:__anon216
TIM2_EncoderMode_TI12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EncoderMode_TI12    = ((uint8_t)0x03)    \/*!< Encoder mode 3*\/$/;"	e	enum:__anon216
TIM2_EncoderMode_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EncoderMode_TI2     = ((uint8_t)0x02),   \/*!< Encoder mode 2*\/$/;"	e	enum:__anon216
TIM2_EncoderMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_EncoderMode_TypeDef;$/;"	t	typeref:enum:__anon216
TIM2_EventSource_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EventSource_Break    = ((uint8_t)0x80)    \/*!< Break Event*\/$/;"	e	enum:__anon217
TIM2_EventSource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EventSource_CC1      = ((uint8_t)0x02),   \/*!< Capture Compare Channel1  Event*\/$/;"	e	enum:__anon217
TIM2_EventSource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EventSource_CC2      = ((uint8_t)0x04),   \/*!< Capture Compare Channel2 Event*\/$/;"	e	enum:__anon217
TIM2_EventSource_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EventSource_Trigger  = ((uint8_t)0x40),   \/*!< Trigger Event*\/$/;"	e	enum:__anon217
TIM2_EventSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_EventSource_TypeDef;$/;"	t	typeref:enum:__anon217
TIM2_EventSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_EventSource_Update   = ((uint8_t)0x01),   \/*!< Update Event*\/$/;"	e	enum:__anon217
TIM2_ExtTRGPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ExtTRGPSC_DIV2  = ((uint8_t)0x10),   \/*!< External Trigger prescaler = 2 (ETRP frequency divided by 2) *\/$/;"	e	enum:__anon211
TIM2_ExtTRGPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ExtTRGPSC_DIV4  = ((uint8_t)0x20),   \/*!< External Trigger prescaler = 4 (ETRP frequency divided by 4) *\/$/;"	e	enum:__anon211
TIM2_ExtTRGPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ExtTRGPSC_DIV8  = ((uint8_t)0x30)    \/*!< External Trigger prescaler = 8 (ETRP frequency divided by 8) *\/$/;"	e	enum:__anon211
TIM2_ExtTRGPSC_OFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ExtTRGPSC_OFF   = ((uint8_t)0x00),   \/*!< No External Trigger prescaler  *\/$/;"	e	enum:__anon211
TIM2_ExtTRGPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_ExtTRGPSC_TypeDef;$/;"	t	typeref:enum:__anon211
TIM2_ExtTRGPolarity_Inverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ExtTRGPolarity_Inverted     = ((uint8_t)0x80),   \/*!< External Trigger Polarity = inverted *\/$/;"	e	enum:__anon214
TIM2_ExtTRGPolarity_NonInverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ExtTRGPolarity_NonInverted  = ((uint8_t)0x00)    \/*!< External Trigger Polarity = non inverted *\/$/;"	e	enum:__anon214
TIM2_ExtTRGPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_ExtTRGPolarity_TypeDef;$/;"	t	typeref:enum:__anon214
TIM2_FLAG_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_Break    = ((uint16_t)0x0080),  \/*!< Break Flag *\/$/;"	e	enum:__anon221
TIM2_FLAG_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_CC1      = ((uint16_t)0x0002),  \/*!< Capture compare 1 Flag *\/$/;"	e	enum:__anon221
TIM2_FLAG_CC1OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_CC1OF    = ((uint16_t)0x0200),  \/*!< Capture compare 1 over capture Flag *\/$/;"	e	enum:__anon221
TIM2_FLAG_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_CC2      = ((uint16_t)0x0004),  \/*!< Capture compare 2 Flag *\/$/;"	e	enum:__anon221
TIM2_FLAG_CC2OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_CC2OF    = ((uint16_t)0x0400)   \/*!< Capture compare 2 over capture Flag *\/$/;"	e	enum:__anon221
TIM2_FLAG_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_Trigger  = ((uint16_t)0x0040),  \/*!< Trigger Flag *\/$/;"	e	enum:__anon221
TIM2_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_FLAG_TypeDef;$/;"	t	typeref:enum:__anon221
TIM2_FLAG_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_FLAG_Update   = ((uint16_t)0x0001),  \/*!< Update Flag *\/$/;"	e	enum:__anon221
TIM2_ForcedAction_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ForcedAction_Active   = ((uint8_t)0x50),   \/*!< Output Reference is forced low *\/$/;"	e	enum:__anon193
TIM2_ForcedAction_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ForcedAction_Inactive = ((uint8_t)0x40)    \/*!< Output Reference is forced high *\/$/;"	e	enum:__anon193
TIM2_ForcedAction_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^TIM2_ForcedAction_TypeDef;$/;"	t	typeref:enum:__anon193
TIM2_ICPSC_DIV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICPSC_DIV1  = ((uint8_t)0x00),  \/*!< Input Capture Prescaler = 1 (one capture every 1 event) *\/$/;"	e	enum:__anon209
TIM2_ICPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICPSC_DIV2  = ((uint8_t)0x04),  \/*!< Input Capture Prescaler = 2 (one capture every 2 events) *\/$/;"	e	enum:__anon209
TIM2_ICPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICPSC_DIV4  = ((uint8_t)0x08),  \/*!< Input Capture Prescaler = 4 (one capture every 4 events) *\/$/;"	e	enum:__anon209
TIM2_ICPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICPSC_DIV8  = ((uint8_t)0x0C)   \/*!< Input Capture Prescaler = 8 (one capture every 8 events) *\/$/;"	e	enum:__anon209
TIM2_ICPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_ICPSC_TypeDef;$/;"	t	typeref:enum:__anon209
TIM2_ICPolarity_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICPolarity_Falling  = ((uint8_t)0x01)    \/*!< Input Capture on Falling Edge*\/$/;"	e	enum:__anon207
TIM2_ICPolarity_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICPolarity_Rising   = ((uint8_t)0x00),   \/*!< Input Capture on Rising Edge*\/$/;"	e	enum:__anon207
TIM2_ICPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_ICPolarity_TypeDef;$/;"	t	typeref:enum:__anon207
TIM2_ICSelection_DirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICSelection_DirectTI    = ((uint8_t)0x01),   \/*!< Input Capture mapped on the direct input*\/$/;"	e	enum:__anon208
TIM2_ICSelection_IndirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICSelection_IndirectTI  = ((uint8_t)0x02),   \/*!< Input Capture mapped on the indirect input*\/$/;"	e	enum:__anon208
TIM2_ICSelection_TRGI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_ICSelection_TRGI        = ((uint8_t)0x03)    \/*!< Input Capture mapped on the Trigger Input*\/$/;"	e	enum:__anon208
TIM2_ICSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_ICSelection_TypeDef;$/;"	t	typeref:enum:__anon208
TIM2_IT_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_IT_Break    = ((uint8_t)0x80)    \/*!< Break Interrupt*\/$/;"	e	enum:__anon210
TIM2_IT_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_IT_CC1      = ((uint8_t)0x02),   \/*!< Capture Compare Channel1 Interrupt*\/$/;"	e	enum:__anon210
TIM2_IT_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_IT_CC2      = ((uint8_t)0x04),   \/*!< Capture Compare Channel2 Interrupt*\/$/;"	e	enum:__anon210
TIM2_IT_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_IT_Trigger  = ((uint8_t)0x40),   \/*!< Trigger  Interrupt*\/$/;"	e	enum:__anon210
TIM2_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_IT_TypeDef;$/;"	t	typeref:enum:__anon210
TIM2_IT_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_IT_Update   = ((uint8_t)0x01),   \/*!< Update Interrupt*\/$/;"	e	enum:__anon210
TIM2_LockLevel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_LockLevel_1    = ((uint8_t)0x01),   \/*!< Select Lock Level 1  *\/$/;"	e	enum:__anon204
TIM2_LockLevel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_LockLevel_2    = ((uint8_t)0x02),   \/*!< Select Lock Level 2  *\/$/;"	e	enum:__anon204
TIM2_LockLevel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_LockLevel_3    = ((uint8_t)0x03)    \/*!< Select Lock Level 3  *\/$/;"	e	enum:__anon204
TIM2_LockLevel_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_LockLevel_Off  = ((uint8_t)0x00),   \/*!< Lock option disabled *\/$/;"	e	enum:__anon204
TIM2_LockLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_LockLevel_TypeDef;$/;"	t	typeref:enum:__anon204
TIM2_OCIdleState_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCIdleState_Reset  = ((uint8_t)0x00),   \/*!< Output Compare Idle state  = Reset *\/$/;"	e	enum:__anon206
TIM2_OCIdleState_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCIdleState_Set    = ((uint8_t)0x01)    \/*!< Output Compare Idle state  = Set *\/$/;"	e	enum:__anon206
TIM2_OCIdleState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_OCIdleState_TypeDef;$/;"	t	typeref:enum:__anon206
TIM2_OCMode_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCMode_Active    = ((uint8_t)0x10),   \/*!< Active Mode*\/$/;"	e	enum:__anon195
TIM2_OCMode_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCMode_Inactive  = ((uint8_t)0x20),   \/*!< Inactive Mode*\/$/;"	e	enum:__anon195
TIM2_OCMode_PWM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCMode_PWM1      = ((uint8_t)0x60),   \/*!< PWM Mode 1*\/$/;"	e	enum:__anon195
TIM2_OCMode_PWM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCMode_PWM2      = ((uint8_t)0x70)    \/*!< PWM Mode 2*\/$/;"	e	enum:__anon195
TIM2_OCMode_Timing	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCMode_Timing    = ((uint8_t)0x00),   \/*!< Timing (Frozen) Mode*\/$/;"	e	enum:__anon195
TIM2_OCMode_Toggle	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCMode_Toggle    = ((uint8_t)0x30),   \/*!< Toggle Mode*\/$/;"	e	enum:__anon195
TIM2_OCMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_OCMode_TypeDef;$/;"	t	typeref:enum:__anon195
TIM2_OCPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCPolarity_High   = ((uint8_t)0x00),   \/*!< Output compare polarity  = High *\/$/;"	e	enum:__anon199
TIM2_OCPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OCPolarity_Low    = ((uint8_t)0x01)    \/*!< Output compare polarity  = Low *\/$/;"	e	enum:__anon199
TIM2_OCPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_OCPolarity_TypeDef;$/;"	t	typeref:enum:__anon199
TIM2_OPMode_Repetitive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OPMode_Repetitive  = ((uint8_t)0x00)  \/*!< Repetitive Pulse mode (OPM inactive) *\/$/;"	e	enum:__anon196
TIM2_OPMode_Single	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OPMode_Single      = ((uint8_t)0x01), \/*!< Single one Pulse mode (OPM Active) *\/$/;"	e	enum:__anon196
TIM2_OPMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_OPMode_TypeDef;$/;"	t	typeref:enum:__anon196
TIM2_OSSIState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OSSIState_Disable   = ((uint8_t)0x00)    \/*!< Off-State Selection for Idle mode disabled  *\/$/;"	e	enum:__anon205
TIM2_OSSIState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OSSIState_Enable    = ((uint8_t)0x04),   \/*!< Off-State Selection for Idle mode enabled  *\/$/;"	e	enum:__anon205
TIM2_OSSIState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_OSSIState_TypeDef;$/;"	t	typeref:enum:__anon205
TIM2_OutputState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OutputState_Disable   = ((uint8_t)0x00),   \/*!< Output compare State disabled (channel output disabled) *\/$/;"	e	enum:__anon200
TIM2_OutputState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_OutputState_Enable    = ((uint8_t)0x01)    \/*!< Output compare State enabled (channel output enabled) *\/$/;"	e	enum:__anon200
TIM2_OutputState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_OutputState_TypeDef;$/;"	t	typeref:enum:__anon200
TIM2_PSCReloadMode_Immediate	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_PSCReloadMode_Immediate   = ((uint8_t)0x01)    \/*!< Prescaler value is reloaded immediatly*\/$/;"	e	enum:__anon215
TIM2_PSCReloadMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_PSCReloadMode_TypeDef;$/;"	t	typeref:enum:__anon215
TIM2_PSCReloadMode_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_PSCReloadMode_Update      = ((uint8_t)0x00),   \/*!< Prescaler value is reloaded at every update*\/$/;"	e	enum:__anon215
TIM2_Prescaler_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_1     = ((uint8_t)0x00),   \/*!< Time base Prescaler = 1 (No effect)*\/$/;"	e	enum:__anon194
TIM2_Prescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_128   = ((uint8_t)0x07)    \/*!< Time base Prescaler = 128 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_16    = ((uint8_t)0x04),   \/*!< Time base Prescaler = 16 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_2     = ((uint8_t)0x01),   \/*!< Time base Prescaler = 2 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_32    = ((uint8_t)0x05),   \/*!< Time base Prescaler = 32 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_4     = ((uint8_t)0x02),   \/*!< Time base Prescaler = 4 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_64    = ((uint8_t)0x06),   \/*!< Time base Prescaler = 64 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_Prescaler_8     = ((uint8_t)0x03),   \/*!< Time base Prescaler = 8 *\/$/;"	e	enum:__anon194
TIM2_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon194
TIM2_SlaveMode_External1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_SlaveMode_External1  = ((uint8_t)0x07)   \/*!< Slave Mode Selection  = External 1*\/$/;"	e	enum:__anon220
TIM2_SlaveMode_Gated	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_SlaveMode_Gated      = ((uint8_t)0x05),  \/*!< Slave Mode Selection  = Gated*\/$/;"	e	enum:__anon220
TIM2_SlaveMode_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_SlaveMode_Reset      = ((uint8_t)0x04),  \/*!< Slave Mode Selection  = Reset*\/$/;"	e	enum:__anon220
TIM2_SlaveMode_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_SlaveMode_Trigger    = ((uint8_t)0x06),  \/*!< Slave Mode Selection  = Trigger*\/$/;"	e	enum:__anon220
TIM2_SlaveMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_SlaveMode_TypeDef;$/;"	t	typeref:enum:__anon220
TIM2_TIxExternalCLK1Source_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TIxExternalCLK1Source_TI1    = ((uint8_t)0x50),   \/*!< External Clock mode 1 source = TI1 *\/$/;"	e	enum:__anon213
TIM2_TIxExternalCLK1Source_TI1ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TIxExternalCLK1Source_TI1ED  = ((uint8_t)0x40),   \/*!< External Clock mode 1 source = TI1ED *\/$/;"	e	enum:__anon213
TIM2_TIxExternalCLK1Source_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TIxExternalCLK1Source_TI2    = ((uint8_t)0x60)    \/*!< External Clock mode 1 source = TI2 *\/$/;"	e	enum:__anon213
TIM2_TIxExternalCLK1Source_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_TIxExternalCLK1Source_TypeDef;$/;"	t	typeref:enum:__anon213
TIM2_TRGOSource_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGOSource_Enable   = ((uint8_t)0x10),   \/*!< Trigger Output source = TIM2 is enabled*\/$/;"	e	enum:__anon219
TIM2_TRGOSource_OC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGOSource_OC1      = ((uint8_t)0x30),   \/*!< Trigger Output source = output compare channel1  *\/$/;"	e	enum:__anon219
TIM2_TRGOSource_OC1REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGOSource_OC1REF   = ((uint8_t)0x40),   \/*!< Trigger Output source = output compare channel 1 reference *\/$/;"	e	enum:__anon219
TIM2_TRGOSource_OC2REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGOSource_OC2REF   = ((uint8_t)0x50)    \/*!< Trigger Output source = output compare channel 2 reference *\/$/;"	e	enum:__anon219
TIM2_TRGOSource_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGOSource_Reset    = ((uint8_t)0x00),   \/*!< Trigger Output source = Reset*\/$/;"	e	enum:__anon219
TIM2_TRGOSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_TRGOSource_TypeDef;$/;"	t	typeref:enum:__anon219
TIM2_TRGOSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGOSource_Update   = ((uint8_t)0x20),   \/*!< Trigger Output source = Update event*\/$/;"	e	enum:__anon219
TIM2_TRGSelection_ETRF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_ETRF     = ((uint8_t)0x70)   \/*!< TRIG Input source =  ETRF (External Trigger Input ) *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TI1FP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TI1FP1   = ((uint8_t)0x50),  \/*!< TRIG Input source = TI1FP1 (Filtred Timer Input 1) *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TI1F_ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TI1F_ED  = ((uint8_t)0x40),  \/*!< TRIG Input source = TI1F_ED (TI1 Edge Detector)  *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TI2FP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TI2FP2   = ((uint8_t)0x60),  \/*!< TRIG Input source = TI2FP2 (Filtred Timer Input 2)  *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TIM1     = ((uint8_t)0x10),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TIM3     = ((uint8_t)0x20),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TIM4     = ((uint8_t)0x00),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_TRGSelection_TIM5     = ((uint8_t)0x30),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon212
TIM2_TRGSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_TRGSelection_TypeDef;$/;"	t	typeref:enum:__anon212
TIM2_UpdateSource_Global	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_UpdateSource_Global   = ((uint8_t)0x00),   \/*!< Global Update request source *\/$/;"	e	enum:__anon218
TIM2_UpdateSource_Regular	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^  TIM2_UpdateSource_Regular  = ((uint8_t)0x01)    \/*!< Regular Update request source *\/$/;"	e	enum:__anon218
TIM2_UpdateSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	/^}TIM2_UpdateSource_TypeDef;$/;"	t	typeref:enum:__anon218
__STM8L15x_TIM2_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim2.h	24;"	d
IS_TIM3_AUTOMATIC_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	472;"	d
IS_TIM3_BREAK_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	465;"	d
IS_TIM3_BREAK_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	458;"	d
IS_TIM3_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	426;"	d
IS_TIM3_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	651;"	d
IS_TIM3_COUNTER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	433;"	d
IS_TIM3_DMA_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	658;"	d
IS_TIM3_ENCODER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	603;"	d
IS_TIM3_EVENT_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	611;"	d
IS_TIM3_EXT_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	590;"	d
IS_TIM3_EXT_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	583;"	d
IS_TIM3_EXT_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	547;"	d
IS_TIM3_FORCED_ACTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	379;"	d
IS_TIM3_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	642;"	d
IS_TIM3_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	537;"	d
IS_TIM3_IC_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	528;"	d
IS_TIM3_IC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	503;"	d
IS_TIM3_IC_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	519;"	d
IS_TIM3_IC_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	510;"	d
IS_TIM3_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	534;"	d
IS_TIM3_LOCK_LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	479;"	d
IS_TIM3_OCIDLE_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	495;"	d
IS_TIM3_OCM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	407;"	d
IS_TIM3_OC_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	399;"	d
IS_TIM3_OC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	443;"	d
IS_TIM3_OPM_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	419;"	d
IS_TIM3_OSSI_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	488;"	d
IS_TIM3_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	450;"	d
IS_TIM3_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	386;"	d
IS_TIM3_PRESCALER_RELOAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	596;"	d
IS_TIM3_SLAVE_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	634;"	d
IS_TIM3_TIXCLK_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	575;"	d
IS_TIM3_TIX_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	567;"	d
IS_TIM3_TRGO_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	624;"	d
IS_TIM3_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	556;"	d
IS_TIM3_UPDATE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	617;"	d
TIM3_AutomaticOutput_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_AutomaticOutput_Disable  = ((uint8_t)0x00)  \/*!< Automatic Output option disabled *\/$/;"	e	enum:__anon233
TIM3_AutomaticOutput_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_AutomaticOutput_Enable   = ((uint8_t)0x40), \/*!< Automatic Output option enabled *\/$/;"	e	enum:__anon233
TIM3_AutomaticOutput_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_AutomaticOutput_TypeDef;$/;"	t	typeref:enum:__anon233
TIM3_BreakPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_BreakPolarity_High   = ((uint8_t)0x20),  \/*!< if Break, channel polarity = High *\/$/;"	e	enum:__anon232
TIM3_BreakPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_BreakPolarity_Low    = ((uint8_t)0x00)   \/*!< if Break, channel polarity = Low *\/$/;"	e	enum:__anon232
TIM3_BreakPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_BreakPolarity_TypeDef;$/;"	t	typeref:enum:__anon232
TIM3_BreakState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_BreakState_Disable   = ((uint8_t)0x00), \/*!< Break State disabled (break option disabled) *\/$/;"	e	enum:__anon231
TIM3_BreakState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_BreakState_Enable    = ((uint8_t)0x10)  \/*!< Break State enabled (break option enabled) *\/$/;"	e	enum:__anon231
TIM3_BreakState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_BreakState_TypeDef;$/;"	t	typeref:enum:__anon231
TIM3_Channel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Channel_1     = ((uint8_t)0x00),  \/*!< Channel 1*\/$/;"	e	enum:__anon227
TIM3_Channel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Channel_2     = ((uint8_t)0x01)   \/*!< Channel 2*\/$/;"	e	enum:__anon227
TIM3_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_Channel_TypeDef;$/;"	t	typeref:enum:__anon227
TIM3_CounterMode_CenterAligned1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_CounterMode_CenterAligned1  = ((uint8_t)0x20), \/*!< Counter Central aligned Mode 1 *\/$/;"	e	enum:__anon228
TIM3_CounterMode_CenterAligned2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_CounterMode_CenterAligned2  = ((uint8_t)0x40), \/*!< Counter Central aligned Mode 2 *\/$/;"	e	enum:__anon228
TIM3_CounterMode_CenterAligned3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_CounterMode_CenterAligned3  = ((uint8_t)0x60)  \/*!< Counter Central aligned Mode 3 *\/$/;"	e	enum:__anon228
TIM3_CounterMode_Down	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_CounterMode_Down            = ((uint8_t)0x10), \/*!< Counter Down Mode *\/$/;"	e	enum:__anon228
TIM3_CounterMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_CounterMode_TypeDef;$/;"	t	typeref:enum:__anon228
TIM3_CounterMode_Up	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_CounterMode_Up              = ((uint8_t)0x00), \/*!< Counter Up Mode *\/$/;"	e	enum:__anon228
TIM3_DMASource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_DMASource_CC1      = ((uint8_t)0x02),$/;"	e	enum:__anon252
TIM3_DMASource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_DMASource_CC2      = ((uint8_t)0x04)$/;"	e	enum:__anon252
TIM3_DMASource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_DMASource_TypeDef;$/;"	t	typeref:enum:__anon252
TIM3_DMASource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_DMASource_Update   = ((uint8_t)0x01),  \/*!< TIM3 DMA Update Request*\/$/;"	e	enum:__anon252
TIM3_EncoderMode_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EncoderMode_TI1    = ((uint8_t)0x01), \/*!< Encoder mode 1*\/$/;"	e	enum:__anon246
TIM3_EncoderMode_TI12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EncoderMode_TI12   = ((uint8_t)0x03)  \/*!< Encoder mode 3*\/$/;"	e	enum:__anon246
TIM3_EncoderMode_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EncoderMode_TI2    = ((uint8_t)0x02), \/*!< Encoder mode 2*\/$/;"	e	enum:__anon246
TIM3_EncoderMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_EncoderMode_TypeDef;$/;"	t	typeref:enum:__anon246
TIM3_EventSource_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EventSource_Break    = ((uint8_t)0x80)  \/*!< Break Event*\/$/;"	e	enum:__anon247
TIM3_EventSource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EventSource_CC1      = ((uint8_t)0x02), \/*!< Capture Compare Channel1  Event*\/$/;"	e	enum:__anon247
TIM3_EventSource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EventSource_CC2      = ((uint8_t)0x04), \/*!< Capture Compare Channel2 Event*\/$/;"	e	enum:__anon247
TIM3_EventSource_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EventSource_Trigger  = ((uint8_t)0x40), \/*!< Trigger Event*\/$/;"	e	enum:__anon247
TIM3_EventSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_EventSource_TypeDef;$/;"	t	typeref:enum:__anon247
TIM3_EventSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_EventSource_Update   = ((uint8_t)0x01), \/*!< Update Event*\/$/;"	e	enum:__anon247
TIM3_ExtTRGPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ExtTRGPSC_DIV2  = ((uint8_t)0x10), \/*!< External Trigger prescaler = 2 (ETRP frequency divided by 2) *\/$/;"	e	enum:__anon241
TIM3_ExtTRGPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ExtTRGPSC_DIV4  = ((uint8_t)0x20), \/*!< External Trigger prescaler = 4 (ETRP frequency divided by 4) *\/$/;"	e	enum:__anon241
TIM3_ExtTRGPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ExtTRGPSC_DIV8  = ((uint8_t)0x30)  \/*!< External Trigger prescaler = 8 (ETRP frequency divided by 8) *\/$/;"	e	enum:__anon241
TIM3_ExtTRGPSC_OFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ExtTRGPSC_OFF   = ((uint8_t)0x00), \/*!< No External Trigger prescaler  *\/$/;"	e	enum:__anon241
TIM3_ExtTRGPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_ExtTRGPSC_TypeDef;$/;"	t	typeref:enum:__anon241
TIM3_ExtTRGPolarity_Inverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ExtTRGPolarity_Inverted     = ((uint8_t)0x80), \/*!< External Trigger Polarity = inverted *\/$/;"	e	enum:__anon244
TIM3_ExtTRGPolarity_NonInverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ExtTRGPolarity_NonInverted  = ((uint8_t)0x00)  \/*!< External Trigger Polarity = non inverted *\/$/;"	e	enum:__anon244
TIM3_ExtTRGPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_ExtTRGPolarity_TypeDef;$/;"	t	typeref:enum:__anon244
TIM3_FLAG_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_Break    = ((uint16_t)0x0080), \/*!< Break Flag *\/$/;"	e	enum:__anon251
TIM3_FLAG_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_CC1      = ((uint16_t)0x0002), \/*!< Capture compare 1 Flag *\/$/;"	e	enum:__anon251
TIM3_FLAG_CC1OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_CC1OF    = ((uint16_t)0x0200), \/*!< Capture compare 1 over capture Flag *\/$/;"	e	enum:__anon251
TIM3_FLAG_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_CC2      = ((uint16_t)0x0004), \/*!< Capture compare 2 Flag *\/$/;"	e	enum:__anon251
TIM3_FLAG_CC2OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_CC2OF    = ((uint16_t)0x0400)  \/*!< Capture compare 2 over capture Flag *\/$/;"	e	enum:__anon251
TIM3_FLAG_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_Trigger  = ((uint16_t)0x0040), \/*!< Trigger Flag *\/$/;"	e	enum:__anon251
TIM3_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_FLAG_TypeDef;$/;"	t	typeref:enum:__anon251
TIM3_FLAG_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_FLAG_Update   = ((uint16_t)0x0001), \/*!< Update Flag *\/$/;"	e	enum:__anon251
TIM3_ForcedAction_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ForcedAction_Active    = ((uint8_t)0x50), \/*!< Output Reference is forced low *\/$/;"	e	enum:__anon223
TIM3_ForcedAction_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ForcedAction_Inactive  = ((uint8_t)0x40)  \/*!< Output Reference is forced high *\/$/;"	e	enum:__anon223
TIM3_ForcedAction_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^TIM3_ForcedAction_TypeDef;$/;"	t	typeref:enum:__anon223
TIM3_ICPSC_DIV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICPSC_DIV1  = ((uint8_t)0x00),  \/*!< Input Capture Prescaler = 1 (one capture every 1 event) *\/$/;"	e	enum:__anon239
TIM3_ICPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICPSC_DIV2  = ((uint8_t)0x04),  \/*!< Input Capture Prescaler = 2 (one capture every 2 events) *\/$/;"	e	enum:__anon239
TIM3_ICPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICPSC_DIV4  = ((uint8_t)0x08),  \/*!< Input Capture Prescaler = 4 (one capture every 4 events) *\/$/;"	e	enum:__anon239
TIM3_ICPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICPSC_DIV8  = ((uint8_t)0x0C)   \/*!< Input Capture Prescaler = 8 (one capture every 8 events) *\/$/;"	e	enum:__anon239
TIM3_ICPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_ICPSC_TypeDef;$/;"	t	typeref:enum:__anon239
TIM3_ICPolarity_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICPolarity_Falling  = ((uint8_t)0x01)  \/*!< Input Capture on Falling Edge*\/$/;"	e	enum:__anon237
TIM3_ICPolarity_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICPolarity_Rising  = ((uint8_t)0x00), \/*!< Input Capture on Rising Edge*\/$/;"	e	enum:__anon237
TIM3_ICPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_ICPolarity_TypeDef;$/;"	t	typeref:enum:__anon237
TIM3_ICSelection_DirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICSelection_DirectTI    = ((uint8_t)0x01), \/*!< Input Capture mapped on the direct input*\/$/;"	e	enum:__anon238
TIM3_ICSelection_IndirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICSelection_IndirectTI  = ((uint8_t)0x02), \/*!< Input Capture mapped on the indirect input*\/$/;"	e	enum:__anon238
TIM3_ICSelection_TRGI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_ICSelection_TRGI        = ((uint8_t)0x03)  \/*!< Input Capture mapped on the Trigger Input*\/$/;"	e	enum:__anon238
TIM3_ICSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_ICSelection_TypeDef;$/;"	t	typeref:enum:__anon238
TIM3_IT_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_IT_Break    = ((uint8_t)0x80)  \/*!< Break Interrupt*\/$/;"	e	enum:__anon240
TIM3_IT_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_IT_CC1      = ((uint8_t)0x02), \/*!< Capture Compare Channel1 Interrupt*\/$/;"	e	enum:__anon240
TIM3_IT_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_IT_CC2      = ((uint8_t)0x04), \/*!< Capture Compare Channel2 Interrupt*\/$/;"	e	enum:__anon240
TIM3_IT_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_IT_Trigger  = ((uint8_t)0x40), \/*!< Trigger  Interrupt*\/$/;"	e	enum:__anon240
TIM3_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_IT_TypeDef;$/;"	t	typeref:enum:__anon240
TIM3_IT_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_IT_Update   = ((uint8_t)0x01), \/*!< Update Interrupt*\/$/;"	e	enum:__anon240
TIM3_LockLevel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_LockLevel_1          = ((uint8_t)0x01), \/*!< Select Lock Level 1  *\/$/;"	e	enum:__anon234
TIM3_LockLevel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_LockLevel_2          = ((uint8_t)0x02), \/*!< Select Lock Level 2  *\/$/;"	e	enum:__anon234
TIM3_LockLevel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_LockLevel_3          = ((uint8_t)0x03)  \/*!< Select Lock Level 3  *\/$/;"	e	enum:__anon234
TIM3_LockLevel_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_LockLevel_Off        = ((uint8_t)0x00), \/*!< Lock option disabled *\/$/;"	e	enum:__anon234
TIM3_LockLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_LockLevel_TypeDef;$/;"	t	typeref:enum:__anon234
TIM3_OCIdleState_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCIdleState_Reset  = ((uint8_t)0x00), \/*!< Output Compare Idle state  = Reset *\/$/;"	e	enum:__anon236
TIM3_OCIdleState_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCIdleState_Set    = ((uint8_t)0x01)  \/*!< Output Compare Idle state  = Set *\/$/;"	e	enum:__anon236
TIM3_OCIdleState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_OCIdleState_TypeDef;$/;"	t	typeref:enum:__anon236
TIM3_OCMode_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCMode_Active    = ((uint8_t)0x10), \/*!< Active Mode*\/$/;"	e	enum:__anon225
TIM3_OCMode_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCMode_Inactive  = ((uint8_t)0x20), \/*!< Inactive Mode*\/$/;"	e	enum:__anon225
TIM3_OCMode_PWM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCMode_PWM1      = ((uint8_t)0x60), \/*!< PWM Mode 1*\/$/;"	e	enum:__anon225
TIM3_OCMode_PWM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCMode_PWM2      = ((uint8_t)0x70)  \/*!< PWM Mode 2*\/$/;"	e	enum:__anon225
TIM3_OCMode_Timing	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCMode_Timing    = ((uint8_t)0x00), \/*!< Timing (Frozen) Mode*\/$/;"	e	enum:__anon225
TIM3_OCMode_Toggle	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCMode_Toggle    = ((uint8_t)0x30), \/*!< Toggle Mode*\/$/;"	e	enum:__anon225
TIM3_OCMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_OCMode_TypeDef;$/;"	t	typeref:enum:__anon225
TIM3_OCPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCPolarity_High   = ((uint8_t)0x00), \/*!< Output compare polarity  = High *\/$/;"	e	enum:__anon229
TIM3_OCPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OCPolarity_Low    = ((uint8_t)0x01)  \/*!< Output compare polarity  = Low *\/$/;"	e	enum:__anon229
TIM3_OCPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_OCPolarity_TypeDef;$/;"	t	typeref:enum:__anon229
TIM3_OPMode_Repetitive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OPMode_Repetitive  = ((uint8_t)0x00)  \/*!< Repetitive Pulse mode (OPM inactive) *\/$/;"	e	enum:__anon226
TIM3_OPMode_Single	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OPMode_Single      = ((uint8_t)0x01), \/*!< Single one Pulse mode (OPM Active) *\/$/;"	e	enum:__anon226
TIM3_OPMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_OPMode_TypeDef;$/;"	t	typeref:enum:__anon226
TIM3_OSSIState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OSSIState_Disable  = ((uint8_t)0x00)  \/*!< Off-State Selection for Idle mode disabled  *\/$/;"	e	enum:__anon235
TIM3_OSSIState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OSSIState_Enable   = ((uint8_t)0x04), \/*!< Off-State Selection for Idle mode enabled  *\/$/;"	e	enum:__anon235
TIM3_OSSIState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_OSSIState_TypeDef;$/;"	t	typeref:enum:__anon235
TIM3_OutputState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OutputState_Disable  = ((uint8_t)0x00), \/*!< Output compare State disabled$/;"	e	enum:__anon230
TIM3_OutputState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_OutputState_Enable   = ((uint8_t)0x01)  \/*!< Output compare State enabled$/;"	e	enum:__anon230
TIM3_OutputState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_OutputState_TypeDef;$/;"	t	typeref:enum:__anon230
TIM3_PSCReloadMode_Immediate	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_PSCReloadMode_Immediate  = ((uint8_t)0x01)  \/*!< Prescaler value is reloaded immediatly*\/$/;"	e	enum:__anon245
TIM3_PSCReloadMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_PSCReloadMode_TypeDef;$/;"	t	typeref:enum:__anon245
TIM3_PSCReloadMode_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_PSCReloadMode_Update     = ((uint8_t)0x00), \/*!< Prescaler value is reloaded at every update*\/$/;"	e	enum:__anon245
TIM3_Prescaler_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_1     = ((uint8_t)0x00), \/*!< Time base Prescaler = 1 (No effect)*\/$/;"	e	enum:__anon224
TIM3_Prescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_128   = ((uint8_t)0x07)  \/*!< Time base Prescaler = 128 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_16    = ((uint8_t)0x04), \/*!< Time base Prescaler = 16 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_2     = ((uint8_t)0x01), \/*!< Time base Prescaler = 2 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_32    = ((uint8_t)0x05), \/*!< Time base Prescaler = 32 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_4     = ((uint8_t)0x02), \/*!< Time base Prescaler = 4 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_64    = ((uint8_t)0x06), \/*!< Time base Prescaler = 64 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_Prescaler_8     = ((uint8_t)0x03), \/*!< Time base Prescaler = 8 *\/$/;"	e	enum:__anon224
TIM3_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon224
TIM3_SlaveMode_External1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_SlaveMode_External1  = ((uint8_t)0x07)  \/*!< Slave Mode Selection  = External 1*\/$/;"	e	enum:__anon250
TIM3_SlaveMode_Gated	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_SlaveMode_Gated      = ((uint8_t)0x05), \/*!< Slave Mode Selection  = Gated*\/$/;"	e	enum:__anon250
TIM3_SlaveMode_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_SlaveMode_Reset      = ((uint8_t)0x04), \/*!< Slave Mode Selection  = Reset*\/$/;"	e	enum:__anon250
TIM3_SlaveMode_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_SlaveMode_Trigger    = ((uint8_t)0x06), \/*!< Slave Mode Selection  = Trigger*\/$/;"	e	enum:__anon250
TIM3_SlaveMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_SlaveMode_TypeDef;$/;"	t	typeref:enum:__anon250
TIM3_TIxExternalCLK1Source_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TIxExternalCLK1Source_TI1    = ((uint8_t)0x50),  \/*!< External Clock mode 1 source = TI1 *\/$/;"	e	enum:__anon243
TIM3_TIxExternalCLK1Source_TI1ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TIxExternalCLK1Source_TI1ED  = ((uint8_t)0x40),  \/*!< External Clock mode 1 source = TI1ED *\/$/;"	e	enum:__anon243
TIM3_TIxExternalCLK1Source_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TIxExternalCLK1Source_TI2    = ((uint8_t)0x60)   \/*!< External Clock mode 1 source = TI2 *\/$/;"	e	enum:__anon243
TIM3_TIxExternalCLK1Source_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_TIxExternalCLK1Source_TypeDef;$/;"	t	typeref:enum:__anon243
TIM3_TRGOSource_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGOSource_Enable  = ((uint8_t)0x10), \/*!< Trigger Output source = TIM3 is enabled*\/$/;"	e	enum:__anon249
TIM3_TRGOSource_OC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGOSource_OC1     = ((uint8_t)0x30), \/*!< Trigger Output source = output compare channel1  *\/$/;"	e	enum:__anon249
TIM3_TRGOSource_OC1REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGOSource_OC1REF  = ((uint8_t)0x40), \/*!< Trigger Output source = output compare channel 1 reference *\/$/;"	e	enum:__anon249
TIM3_TRGOSource_OC2REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGOSource_OC2REF  = ((uint8_t)0x50)  \/*!< Trigger Output source = output compare channel 2 reference *\/$/;"	e	enum:__anon249
TIM3_TRGOSource_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGOSource_Reset   = ((uint8_t)0x00), \/*!< Trigger Output source = Reset*\/$/;"	e	enum:__anon249
TIM3_TRGOSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_TRGOSource_TypeDef;$/;"	t	typeref:enum:__anon249
TIM3_TRGOSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGOSource_Update  = ((uint8_t)0x20), \/*!< Trigger Output source = Update event*\/$/;"	e	enum:__anon249
TIM3_TRGSelection_ETRF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_ETRF     = ((uint8_t)0x70)  \/*!< TRIG Input source =  ETRF (External Trigger Input ) *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TI1FP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TI1FP1   = ((uint8_t)0x50), \/*!< TRIG Input source = TI1FP1  (Filtred Timer Input 1) *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TI1F_ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TI1F_ED  = ((uint8_t)0x40), \/*!< TRIG Input source = TI1F_ED (TI1 Edge Detector)  *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TI2FP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TI2FP2   = ((uint8_t)0x60), \/*!< TRIG Input source = TI2FP2 (Filtred Timer Input 2)  *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TIM1     = ((uint8_t)0x10), \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TIM2     = ((uint8_t)0x30), \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TIM4     = ((uint8_t)0x00), \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_TRGSelection_TIM5     = ((uint8_t)0x20), \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon242
TIM3_TRGSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_TRGSelection_TypeDef;$/;"	t	typeref:enum:__anon242
TIM3_UpdateSource_Global	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_UpdateSource_Global  = ((uint8_t)0x00), \/*!< Global Update request source *\/$/;"	e	enum:__anon248
TIM3_UpdateSource_Regular	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^  TIM3_UpdateSource_Regular = ((uint8_t)0x01)  \/*!< Regular Update request source *\/$/;"	e	enum:__anon248
TIM3_UpdateSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	/^}TIM3_UpdateSource_TypeDef;$/;"	t	typeref:enum:__anon248
__STM8L15x_TIM3_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim3.h	24;"	d
IS_TIM4_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	244;"	d
IS_TIM4_DMA_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	269;"	d
IS_TIM4_EVENT_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	217;"	d
IS_TIM4_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	240;"	d
IS_TIM4_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	253;"	d
IS_TIM4_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	249;"	d
IS_TIM4_OPM_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	198;"	d
IS_TIM4_Prescaler	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	178;"	d
IS_TIM4_Prescaler_RELOAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	205;"	d
IS_TIM4_SLAVE_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	231;"	d
IS_TIM4_TRGO_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	224;"	d
IS_TIM4_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	259;"	d
IS_TIM4_UPDATE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	211;"	d
TIM4_DMASource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_DMASource_TypeDef;$/;"	t	typeref:enum:__anon263
TIM4_DMASource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_DMASource_Update    = ((uint8_t)0x01)  \/*!< TIM4 DMA Update Request*\/$/;"	e	enum:__anon263
TIM4_EventSource_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_EventSource_Trigger  = ((uint8_t)0x40)   \/*!< Trigger Event *\/$/;"	e	enum:__anon257
TIM4_EventSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_EventSource_TypeDef;$/;"	t	typeref:enum:__anon257
TIM4_EventSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_EventSource_Update    = ((uint8_t)0x01),  \/*!< Update Event *\/$/;"	e	enum:__anon257
TIM4_FLAG_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_FLAG_Trigger  = ((uint8_t)0x40)    \/*!< Trigger Flag *\/$/;"	e	enum:__anon260
TIM4_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_FLAG_TypeDef;$/;"	t	typeref:enum:__anon260
TIM4_FLAG_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_FLAG_Update  = ((uint8_t)0x01),  \/*!< Update Flag *\/$/;"	e	enum:__anon260
TIM4_IT_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_IT_Trigger  = ((uint8_t)0x40)   \/*!< Trigger  Interrupt*\/$/;"	e	enum:__anon261
TIM4_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_IT_TypeDef;$/;"	t	typeref:enum:__anon261
TIM4_IT_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_IT_Update  = ((uint8_t)0x01),  \/*!< Update Interrupt*\/$/;"	e	enum:__anon261
TIM4_OPMode_Repetitive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_OPMode_Repetitive  = ((uint8_t) 0x00)   \/*!< Repetitive Pulse mode (OPM inactive) *\/$/;"	e	enum:__anon254
TIM4_OPMode_Single	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_OPMode_Single      = ((uint8_t) 0x01),  \/*!< Single one Pulse mode (OPM Active) *\/$/;"	e	enum:__anon254
TIM4_OPMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_OPMode_TypeDef;$/;"	t	typeref:enum:__anon254
TIM4_PSCReloadMode_Immediate	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_PSCReloadMode_Immediate  = ((uint8_t)0x01)  \/*!< Prescaler value is reloaded immediatly *\/$/;"	e	enum:__anon255
TIM4_PSCReloadMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_PSCReloadMode_TypeDef;$/;"	t	typeref:enum:__anon255
TIM4_PSCReloadMode_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_PSCReloadMode_Update      = ((uint8_t)0x00), \/*!< Prescaler value is reloaded at every update *\/$/;"	e	enum:__anon255
TIM4_Prescaler_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_1      = ((uint8_t)0x00),   \/*!< Time base Prescaler = 1 (No effect)*\/$/;"	e	enum:__anon253
TIM4_Prescaler_1024	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_1024   = ((uint8_t)0x0A),  \/*!< Time base Prescaler = 1024 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_128    = ((uint8_t)0x07),  \/*!< Time base Prescaler = 128 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_16     = ((uint8_t)0x04),  \/*!< Time base Prescaler = 16 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_16384	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_16384  = ((uint8_t)0x0E),  \/*!< Time base Prescaler = 16384 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_2      = ((uint8_t)0x01),  \/*!< Time base Prescaler = 2 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_2048	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_2048   = ((uint8_t)0x0B),  \/*!< Time base Prescaler = 2048 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_256	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_256    = ((uint8_t)0x08),  \/*!< Time base Prescaler = 256 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_32     = ((uint8_t)0x05),  \/*!< Time base Prescaler = 32 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_32768	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_32768  = ((uint8_t)0x0F)   \/*!< Time base Prescaler = 32768 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_4      = ((uint8_t)0x02),  \/*!< Time base Prescaler = 4 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_4096	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_4096   = ((uint8_t)0x0C),  \/*!< Time base Prescaler = 4096 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_512	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_512    = ((uint8_t)0x09),  \/*!< Time base Prescaler = 512 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_64     = ((uint8_t)0x06),  \/*!< Time base Prescaler = 64 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_8      = ((uint8_t)0x03),  \/*!< Time base Prescaler = 8 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_8192	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_Prescaler_8192   = ((uint8_t)0x0D),  \/*!< Time base Prescaler = 8196 *\/$/;"	e	enum:__anon253
TIM4_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon253
TIM4_SlaveMode_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_SlaveMode_Disable    = ((uint8_t)0x00),   \/*!< Disable slave mode to clock the prescaler$/;"	e	enum:__anon259
TIM4_SlaveMode_External1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_SlaveMode_External1  = ((uint8_t)0x07)    \/*!< Slave Mode Selection  = External 1*\/$/;"	e	enum:__anon259
TIM4_SlaveMode_Gated	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_SlaveMode_Gated      = ((uint8_t)0x05),   \/*!< Slave Mode Selection  = Gated*\/$/;"	e	enum:__anon259
TIM4_SlaveMode_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_SlaveMode_Reset      = ((uint8_t)0x04),   \/*!< Slave Mode Selection  = Reset*\/$/;"	e	enum:__anon259
TIM4_SlaveMode_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_SlaveMode_Trigger    = ((uint8_t)0x06),  \/*!< Slave Mode Selection  = Trigger*\/$/;"	e	enum:__anon259
TIM4_SlaveMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_SlaveMode_TypeDef;$/;"	t	typeref:enum:__anon259
TIM4_TRGOSource_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGOSource_Enable  = ((uint8_t)0x10),  \/*!< Trigger Output source = TIM2 is enabled *\/$/;"	e	enum:__anon258
TIM4_TRGOSource_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGOSource_Reset   = ((uint8_t)0x00),  \/*!< Trigger Output source = Reset *\/$/;"	e	enum:__anon258
TIM4_TRGOSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_TRGOSource_TypeDef;$/;"	t	typeref:enum:__anon258
TIM4_TRGOSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGOSource_Update  = ((uint8_t)0x20)   \/*!< Trigger Output source = Update event *\/$/;"	e	enum:__anon258
TIM4_TRGSelection_TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGSelection_TIM1  = ((uint8_t)0x10), \/*!< TRIG Input source =  TIM1 TRIG Output *\/$/;"	e	enum:__anon262
TIM4_TRGSelection_TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGSelection_TIM2  = ((uint8_t)0x30)  \/*!< TRIG Input source =  TIM2 TRIG Output *\/$/;"	e	enum:__anon262
TIM4_TRGSelection_TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGSelection_TIM3  = ((uint8_t)0x20), \/*!< TRIG Input source =  TIM3 TRIG Output *\/$/;"	e	enum:__anon262
TIM4_TRGSelection_TIM5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_TRGSelection_TIM5  = ((uint8_t)0x00), \/*!< TRIG Input source =  TIM1 TRIG Output *\/$/;"	e	enum:__anon262
TIM4_TRGSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_TRGSelection_TypeDef;$/;"	t	typeref:enum:__anon262
TIM4_UpdateSource_Global	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_UpdateSource_Global  = ((uint8_t)0x00),  \/*!< Global Update request source *\/$/;"	e	enum:__anon256
TIM4_UpdateSource_Regular	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^  TIM4_UpdateSource_Regular  = ((uint8_t)0x01)   \/*!< Regular Update request source *\/$/;"	e	enum:__anon256
TIM4_UpdateSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	/^}TIM4_UpdateSource_TypeDef;$/;"	t	typeref:enum:__anon256
__STM8L15x_TIM4_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim4.h	24;"	d
IS_TIM5_AUTOMATIC_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	470;"	d
IS_TIM5_BREAK_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	463;"	d
IS_TIM5_BREAK_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	456;"	d
IS_TIM5_CHANNEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	425;"	d
IS_TIM5_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	648;"	d
IS_TIM5_COUNTER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	432;"	d
IS_TIM5_DMA_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	655;"	d
IS_TIM5_ENCODER_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	599;"	d
IS_TIM5_EVENT_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	607;"	d
IS_TIM5_EXT_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	586;"	d
IS_TIM5_EXT_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	579;"	d
IS_TIM5_EXT_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	544;"	d
IS_TIM5_FORCED_ACTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	378;"	d
IS_TIM5_GET_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	639;"	d
IS_TIM5_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	534;"	d
IS_TIM5_IC_FILTER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	525;"	d
IS_TIM5_IC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	501;"	d
IS_TIM5_IC_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	516;"	d
IS_TIM5_IC_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	508;"	d
IS_TIM5_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	531;"	d
IS_TIM5_LOCK_LEVEL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	477;"	d
IS_TIM5_OCIDLE_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	493;"	d
IS_TIM5_OCM	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	406;"	d
IS_TIM5_OC_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	398;"	d
IS_TIM5_OC_POLARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	442;"	d
IS_TIM5_OPM_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	418;"	d
IS_TIM5_OSSI_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	486;"	d
IS_TIM5_OUTPUT_STATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	449;"	d
IS_TIM5_PRESCALER	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	385;"	d
IS_TIM5_PRESCALER_RELOAD	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	592;"	d
IS_TIM5_SLAVE_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	631;"	d
IS_TIM5_TIXCLK_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	571;"	d
IS_TIM5_TIX_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	563;"	d
IS_TIM5_TRGO_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	621;"	d
IS_TIM5_TRIGGER_SELECTION	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	552;"	d
IS_TIM5_UPDATE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	614;"	d
TIM5_AutomaticOutput_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_AutomaticOutput_Disable   = ((uint8_t)0x00)    \/*!< Automatic Output option disabled *\/$/;"	e	enum:__anon274
TIM5_AutomaticOutput_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_AutomaticOutput_Enable    = ((uint8_t)0x40),   \/*!< Automatic Output option enabled *\/$/;"	e	enum:__anon274
TIM5_AutomaticOutput_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_AutomaticOutput_TypeDef;$/;"	t	typeref:enum:__anon274
TIM5_BreakPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_BreakPolarity_High  = ((uint8_t)0x20),  \/*!< if Break, channel polarity = High *\/$/;"	e	enum:__anon273
TIM5_BreakPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_BreakPolarity_Low   = ((uint8_t)0x00)   \/*!< if Break, channel polarity = Low *\/$/;"	e	enum:__anon273
TIM5_BreakPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_BreakPolarity_TypeDef;$/;"	t	typeref:enum:__anon273
TIM5_BreakState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_BreakState_Disable  = ((uint8_t)0x00),   \/*!< Break State disabled (break option disabled) *\/$/;"	e	enum:__anon272
TIM5_BreakState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_BreakState_Enable   = ((uint8_t)0x10)    \/*!< Break State enabled (break option enabled) *\/$/;"	e	enum:__anon272
TIM5_BreakState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_BreakState_TypeDef;$/;"	t	typeref:enum:__anon272
TIM5_Channel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Channel_1  = ((uint8_t)0x00),  \/*!< Channel 1*\/$/;"	e	enum:__anon268
TIM5_Channel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Channel_2  = ((uint8_t)0x01)   \/*!< Channel 2*\/$/;"	e	enum:__anon268
TIM5_Channel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_Channel_TypeDef;$/;"	t	typeref:enum:__anon268
TIM5_CounterMode_CenterAligned1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_CounterMode_CenterAligned1   = ((uint8_t)0x20),   \/*!< Counter Central aligned Mode 1 *\/$/;"	e	enum:__anon269
TIM5_CounterMode_CenterAligned2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_CounterMode_CenterAligned2   = ((uint8_t)0x40),   \/*!< Counter Central aligned Mode 2 *\/$/;"	e	enum:__anon269
TIM5_CounterMode_CenterAligned3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_CounterMode_CenterAligned3   = ((uint8_t)0x60)    \/*!< Counter Central aligned Mode 3 *\/$/;"	e	enum:__anon269
TIM5_CounterMode_Down	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_CounterMode_Down             = ((uint8_t)0x10),   \/*!< Counter Down Mode *\/$/;"	e	enum:__anon269
TIM5_CounterMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_CounterMode_TypeDef;$/;"	t	typeref:enum:__anon269
TIM5_CounterMode_Up	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_CounterMode_Up               = ((uint8_t)0x00),   \/*!< Counter Up Mode *\/$/;"	e	enum:__anon269
TIM5_DMASource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_DMASource_CC1      = ((uint8_t)0x02),  \/*!< TIM5 DMA CC1 Request*\/$/;"	e	enum:__anon293
TIM5_DMASource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_DMASource_CC2      = ((uint8_t)0x04)   \/*!< TIM5 DMA CC2 Request*\/$/;"	e	enum:__anon293
TIM5_DMASource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_DMASource_TypeDef;$/;"	t	typeref:enum:__anon293
TIM5_DMASource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_DMASource_Update   = ((uint8_t)0x01),  \/*!< TIM5 DMA Update Request*\/$/;"	e	enum:__anon293
TIM5_EncoderMode_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EncoderMode_TI1     = ((uint8_t)0x01),   \/*!< Encoder mode 1*\/$/;"	e	enum:__anon287
TIM5_EncoderMode_TI12	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EncoderMode_TI12    = ((uint8_t)0x03)    \/*!< Encoder mode 3*\/$/;"	e	enum:__anon287
TIM5_EncoderMode_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EncoderMode_TI2     = ((uint8_t)0x02),   \/*!< Encoder mode 2*\/$/;"	e	enum:__anon287
TIM5_EncoderMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_EncoderMode_TypeDef;$/;"	t	typeref:enum:__anon287
TIM5_EventSource_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EventSource_Break    = ((uint8_t)0x80)    \/*!< Break Event*\/$/;"	e	enum:__anon288
TIM5_EventSource_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EventSource_CC1      = ((uint8_t)0x02),   \/*!< Capture Compare Channel1  Event*\/$/;"	e	enum:__anon288
TIM5_EventSource_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EventSource_CC2      = ((uint8_t)0x04),   \/*!< Capture Compare Channel2 Event*\/$/;"	e	enum:__anon288
TIM5_EventSource_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EventSource_Trigger  = ((uint8_t)0x40),   \/*!< Trigger Event*\/$/;"	e	enum:__anon288
TIM5_EventSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_EventSource_TypeDef;$/;"	t	typeref:enum:__anon288
TIM5_EventSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_EventSource_Update   = ((uint8_t)0x01),   \/*!< Update Event*\/$/;"	e	enum:__anon288
TIM5_ExtTRGPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ExtTRGPSC_DIV2  = ((uint8_t)0x10),   \/*!< External Trigger prescaler = 2 (ETRP frequency divided by 2) *\/$/;"	e	enum:__anon282
TIM5_ExtTRGPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ExtTRGPSC_DIV4  = ((uint8_t)0x20),   \/*!< External Trigger prescaler = 4 (ETRP frequency divided by 4) *\/$/;"	e	enum:__anon282
TIM5_ExtTRGPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ExtTRGPSC_DIV8  = ((uint8_t)0x30)    \/*!< External Trigger prescaler = 8 (ETRP frequency divided by 8) *\/$/;"	e	enum:__anon282
TIM5_ExtTRGPSC_OFF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ExtTRGPSC_OFF   = ((uint8_t)0x00),   \/*!< No External Trigger prescaler  *\/$/;"	e	enum:__anon282
TIM5_ExtTRGPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_ExtTRGPSC_TypeDef;$/;"	t	typeref:enum:__anon282
TIM5_ExtTRGPolarity_Inverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ExtTRGPolarity_Inverted     = ((uint8_t)0x80),   \/*!< External Trigger Polarity = inverted *\/$/;"	e	enum:__anon285
TIM5_ExtTRGPolarity_NonInverted	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ExtTRGPolarity_NonInverted  = ((uint8_t)0x00)    \/*!< External Trigger Polarity = non inverted *\/$/;"	e	enum:__anon285
TIM5_ExtTRGPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_ExtTRGPolarity_TypeDef;$/;"	t	typeref:enum:__anon285
TIM5_FLAG_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_Break    = ((uint16_t)0x0080),  \/*!< Break Flag *\/$/;"	e	enum:__anon292
TIM5_FLAG_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_CC1      = ((uint16_t)0x0002),  \/*!< Capture compare 1 Flag *\/$/;"	e	enum:__anon292
TIM5_FLAG_CC1OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_CC1OF    = ((uint16_t)0x0200),  \/*!< Capture compare 1 over capture Flag *\/$/;"	e	enum:__anon292
TIM5_FLAG_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_CC2      = ((uint16_t)0x0004),  \/*!< Capture compare 2 Flag *\/$/;"	e	enum:__anon292
TIM5_FLAG_CC2OF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_CC2OF    = ((uint16_t)0x0400)   \/*!< Capture compare 2 over capture Flag *\/$/;"	e	enum:__anon292
TIM5_FLAG_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_Trigger  = ((uint16_t)0x0040),  \/*!< Trigger Flag *\/$/;"	e	enum:__anon292
TIM5_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_FLAG_TypeDef;$/;"	t	typeref:enum:__anon292
TIM5_FLAG_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_FLAG_Update   = ((uint16_t)0x0001),  \/*!< Update Flag *\/$/;"	e	enum:__anon292
TIM5_ForcedAction_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ForcedAction_Active   = ((uint8_t)0x50),   \/*!< Output Reference is forced low *\/$/;"	e	enum:__anon264
TIM5_ForcedAction_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ForcedAction_Inactive = ((uint8_t)0x40)    \/*!< Output Reference is forced high *\/$/;"	e	enum:__anon264
TIM5_ForcedAction_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^TIM5_ForcedAction_TypeDef;$/;"	t	typeref:enum:__anon264
TIM5_ICPSC_DIV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICPSC_DIV1  = ((uint8_t)0x00),  \/*!< Input Capture Prescaler = 1 (one capture every 1 event) *\/$/;"	e	enum:__anon280
TIM5_ICPSC_DIV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICPSC_DIV2  = ((uint8_t)0x04),  \/*!< Input Capture Prescaler = 2 (one capture every 2 events) *\/$/;"	e	enum:__anon280
TIM5_ICPSC_DIV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICPSC_DIV4  = ((uint8_t)0x08),  \/*!< Input Capture Prescaler = 4 (one capture every 4 events) *\/$/;"	e	enum:__anon280
TIM5_ICPSC_DIV8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICPSC_DIV8  = ((uint8_t)0x0C)   \/*!< Input Capture Prescaler = 8 (one capture every 8 events) *\/$/;"	e	enum:__anon280
TIM5_ICPSC_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_ICPSC_TypeDef;$/;"	t	typeref:enum:__anon280
TIM5_ICPolarity_Falling	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICPolarity_Falling  = ((uint8_t)0x01)    \/*!< Input Capture on Falling Edge*\/$/;"	e	enum:__anon278
TIM5_ICPolarity_Rising	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICPolarity_Rising   = ((uint8_t)0x00),   \/*!< Input Capture on Rising Edge*\/$/;"	e	enum:__anon278
TIM5_ICPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_ICPolarity_TypeDef;$/;"	t	typeref:enum:__anon278
TIM5_ICSelection_DirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICSelection_DirectTI    = ((uint8_t)0x01),   \/*!< Input Capture mapped on the direct input*\/$/;"	e	enum:__anon279
TIM5_ICSelection_IndirectTI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICSelection_IndirectTI  = ((uint8_t)0x02),   \/*!< Input Capture mapped on the indirect input*\/$/;"	e	enum:__anon279
TIM5_ICSelection_TRGI	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_ICSelection_TRGI        = ((uint8_t)0x03)    \/*!< Input Capture mapped on the Trigger Input*\/$/;"	e	enum:__anon279
TIM5_ICSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_ICSelection_TypeDef;$/;"	t	typeref:enum:__anon279
TIM5_IT_Break	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_IT_Break    = ((uint8_t)0x80)    \/*!< Break Interrupt*\/$/;"	e	enum:__anon281
TIM5_IT_CC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_IT_CC1      = ((uint8_t)0x02),   \/*!< Capture Compare Channel1 Interrupt*\/$/;"	e	enum:__anon281
TIM5_IT_CC2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_IT_CC2      = ((uint8_t)0x04),   \/*!< Capture Compare Channel2 Interrupt*\/$/;"	e	enum:__anon281
TIM5_IT_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_IT_Trigger  = ((uint8_t)0x40),   \/*!< Trigger  Interrupt*\/$/;"	e	enum:__anon281
TIM5_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_IT_TypeDef;$/;"	t	typeref:enum:__anon281
TIM5_IT_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_IT_Update   = ((uint8_t)0x01),   \/*!< Update Interrupt*\/$/;"	e	enum:__anon281
TIM5_LockLevel_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_LockLevel_1    = ((uint8_t)0x01),   \/*!< Select Lock Level 1  *\/$/;"	e	enum:__anon275
TIM5_LockLevel_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_LockLevel_2    = ((uint8_t)0x02),   \/*!< Select Lock Level 2  *\/$/;"	e	enum:__anon275
TIM5_LockLevel_3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_LockLevel_3    = ((uint8_t)0x03)    \/*!< Select Lock Level 3  *\/$/;"	e	enum:__anon275
TIM5_LockLevel_Off	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_LockLevel_Off  = ((uint8_t)0x00),   \/*!< Lock option disabled *\/$/;"	e	enum:__anon275
TIM5_LockLevel_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_LockLevel_TypeDef;$/;"	t	typeref:enum:__anon275
TIM5_OCIdleState_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCIdleState_Reset  = ((uint8_t)0x00),   \/*!< Output Compare Idle state  = Reset *\/$/;"	e	enum:__anon277
TIM5_OCIdleState_Set	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCIdleState_Set    = ((uint8_t)0x01)    \/*!< Output Compare Idle state  = Set *\/$/;"	e	enum:__anon277
TIM5_OCIdleState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_OCIdleState_TypeDef;$/;"	t	typeref:enum:__anon277
TIM5_OCMode_Active	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCMode_Active    = ((uint8_t)0x10),   \/*!< Active Mode*\/$/;"	e	enum:__anon266
TIM5_OCMode_Inactive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCMode_Inactive  = ((uint8_t)0x20),   \/*!< Inactive Mode*\/$/;"	e	enum:__anon266
TIM5_OCMode_PWM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCMode_PWM1      = ((uint8_t)0x60),   \/*!< PWM Mode 1*\/$/;"	e	enum:__anon266
TIM5_OCMode_PWM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCMode_PWM2      = ((uint8_t)0x70)    \/*!< PWM Mode 2*\/$/;"	e	enum:__anon266
TIM5_OCMode_Timing	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCMode_Timing    = ((uint8_t)0x00),   \/*!< Timing (Frozen) Mode*\/$/;"	e	enum:__anon266
TIM5_OCMode_Toggle	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCMode_Toggle    = ((uint8_t)0x30),   \/*!< Toggle Mode*\/$/;"	e	enum:__anon266
TIM5_OCMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_OCMode_TypeDef;$/;"	t	typeref:enum:__anon266
TIM5_OCPolarity_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCPolarity_High   = ((uint8_t)0x00),   \/*!< Output compare polarity  = High *\/$/;"	e	enum:__anon270
TIM5_OCPolarity_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OCPolarity_Low    = ((uint8_t)0x01)    \/*!< Output compare polarity  = Low *\/$/;"	e	enum:__anon270
TIM5_OCPolarity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_OCPolarity_TypeDef;$/;"	t	typeref:enum:__anon270
TIM5_OPMode_Repetitive	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OPMode_Repetitive  = ((uint8_t)0x00)  \/*!< Repetitive Pulse mode (OPM inactive) *\/$/;"	e	enum:__anon267
TIM5_OPMode_Single	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OPMode_Single      = ((uint8_t)0x01), \/*!< Single one Pulse mode (OPM Active) *\/$/;"	e	enum:__anon267
TIM5_OPMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_OPMode_TypeDef;$/;"	t	typeref:enum:__anon267
TIM5_OSSIState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OSSIState_Disable   = ((uint8_t)0x00)    \/*!< Off-State Selection for Idle mode disabled  *\/$/;"	e	enum:__anon276
TIM5_OSSIState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OSSIState_Enable    = ((uint8_t)0x04),   \/*!< Off-State Selection for Idle mode enabled  *\/$/;"	e	enum:__anon276
TIM5_OSSIState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_OSSIState_TypeDef;$/;"	t	typeref:enum:__anon276
TIM5_OutputState_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OutputState_Disable   = ((uint8_t)0x00),   \/*!< Output compare State disabled (channel output disabled) *\/$/;"	e	enum:__anon271
TIM5_OutputState_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_OutputState_Enable    = ((uint8_t)0x01)    \/*!< Output compare State enabled (channel output enabled) *\/$/;"	e	enum:__anon271
TIM5_OutputState_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_OutputState_TypeDef;$/;"	t	typeref:enum:__anon271
TIM5_PSCReloadMode_Immediate	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_PSCReloadMode_Immediate   = ((uint8_t)0x01)    \/*!< Prescaler value is reloaded immediatly*\/$/;"	e	enum:__anon286
TIM5_PSCReloadMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_PSCReloadMode_TypeDef;$/;"	t	typeref:enum:__anon286
TIM5_PSCReloadMode_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_PSCReloadMode_Update      = ((uint8_t)0x00),   \/*!< Prescaler value is reloaded at every update*\/$/;"	e	enum:__anon286
TIM5_Prescaler_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_1     = ((uint8_t)0x00),   \/*!< Time base Prescaler = 1 (No effect)*\/$/;"	e	enum:__anon265
TIM5_Prescaler_128	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_128   = ((uint8_t)0x07)    \/*!< Time base Prescaler = 128 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_16	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_16    = ((uint8_t)0x04),   \/*!< Time base Prescaler = 16 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_2     = ((uint8_t)0x01),   \/*!< Time base Prescaler = 2 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_32	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_32    = ((uint8_t)0x05),   \/*!< Time base Prescaler = 32 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_4     = ((uint8_t)0x02),   \/*!< Time base Prescaler = 4 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_64	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_64    = ((uint8_t)0x06),   \/*!< Time base Prescaler = 64 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_8	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_Prescaler_8     = ((uint8_t)0x03),   \/*!< Time base Prescaler = 8 *\/$/;"	e	enum:__anon265
TIM5_Prescaler_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_Prescaler_TypeDef;$/;"	t	typeref:enum:__anon265
TIM5_SlaveMode_External1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_SlaveMode_External1  = ((uint8_t)0x07)   \/*!< Slave Mode Selection  = External 1*\/$/;"	e	enum:__anon291
TIM5_SlaveMode_Gated	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_SlaveMode_Gated      = ((uint8_t)0x05),  \/*!< Slave Mode Selection  = Gated*\/$/;"	e	enum:__anon291
TIM5_SlaveMode_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_SlaveMode_Reset      = ((uint8_t)0x04),  \/*!< Slave Mode Selection  = Reset*\/$/;"	e	enum:__anon291
TIM5_SlaveMode_Trigger	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_SlaveMode_Trigger    = ((uint8_t)0x06),  \/*!< Slave Mode Selection  = Trigger*\/$/;"	e	enum:__anon291
TIM5_SlaveMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_SlaveMode_TypeDef;$/;"	t	typeref:enum:__anon291
TIM5_TIxExternalCLK1Source_TI1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TIxExternalCLK1Source_TI1    = ((uint8_t)0x50),   \/*!< External Clock mode 1 source = TI1 *\/$/;"	e	enum:__anon284
TIM5_TIxExternalCLK1Source_TI1ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TIxExternalCLK1Source_TI1ED  = ((uint8_t)0x40),   \/*!< External Clock mode 1 source = TI1ED *\/$/;"	e	enum:__anon284
TIM5_TIxExternalCLK1Source_TI2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TIxExternalCLK1Source_TI2    = ((uint8_t)0x60)    \/*!< External Clock mode 1 source = TI2 *\/$/;"	e	enum:__anon284
TIM5_TIxExternalCLK1Source_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_TIxExternalCLK1Source_TypeDef;$/;"	t	typeref:enum:__anon284
TIM5_TRGOSource_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGOSource_Enable   = ((uint8_t)0x10),   \/*!< Trigger Output source = TIM5 is enabled*\/$/;"	e	enum:__anon290
TIM5_TRGOSource_OC1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGOSource_OC1      = ((uint8_t)0x30),   \/*!< Trigger Output source = output compare channel1  *\/$/;"	e	enum:__anon290
TIM5_TRGOSource_OC1REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGOSource_OC1REF   = ((uint8_t)0x40),   \/*!< Trigger Output source = output compare channel 1 reference *\/$/;"	e	enum:__anon290
TIM5_TRGOSource_OC2REF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGOSource_OC2REF   = ((uint8_t)0x50)    \/*!< Trigger Output source = output compare channel 2 reference *\/$/;"	e	enum:__anon290
TIM5_TRGOSource_Reset	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGOSource_Reset    = ((uint8_t)0x00),   \/*!< Trigger Output source = Reset*\/$/;"	e	enum:__anon290
TIM5_TRGOSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_TRGOSource_TypeDef;$/;"	t	typeref:enum:__anon290
TIM5_TRGOSource_Update	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGOSource_Update   = ((uint8_t)0x20),   \/*!< Trigger Output source = Update event*\/$/;"	e	enum:__anon290
TIM5_TRGSelection_ETRF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_ETRF     = ((uint8_t)0x70)   \/*!< TRIG Input source =  ETRF (External Trigger Input ) *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TI1FP1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TI1FP1   = ((uint8_t)0x50),  \/*!< TRIG Input source = TI1FP1 (Filtred Timer Input 1) *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TI1F_ED	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TI1F_ED  = ((uint8_t)0x40),  \/*!< TRIG Input source = TI1F_ED (TI1 Edge Detector)  *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TI2FP2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TI2FP2   = ((uint8_t)0x60),  \/*!< TRIG Input source = TI2FP2 (Filtred Timer Input 2)  *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TIM1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TIM1     = ((uint8_t)0x10),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TIM2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TIM2     = ((uint8_t)0x30),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TIM3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TIM3     = ((uint8_t)0x20),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TIM4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_TRGSelection_TIM4     = ((uint8_t)0x00),  \/*!< TRIG Input source =  TIM TRIG Output  *\/$/;"	e	enum:__anon283
TIM5_TRGSelection_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_TRGSelection_TypeDef;$/;"	t	typeref:enum:__anon283
TIM5_UpdateSource_Global	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_UpdateSource_Global   = ((uint8_t)0x00),   \/*!< Global Update request source *\/$/;"	e	enum:__anon289
TIM5_UpdateSource_Regular	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^  TIM5_UpdateSource_Regular  = ((uint8_t)0x01)    \/*!< Regular Update request source *\/$/;"	e	enum:__anon289
TIM5_UpdateSource_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	/^}TIM5_UpdateSource_TypeDef;$/;"	t	typeref:enum:__anon289
__STM8L15x_TIM5_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_tim5.h	24;"	d
IS_USART_ADDRESS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	342;"	d
IS_USART_BAUDRATE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	335;"	d
IS_USART_CLEAR_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	220;"	d
IS_USART_CLEAR_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	254;"	d
IS_USART_CLOCK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	289;"	d
IS_USART_CONFIG_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	229;"	d
IS_USART_CPHA	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	301;"	d
IS_USART_CPOL	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	295;"	d
IS_USART_DATA_9BITS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	349;"	d
IS_USART_DMAREQ	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	283;"	d
IS_USART_FLAG	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	205;"	d
IS_USART_GET_IT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	242;"	d
IS_USART_IRDAMODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	275;"	d
IS_USART_LASTBIT	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	307;"	d
IS_USART_MODE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	260;"	d
IS_USART_PARITY	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	330;"	d
IS_USART_STOPBITS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	322;"	d
IS_USART_WAKEUP	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	314;"	d
IS_USART_WORDLENGTH	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	267;"	d
USART_ADDRESS_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	341;"	d
USART_CPHA_1Edge	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_CPHA_1Edge     = (uint8_t)0x00,  \/*!< The first clock transition is the first data capture edge*\/$/;"	e	enum:__anon306
USART_CPHA_2Edge	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_CPHA_2Edge     = (uint8_t)0x02   \/*!< The second clock transition is the first data capture edge*\/$/;"	e	enum:__anon306
USART_CPHA_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_CPHA_TypeDef;$/;"	t	typeref:enum:__anon306
USART_CPOL_High	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_CPOL_High     = (uint8_t)0x04   \/*!< CK to 1 when idle.*\/$/;"	e	enum:__anon305
USART_CPOL_Low	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_CPOL_Low      = (uint8_t)0x00,  \/*!< CK to 0 when idle *\/$/;"	e	enum:__anon305
USART_CPOL_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_CPOL_TypeDef;$/;"	t	typeref:enum:__anon305
USART_Clock_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Clock_Disable    = (uint8_t)0x00,  \/*!< CK pin disabled *\/$/;"	e	enum:__anon304
USART_Clock_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Clock_Enable     = (uint8_t)0x08   \/*!< CK pin enabled *\/$/;"	e	enum:__anon304
USART_Clock_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_Clock_TypeDef;$/;"	t	typeref:enum:__anon304
USART_DATA_9BITS_MAX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	348;"	d
USART_DMAReq_RX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_DMAReq_RX    = (uint8_t)0x40   \/*!< Transmit DMA request Enable *\/$/;"	e	enum:__anon302
USART_DMAReq_TX	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_DMAReq_TX    = (uint8_t)0x80,  \/*!< Receive DMA request Enable *\/$/;"	e	enum:__anon302
USART_DMAReq_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_DMAReq_TypeDef;$/;"	t	typeref:enum:__anon302
USART_FLAG_FE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_FE    = (uint16_t)0x0002, \/*!< Framing Error flag *\/$/;"	e	enum:__anon294
USART_FLAG_IDLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_IDLE  = (uint16_t)0x0010, \/*!< Idle line detected flag *\/$/;"	e	enum:__anon294
USART_FLAG_NF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_NF    = (uint16_t)0x0004, \/*!< Noise error flag *\/$/;"	e	enum:__anon294
USART_FLAG_OR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_OR    = (uint16_t)0x0008, \/*!< OverRun error flag *\/$/;"	e	enum:__anon294
USART_FLAG_PE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_PE    = (uint16_t)0x0001, \/*!< Parity Error flag *\/$/;"	e	enum:__anon294
USART_FLAG_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_RXNE  = (uint16_t)0x0020, \/*!< Read Data Register Not Empty flag *\/$/;"	e	enum:__anon294
USART_FLAG_SBK	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_SBK   = (uint16_t)0x0101  \/*!< Send Break characters Flag *\/$/;"	e	enum:__anon294
USART_FLAG_TC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_FLAG_TC    = (uint16_t)0x0040, \/*!< Transmission Complete flag *\/$/;"	e	enum:__anon294
USART_FLAG_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^typedef enum { USART_FLAG_TXE   = (uint16_t)0x0080, \/*!< Transmit Data Register Empty flag *\/$/;"	e	enum:__anon294
USART_FLAG_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^             } USART_FLAG_TypeDef;$/;"	t	typeref:enum:__anon294
USART_IT_ERR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_ERR        = (uint16_t)0x0500, \/*!< Error interrupt *\/$/;"	e	enum:__anon295
USART_IT_FE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_FE         = (uint16_t)0x0101  \/*!< Frame Error interrupt *\/$/;"	e	enum:__anon295
USART_IT_IDLE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_IDLE       = (uint16_t)0x0244, \/*!< IDLE line interrupt *\/$/;"	e	enum:__anon295
USART_IT_NF	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_NF         = (uint16_t)0x0102, \/*!< Noise Error interrupt *\/$/;"	e	enum:__anon295
USART_IT_OR	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_OR         = (uint16_t)0x0235, \/*!< Overrun Error interrupt *\/$/;"	e	enum:__anon295
USART_IT_PE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_PE         = (uint16_t)0x0100, \/*!< Parity Error interrupt *\/$/;"	e	enum:__anon295
USART_IT_RXNE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_RXNE       = (uint16_t)0x0255, \/*!< Receive interrupt *\/$/;"	e	enum:__anon295
USART_IT_TC	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^               USART_IT_TC         = (uint16_t)0x0266, \/*!< Transmission Complete interrupt *\/$/;"	e	enum:__anon295
USART_IT_TXE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^typedef enum { USART_IT_TXE        = (uint16_t)0x0277, \/*!< Transmit interrupt *\/$/;"	e	enum:__anon295
USART_IT_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^             } USART_IT_TypeDef;$/;"	t	typeref:enum:__anon295
USART_IrDAMode_LowPower	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_IrDAMode_LowPower  = (uint8_t)0x01  \/*!< IrDA Low Power Mode *\/$/;"	e	enum:__anon303
USART_IrDAMode_Normal	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_IrDAMode_Normal    = (uint8_t)0x00, \/*!< IrDA Normal Mode   *\/$/;"	e	enum:__anon303
USART_IrDAMode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_IrDAMode_TypeDef;$/;"	t	typeref:enum:__anon303
USART_LINBreakDetectionLength_10BITS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_LINBreakDetectionLength_10BITS = (uint8_t)0x00, \/*!< 10 bits Lin Break detection *\/$/;"	e	enum:__anon299
USART_LINBreakDetectionLength_11BITS	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_LINBreakDetectionLength_11BITS = (uint8_t)0x01  \/*!< 11 bits Lin Break detection *\/$/;"	e	enum:__anon299
USART_LINBreakDetectionLength_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_LINBreakDetectionLength_TypeDef;$/;"	t	typeref:enum:__anon299
USART_LastBit_Disable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_LastBit_Disable  = (uint8_t)0x00,  \/*!< The clock pulse of the last data bit is not output to the SCLK pin.*\/$/;"	e	enum:__anon307
USART_LastBit_Enable	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_LastBit_Enable   = (uint8_t)0x01   \/*!< The clock pulse of the last data bit is output to the SCLK pin.*\/$/;"	e	enum:__anon307
USART_LastBit_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_LastBit_TypeDef;$/;"	t	typeref:enum:__anon307
USART_Mode_Rx	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Mode_Rx    = (uint8_t)0x04,  \/*!< Receive Enable *\/$/;"	e	enum:__anon301
USART_Mode_Tx	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Mode_Tx    = (uint8_t)0x08   \/*!< Transmit Enable *\/$/;"	e	enum:__anon301
USART_Mode_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_Mode_TypeDef;$/;"	t	typeref:enum:__anon301
USART_Parity_Even	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Parity_Even  = (uint8_t)0x04,      \/*!< Even Parity*\/$/;"	e	enum:__anon298
USART_Parity_No	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Parity_No    = (uint8_t)0x00,      \/*!< No Parity*\/$/;"	e	enum:__anon298
USART_Parity_Odd	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_Parity_Odd   = (uint8_t)0x06       \/*!< Odd Parity*\/$/;"	e	enum:__anon298
USART_Parity_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_Parity_TypeDef;$/;"	t	typeref:enum:__anon298
USART_StopBits_1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_StopBits_1   = (uint8_t)0x00, \/*!< One stop bit is transmitted at the end of frame*\/$/;"	e	enum:__anon297
USART_StopBits_1_5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_StopBits_1_5 = (uint8_t)0x30  \/*!< One and half stop bits*\/$/;"	e	enum:__anon297
USART_StopBits_2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_StopBits_2   = (uint8_t)0x20, \/*!< Two stop bits are transmitted at the end of frame*\/$/;"	e	enum:__anon297
USART_StopBits_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_StopBits_TypeDef;$/;"	t	typeref:enum:__anon297
USART_WakeUp_AddressMark	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_WakeUp_AddressMark    = (uint8_t)0x08  \/*!< 0x02 Address Mark wake up *\/$/;"	e	enum:__anon296
USART_WakeUp_IdleLine	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_WakeUp_IdleLine       = (uint8_t)0x00, \/*!< 0x01 Idle Line wake up *\/$/;"	e	enum:__anon296
USART_WakeUp_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_WakeUp_TypeDef;$/;"	t	typeref:enum:__anon296
USART_WordLength_8b	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_WordLength_8b = (uint8_t)0x00,  \/*!< 8 bits Data *\/$/;"	e	enum:__anon300
USART_WordLength_9b	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^  USART_WordLength_9b = (uint8_t)0x10   \/*!< 9 bits Data *\/$/;"	e	enum:__anon300
USART_WordLength_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	/^} USART_WordLength_TypeDef;$/;"	t	typeref:enum:__anon300
__STM8L15x_USART_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_usart.h	24;"	d
IS_WFE_SOURCE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	102;"	d
WFE_Source_ADC1_COMP_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_ADC1_COMP_EV = (uint16_t)0x0280, \/*!< ADC1, COMP1 and COMP2 interrupts        *\/$/;"	e	enum:__anon308
WFE_Source_AES_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_AES_EV       = (uint16_t)0x0440   \/*!< AES interrupt *\/$/;"	e	enum:__anon308
WFE_Source_DMA1CH01_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_DMA1CH01_EV  = (uint16_t)0x0340, \/*!< DMA1 channel 0 and  1 interrupt         *\/$/;"	e	enum:__anon308
WFE_Source_DMA1CH23_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_DMA1CH23_EV  = (uint16_t)0x0380,  \/*!< DMA1 channel 2 and  3  interrupt        *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV0     = (uint16_t)0x0110, \/*!< I\/O port interrupt from Pins 0          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV1     = (uint16_t)0x0120, \/*!< I\/O port interrupt from Pins 1          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV2	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV2     = (uint16_t)0x0140, \/*!< I\/O port interrupt from Pins 2          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV3	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV3     = (uint16_t)0x0180, \/*!< I\/O port interrupt from Pins 3          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV4	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV4     = (uint16_t)0x0201, \/*!< I\/O port interrupt from Pins 4          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV5	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV5     = (uint16_t)0x0202, \/*!< I\/O port interrupt from Pins 5          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV6	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV6     = (uint16_t)0x0204, \/*!< I\/O port interrupt from Pins 6          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EV7	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EV7     = (uint16_t)0x0208, \/*!< I\/O port interrupt from Pins 7          *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EVB_G	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EVB_G   = (uint16_t)0x0210, \/*!< I\/O port interrupt from port B and G    *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EVD_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EVD_H   = (uint16_t)0x0220, \/*!< I\/O port interrupt from Port D and H    *\/$/;"	e	enum:__anon308
WFE_Source_EXTI_EVE_F	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_EXTI_EVE_F   = (uint16_t)0x0240, \/*!< I\/O port interrupt from Port E and F    *\/$/;"	e	enum:__anon308
WFE_Source_I2C1_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_I2C1_EV      = (uint16_t)0x0310, \/*!< I2C1 Rx and Tx interrupt                *\/$/;"	e	enum:__anon308
WFE_Source_RTC_CSS_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_RTC_CSS_EV   = (uint16_t)0x0401,  \/*!< RTC or CSS on LSE event *\/$/;"	e	enum:__anon308
WFE_Source_SPI1_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_SPI1_EV      = (uint16_t)0x0308, \/*!< SPI1 Rx and Tx interrupt                *\/$/;"	e	enum:__anon308
WFE_Source_SPI2_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_SPI2_EV      = (uint16_t)0x0402,  \/*!< SPI2 Rx and Tx interrupt *\/$/;"	e	enum:__anon308
WFE_Source_TIM1_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM1_EV0     = (uint16_t)0x0104, \/*!< TIM1 Upadte\/Trigger and Break interrupt *\/$/;"	e	enum:__anon308
WFE_Source_TIM1_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM1_EV1     = (uint16_t)0x0108, \/*!< TIM1 Capture\/Compare interrupt          *\/$/;"	e	enum:__anon308
WFE_Source_TIM2_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM2_EV0     = (uint16_t)0x0101, \/*!< TIM2 Upadte\/Trigger and Break interrupt *\/$/;"	e	enum:__anon308
WFE_Source_TIM2_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM2_EV1     = (uint16_t)0x0102, \/*!< TIM2 Capture\/Compare interrupt          *\/$/;"	e	enum:__anon308
WFE_Source_TIM3_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM3_EV0     = (uint16_t)0x0301, \/*!< TIM3 Upadte\/Trigger and Break interrupt *\/$/;"	e	enum:__anon308
WFE_Source_TIM3_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM3_EV1     = (uint16_t)0x0302, \/*!< TIM3 Capture\/Compare interrupt          *\/$/;"	e	enum:__anon308
WFE_Source_TIM4_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM4_EV      = (uint16_t)0x0304, \/*!< TIM4 Upadte and Trigger interrupt       *\/$/;"	e	enum:__anon308
WFE_Source_TIM5_EV0	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM5_EV0     = (uint16_t)0x0410,  \/*!< TIM5 Upadte\/Trigger and Break interrupt *\/$/;"	e	enum:__anon308
WFE_Source_TIM5_EV1	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_TIM5_EV1     = (uint16_t)0x0420,  \/*!< TIM5 Capture\/Compare interrupt *\/$/;"	e	enum:__anon308
WFE_Source_TypeDef	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^} WFE_Source_TypeDef;$/;"	t	typeref:enum:__anon308
WFE_Source_USART1_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_USART1_EV    = (uint16_t)0x0320, \/*!< USART1 Rx and Tx interrupt              *\/$/;"	e	enum:__anon308
WFE_Source_USART2_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_USART2_EV    = (uint16_t)0x0404,  \/*!< USART2 Rx and Tx interrupt *\/$/;"	e	enum:__anon308
WFE_Source_USART3_EV	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	/^  WFE_Source_USART3_EV    = (uint16_t)0x0408,  \/*!< USART2 Rx and Tx interrupt *\/$/;"	e	enum:__anon308
__STM8L15x_WFE_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wfe.h	24;"	d
IS_WWDG_COUNTER_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wwdg.h	51;"	d
IS_WWDG_WINDOW_LIMIT_VALUE	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wwdg.h	45;"	d
__STM8L15x_WWDG_H	STM8L15x_StdPeriph_Driver\inc\stm8l15x_wwdg.h	24;"	d
ADC_AnalogWatchdogChannelSelect	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_AnalogWatchdogChannelSelect(ADC_TypeDef* ADCx,$/;"	f
ADC_AnalogWatchdogConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_AnalogWatchdogConfig(ADC_TypeDef* ADCx,$/;"	f
ADC_AnalogWatchdogThresholdsConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx,$/;"	f
ADC_ChannelCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_ChannelCmd(ADC_TypeDef* ADCx,$/;"	f
ADC_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_ClearFlag(ADC_TypeDef* ADCx,$/;"	f
ADC_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_ClearITPendingBit(ADC_TypeDef* ADCx,$/;"	f
ADC_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_Cmd(ADC_TypeDef* ADCx,$/;"	f
ADC_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_DMACmd(ADC_TypeDef* ADCx,$/;"	f
ADC_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_DeInit(ADC_TypeDef* ADCx)$/;"	f
ADC_ExternalTrigConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_ExternalTrigConfig(ADC_TypeDef* ADCx,$/;"	f
ADC_GetConversionValue	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)$/;"	f
ADC_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, ADC_FLAG_TypeDef ADC_FLAG)$/;"	f
ADC_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx,$/;"	f
ADC_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_ITConfig(ADC_TypeDef* ADCx,$/;"	f
ADC_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_Init(ADC_TypeDef* ADCx,$/;"	f
ADC_SamplingTimeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_SamplingTimeConfig(ADC_TypeDef* ADCx,$/;"	f
ADC_SchmittTriggerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_SchmittTriggerConfig(ADC_TypeDef* ADCx,$/;"	f
ADC_SoftwareStartConv	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)$/;"	f
ADC_TempSensorCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_TempSensorCmd(FunctionalState NewState)$/;"	f
ADC_VrefintCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_adc.c	/^void ADC_VrefintCmd(FunctionalState NewState)$/;"	f
AES_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_ClearFlag(AES_FLAG_TypeDef AES_FLAG)$/;"	f
AES_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_ClearITPendingBit(AES_IT_TypeDef AES_IT)$/;"	f
AES_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_Cmd(FunctionalState NewState)$/;"	f
AES_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_Config(AES_Operation_TypeDef AES_Operation)$/;"	f
AES_DMAConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_DMAConfig(AES_DMATransfer_TypeDef AES_DMATransfer, FunctionalState NewState)$/;"	f
AES_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_DeInit(void)$/;"	f
AES_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^FlagStatus AES_GetFlagStatus(AES_FLAG_TypeDef AES_FLAG)$/;"	f
AES_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^ITStatus AES_GetITStatus(AES_IT_TypeDef AES_IT)$/;"	f
AES_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_ITConfig(AES_IT_TypeDef AES_IT, FunctionalState NewState)$/;"	f
AES_ReadSubData	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^uint8_t AES_ReadSubData(void)$/;"	f
AES_ReadSubKey	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^uint8_t AES_ReadSubKey(void)$/;"	f
AES_WriteSubData	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_WriteSubData(uint8_t Data)$/;"	f
AES_WriteSubKey	STM8L15x_StdPeriph_Driver\src\stm8l15x_aes.c	/^void AES_WriteSubKey(uint8_t Key)$/;"	f
BEEP_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_beep.c	/^void BEEP_Cmd(FunctionalState NewState)$/;"	f
BEEP_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_beep.c	/^void BEEP_DeInit(void)$/;"	f
BEEP_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_beep.c	/^void BEEP_Init(BEEP_Frequency_TypeDef BEEP_Frequency)$/;"	f
BEEP_LSClockToTIMConnectCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_beep.c	/^void BEEP_LSClockToTIMConnectCmd(FunctionalState NewState)$/;"	f
BEEP_LSICalibrationConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_beep.c	/^void BEEP_LSICalibrationConfig(uint32_t LSIFreqHz)$/;"	f
CLK_AdjustHSICalibrationValue	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_AdjustHSICalibrationValue(uint8_t CLK_HSICalibrationValue)$/;"	f
CLK_BEEPClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_BEEPClockConfig(CLK_BEEPCLKSource_TypeDef CLK_BEEPCLKSource)$/;"	f
CLK_CCOConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_CCOConfig(CLK_CCOSource_TypeDef CLK_CCOSource, CLK_CCODiv_TypeDef CLK_CCODiv)$/;"	f
CLK_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_ClearFlag(void)$/;"	f
CLK_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_ClearITPendingBit(CLK_IT_TypeDef CLK_IT)$/;"	f
CLK_ClockSecuritySystemEnable	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_ClockSecuritySystemEnable(void)$/;"	f
CLK_ClockSecuritySytemDeglitchCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_ClockSecuritySytemDeglitchCmd(FunctionalState NewState)$/;"	f
CLK_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_DeInit(void)$/;"	f
CLK_GetClockFreq	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^uint32_t CLK_GetClockFreq(void)$/;"	f
CLK_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^FlagStatus CLK_GetFlagStatus(CLK_FLAG_TypeDef CLK_FLAG)$/;"	f
CLK_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^ITStatus CLK_GetITStatus(CLK_IT_TypeDef CLK_IT)$/;"	f
CLK_GetSYSCLKSource	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^CLK_SYSCLKSource_TypeDef CLK_GetSYSCLKSource(void)$/;"	f
CLK_HSEConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_HSEConfig(CLK_HSE_TypeDef CLK_HSE)$/;"	f
CLK_HSICmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_HSICmd(FunctionalState NewState)$/;"	f
CLK_HaltConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_HaltConfig(CLK_Halt_TypeDef CLK_Halt, FunctionalState NewState)$/;"	f
CLK_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_ITConfig(CLK_IT_TypeDef CLK_IT, FunctionalState NewState)$/;"	f
CLK_LSEClockSecuritySystemEnable	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_LSEClockSecuritySystemEnable(void)$/;"	f
CLK_LSEConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_LSEConfig(CLK_LSE_TypeDef CLK_LSE)$/;"	f
CLK_LSICmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_LSICmd(FunctionalState NewState)$/;"	f
CLK_MainRegulatorCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_MainRegulatorCmd(FunctionalState NewState)$/;"	f
CLK_PeripheralClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_PeripheralClockConfig(CLK_Peripheral_TypeDef CLK_Peripheral, FunctionalState NewState)$/;"	f
CLK_RTCCLKSwitchOnLSEFailureEnable	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_RTCCLKSwitchOnLSEFailureEnable(void)$/;"	f
CLK_RTCClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_RTCClockConfig(CLK_RTCCLKSource_TypeDef CLK_RTCCLKSource, CLK_RTCCLKDiv_TypeDef CLK_RTCCLKDiv)$/;"	f
CLK_SYSCLKDivConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_SYSCLKDivConfig(CLK_SYSCLKDiv_TypeDef CLK_SYSCLKDiv)$/;"	f
CLK_SYSCLKSourceConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_SYSCLKSourceConfig(CLK_SYSCLKSource_TypeDef CLK_SYSCLKSource)$/;"	f
CLK_SYSCLKSourceSwitchCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^void CLK_SYSCLKSourceSwitchCmd(FunctionalState NewState)$/;"	f
SYSDivFactor	STM8L15x_StdPeriph_Driver\src\stm8l15x_clk.c	/^__CONST uint8_t SYSDivFactor[5] =$/;"	v
COMP_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_ClearFlag(COMP_Selection_TypeDef COMP_Selection)$/;"	f
COMP_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_ClearITPendingBit(COMP_Selection_TypeDef COMP_Selection)$/;"	f
COMP_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_DeInit(void)$/;"	f
COMP_EdgeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_EdgeConfig(COMP_Selection_TypeDef COMP_Selection, COMP_Edge_TypeDef COMP_Edge)$/;"	f
COMP_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^FlagStatus COMP_GetFlagStatus(COMP_Selection_TypeDef COMP_Selection)$/;"	f
COMP_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^ITStatus COMP_GetITStatus(COMP_Selection_TypeDef COMP_Selection)$/;"	f
COMP_GetOutputLevel	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^COMP_OutputLevel_TypeDef COMP_GetOutputLevel(COMP_Selection_TypeDef COMP_Selection)$/;"	f
COMP_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_ITConfig(COMP_Selection_TypeDef COMP_Selection, FunctionalState NewState)$/;"	f
COMP_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_Init(COMP_InvertingInput_Typedef COMP_InvertingInput,$/;"	f
COMP_SchmittTriggerCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_SchmittTriggerCmd(FunctionalState NewState)$/;"	f
COMP_TriggerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_TriggerConfig(COMP_TriggerGroup_TypeDef COMP_TriggerGroup,$/;"	f
COMP_VrefintOutputCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_VrefintOutputCmd(FunctionalState NewState)$/;"	f
COMP_VrefintToCOMP1Connect	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_VrefintToCOMP1Connect(FunctionalState NewState)$/;"	f
COMP_WindowCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_comp.c	/^void COMP_WindowCmd(FunctionalState NewState)$/;"	f
DAC_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_ClearFlag(DAC_Channel_TypeDef DAC_Channel, DAC_FLAG_TypeDef DAC_FLAG)$/;"	f
DAC_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_ClearITPendingBit(DAC_Channel_TypeDef DAC_Channel, DAC_IT_TypeDef DAC_IT)$/;"	f
DAC_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_Cmd(DAC_Channel_TypeDef DAC_Channel, FunctionalState NewState)$/;"	f
DAC_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_DMACmd(DAC_Channel_TypeDef DAC_Channel, FunctionalState NewState)$/;"	f
DAC_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_DeInit(void)$/;"	f
DAC_DualSoftwareTriggerCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)$/;"	f
DAC_GetDataOutputValue	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^uint16_t DAC_GetDataOutputValue(DAC_Channel_TypeDef DAC_Channel)$/;"	f
DAC_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^FlagStatus DAC_GetFlagStatus(DAC_Channel_TypeDef DAC_Channel, DAC_FLAG_TypeDef DAC_FLAG)$/;"	f
DAC_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^ITStatus DAC_GetITStatus(DAC_Channel_TypeDef DAC_Channel, DAC_IT_TypeDef DAC_IT)$/;"	f
DAC_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_ITConfig(DAC_Channel_TypeDef DAC_Channel, DAC_IT_TypeDef DAC_IT,$/;"	f
DAC_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_Init(DAC_Channel_TypeDef DAC_Channel,$/;"	f
DAC_NoiseWaveLFSR	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_NoiseWaveLFSR(DAC_Channel_TypeDef DAC_Channel, DAC_LFSRUnmask_TypeDef DAC_LFSRUnmask)$/;"	f
DAC_SetChannel1Data	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_SetChannel1Data(DAC_Align_TypeDef DAC_Align, uint16_t DAC_Data)$/;"	f
DAC_SetChannel2Data	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_SetChannel2Data(DAC_Align_TypeDef DAC_Align, uint16_t DAC_Data)$/;"	f
DAC_SetDualChannelData	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_SetDualChannelData(DAC_Align_TypeDef DAC_Align,$/;"	f
DAC_SoftwareTriggerCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_SoftwareTriggerCmd(DAC_Channel_TypeDef DAC_Channel, FunctionalState NewState)$/;"	f
DAC_TriangleWaveAmplitude	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_TriangleWaveAmplitude(DAC_Channel_TypeDef DAC_Channel, DAC_TriangleAmplitude_TypeDef DAC_TriangleAmplitude)$/;"	f
DAC_WaveGenerationCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dac.c	/^void DAC_WaveGenerationCmd(DAC_Channel_TypeDef DAC_Channel,$/;"	f
DMA_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_ClearFlag(DMA_FLAG_TypeDef DMA_FLAG)$/;"	f
DMA_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_ClearITPendingBit(DMA_IT_TypeDef DMA_IT)$/;"	f
DMA_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_Cmd(DMA_Channel_TypeDef* DMA_Channelx, FunctionalState NewState)$/;"	f
DMA_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_DeInit(DMA_Channel_TypeDef* DMA_Channelx)$/;"	f
DMA_GetCurrDataCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^uint8_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMA_Channelx)$/;"	f
DMA_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^FlagStatus DMA_GetFlagStatus(DMA_FLAG_TypeDef DMA_FLAG)$/;"	f
DMA_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^ITStatus DMA_GetITStatus(DMA_IT_TypeDef DMA_IT)$/;"	f
DMA_GlobalCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_GlobalCmd(FunctionalState NewState)$/;"	f
DMA_GlobalDeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_GlobalDeInit(void)$/;"	f
DMA_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_ITConfig(DMA_Channel_TypeDef* DMA_Channelx, DMA_ITx_TypeDef DMA_ITx,$/;"	f
DMA_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_Init(DMA_Channel_TypeDef* DMA_Channelx,$/;"	f
DMA_SetCurrDataCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMA_Channelx, uint8_t DMA_Counter)$/;"	f
DMA_SetTimeOut	STM8L15x_StdPeriph_Driver\src\stm8l15x_dma.c	/^void DMA_SetTimeOut(uint8_t DMA_TimeOut)$/;"	f
EXTI_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^void EXTI_ClearITPendingBit(EXTI_IT_TypeDef EXTI_IT)$/;"	f
EXTI_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^void EXTI_DeInit(void)$/;"	f
EXTI_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^ITStatus EXTI_GetITStatus(EXTI_IT_TypeDef EXTI_IT)$/;"	f
EXTI_GetPinSensitivity	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^EXTI_Trigger_TypeDef EXTI_GetPinSensitivity(EXTI_Pin_TypeDef EXTI_Pin)$/;"	f
EXTI_GetPortSensitivity	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^EXTI_Trigger_TypeDef EXTI_GetPortSensitivity(EXTI_Port_TypeDef EXTI_Port)$/;"	f
EXTI_SelectPort	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^void EXTI_SelectPort(EXTI_Port_TypeDef EXTI_Port)$/;"	f
EXTI_SetHalfPortSelection	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^void EXTI_SetHalfPortSelection(EXTI_HalfPort_TypeDef EXTI_HalfPort,$/;"	f
EXTI_SetPinSensitivity	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^void EXTI_SetPinSensitivity(EXTI_Pin_TypeDef EXTI_Pin,$/;"	f
EXTI_SetPortSensitivity	STM8L15x_StdPeriph_Driver\src\stm8l15x_exti.c	/^void EXTI_SetPortSensitivity(EXTI_Port_TypeDef EXTI_Port,$/;"	f
FLASH_CLEAR_BYTE	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	65;"	d	file:
FLASH_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_DeInit(void)$/;"	f
FLASH_EraseByte	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_EraseByte(uint32_t Address)$/;"	f
FLASH_EraseOptionByte	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_EraseOptionByte(uint16_t Address)$/;"	f
FLASH_GetBootSize	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^uint16_t FLASH_GetBootSize(void)$/;"	f
FLASH_GetCodeSize	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^uint16_t FLASH_GetCodeSize(void)$/;"	f
FLASH_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^FlagStatus FLASH_GetFlagStatus(FLASH_FLAG_TypeDef FLASH_FLAG)$/;"	f
FLASH_GetProgrammingTime	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^FLASH_ProgramTime_TypeDef FLASH_GetProgrammingTime(void)$/;"	f
FLASH_GetReadOutProtectionStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^FunctionalState FLASH_GetReadOutProtectionStatus(void)$/;"	f
FLASH_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_ITConfig(FunctionalState NewState)$/;"	f
FLASH_Lock	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_Lock(FLASH_MemType_TypeDef FLASH_MemType)$/;"	f
FLASH_PowerWaitModeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_PowerWaitModeConfig(FLASH_Power_TypeDef FLASH_Power)$/;"	f
FLASH_ProgramByte	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_ProgramByte(uint32_t Address, uint8_t Data)$/;"	f
FLASH_ProgramOptionByte	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_ProgramOptionByte(uint16_t Address, uint8_t Data)$/;"	f
FLASH_ProgramWord	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_ProgramWord(uint32_t Address, uint32_t Data)$/;"	f
FLASH_ReadByte	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^uint8_t FLASH_ReadByte(uint32_t Address)$/;"	f
FLASH_SET_BYTE	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	66;"	d	file:
FLASH_SetProgrammingTime	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_SetProgrammingTime(FLASH_ProgramTime_TypeDef FLASH_ProgTime)$/;"	f
FLASH_Unlock	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	/^void FLASH_Unlock(FLASH_MemType_TypeDef FLASH_MemType)$/;"	f
OPERATION_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_flash.c	67;"	d	file:
GPIO_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_DeInit(GPIO_TypeDef* GPIOx)$/;"	f
GPIO_ExternalPullUpConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_ExternalPullUpConfig(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin, FunctionalState NewState)$/;"	f
GPIO_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_Init(GPIO_TypeDef* GPIOx,$/;"	f
GPIO_ReadInputData	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^uint8_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)$/;"	f
GPIO_ReadInputDataBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^BitStatus GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)$/;"	f
GPIO_ReadOutputData	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^uint8_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)$/;"	f
GPIO_ReadOutputDataBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^BitStatus GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin)$/;"	f
GPIO_ResetBits	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)$/;"	f
GPIO_SetBits	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)$/;"	f
GPIO_ToggleBits	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint8_t GPIO_Pin)$/;"	f
GPIO_Write	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_Write(GPIO_TypeDef* GPIOx, uint8_t GPIO_PortVal)$/;"	f
GPIO_WriteBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_gpio.c	/^void GPIO_WriteBit(GPIO_TypeDef* GPIOx, GPIO_Pin_TypeDef GPIO_Pin, BitAction GPIO_BitVal)$/;"	f
FLAG_Mask	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	51;"	d	file:
I2C_ARPCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_AckPositionConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_AckPositionConfig(I2C_TypeDef* I2Cx, I2C_AckPosition_TypeDef I2C_AckPosition)$/;"	f
I2C_AcknowledgeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_CalculatePEC	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_CheckEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, I2C_Event_TypeDef I2C_Event)$/;"	f
I2C_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_ClearFlag(I2C_TypeDef* I2Cx, I2C_FLAG_TypeDef I2C_FLAG)$/;"	f
I2C_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, I2C_IT_TypeDef I2C_IT)$/;"	f
I2C_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_DMALastTransferCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_DeInit(I2C_TypeDef* I2Cx)$/;"	f
I2C_DualAddressCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_FastModeDutyCycleConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, I2C_DutyCycle_TypeDef I2C_DutyCycle)$/;"	f
I2C_GeneralCallCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_GenerateSTART	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_GenerateSTOP	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, I2C_FLAG_TypeDef I2C_FLAG)$/;"	f
I2C_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, I2C_IT_TypeDef I2C_IT)$/;"	f
I2C_GetLastEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^I2C_Event_TypeDef I2C_GetLastEvent(I2C_TypeDef* I2Cx)$/;"	f
I2C_GetPEC	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)$/;"	f
I2C_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_ITConfig(I2C_TypeDef* I2Cx, I2C_IT_TypeDef I2C_IT, FunctionalState NewState)$/;"	f
I2C_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_Init(I2C_TypeDef* I2Cx, uint32_t OutputClockFrequency, uint16_t OwnAddress,$/;"	f
I2C_OwnAddress2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)$/;"	f
I2C_PECPositionConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, I2C_PECPosition_TypeDef I2C_PECPosition)$/;"	f
I2C_ReadRegister	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^uint8_t I2C_ReadRegister(I2C_TypeDef* I2Cx, I2C_Register_TypeDef I2C_Register)$/;"	f
I2C_ReceiveData	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)$/;"	f
I2C_SMBusAlertConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, I2C_SMBusAlert_TypeDef I2C_SMBusAlert)$/;"	f
I2C_Send7bitAddress	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, I2C_Direction_TypeDef I2C_Direction)$/;"	f
I2C_SendData	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)$/;"	f
I2C_SoftwareResetCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_StretchClockCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
I2C_TransmitPEC	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	/^void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)$/;"	f
ITEN_Mask	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	49;"	d	file:
OAR1_ADD0_Reset	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	54;"	d	file:
OAR1_ADD0_Set	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	53;"	d	file:
REGISTER_Mask	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	45;"	d	file:
REGISTER_SR1_Index	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	46;"	d	file:
REGISTER_SR2_Index	STM8L15x_StdPeriph_Driver\src\stm8l15x_i2c.c	47;"	d	file:
IRTIM_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_irtim.c	/^void IRTIM_Cmd(FunctionalState NewState)$/;"	f
IRTIM_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_irtim.c	/^void IRTIM_DeInit(void)$/;"	f
IRTIM_GetHighSinkODStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_irtim.c	/^FunctionalState IRTIM_GetHighSinkODStatus(void)$/;"	f
IRTIM_GetStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_irtim.c	/^FunctionalState IRTIM_GetStatus(void)$/;"	f
IRTIM_HighSinkODCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_irtim.c	/^void IRTIM_HighSinkODCmd(FunctionalState NewState)$/;"	f
ITC_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c	/^void ITC_DeInit(void)$/;"	f
ITC_GetCPUCC	STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c	/^uint8_t ITC_GetCPUCC(void)$/;"	f
ITC_GetSoftIntStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c	/^uint8_t ITC_GetSoftIntStatus(void)$/;"	f
ITC_GetSoftwarePriority	STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c	/^ITC_PriorityLevel_TypeDef ITC_GetSoftwarePriority(IRQn_TypeDef IRQn)$/;"	f
ITC_SetSoftwarePriority	STM8L15x_StdPeriph_Driver\src\stm8l15x_itc.c	/^void ITC_SetSoftwarePriority(IRQn_TypeDef IRQn, ITC_PriorityLevel_TypeDef ITC_PriorityLevel)$/;"	f
IWDG_Enable	STM8L15x_StdPeriph_Driver\src\stm8l15x_iwdg.c	/^void IWDG_Enable(void)$/;"	f
IWDG_ReloadCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_iwdg.c	/^void IWDG_ReloadCounter(void)$/;"	f
IWDG_SetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_iwdg.c	/^void IWDG_SetPrescaler(IWDG_Prescaler_TypeDef IWDG_Prescaler)$/;"	f
IWDG_SetReload	STM8L15x_StdPeriph_Driver\src\stm8l15x_iwdg.c	/^void IWDG_SetReload(uint8_t IWDG_Reload)$/;"	f
IWDG_WriteAccessCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_iwdg.c	/^void IWDG_WriteAccessCmd(IWDG_WriteAccess_TypeDef IWDG_WriteAccess)$/;"	f
LCD_BlinkConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_BlinkConfig(LCD_BlinkMode_TypeDef LCD_BlinkMode,$/;"	f
LCD_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_ClearFlag(void)$/;"	f
LCD_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_ClearITPendingBit(void)$/;"	f
LCD_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_Cmd(FunctionalState NewState)$/;"	f
LCD_ContrastConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_ContrastConfig(LCD_Contrast_TypeDef LCD_Contrast)$/;"	f
LCD_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_DeInit(void)$/;"	f
LCD_DeadTimeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_DeadTimeConfig(LCD_DeadTime_TypeDef LCD_DeadTime)$/;"	f
LCD_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^FlagStatus LCD_GetFlagStatus(void)$/;"	f
LCD_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^ITStatus LCD_GetITStatus(void)$/;"	f
LCD_HighDriveCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_HighDriveCmd(FunctionalState NewState)$/;"	f
LCD_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_ITConfig(FunctionalState NewState)$/;"	f
LCD_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_Init(LCD_Prescaler_TypeDef LCD_Prescaler, LCD_Divider_TypeDef LCD_Divider,$/;"	f
LCD_PageSelect	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_PageSelect(LCD_PageSelection_TypeDef LCD_PageSelection)$/;"	f
LCD_PortMaskConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_PortMaskConfig(LCD_PortMaskRegister_TypeDef LCD_PortMaskRegister, uint8_t LCD_Mask)$/;"	f
LCD_PulseOnDurationConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_PulseOnDurationConfig(LCD_PulseOnDuration_TypeDef LCD_PulseOnDuration)$/;"	f
LCD_WriteRAM	STM8L15x_StdPeriph_Driver\src\stm8l15x_lcd.c	/^void LCD_WriteRAM(LCD_RAMRegister_TypeDef LCD_RAMRegister, uint8_t LCD_Data)$/;"	f
PWR_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_DeInit(void)$/;"	f
PWR_FastWakeUpCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_FastWakeUpCmd(FunctionalState NewState)$/;"	f
PWR_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^FlagStatus PWR_GetFlagStatus(PWR_FLAG_TypeDef PWR_FLAG)$/;"	f
PWR_PVDClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_PVDClearFlag(void)$/;"	f
PWR_PVDClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_PVDClearITPendingBit(void)$/;"	f
PWR_PVDCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_PVDCmd(FunctionalState NewState)$/;"	f
PWR_PVDGetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^ITStatus PWR_PVDGetITStatus(void)$/;"	f
PWR_PVDITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_PVDITConfig(FunctionalState NewState)$/;"	f
PWR_PVDLevelConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_PVDLevelConfig(PWR_PVDLevel_TypeDef PWR_PVDLevel)$/;"	f
PWR_UltraLowPowerCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_pwr.c	/^void PWR_UltraLowPowerCmd(FunctionalState NewState)$/;"	f
RST_CR_MASK	STM8L15x_StdPeriph_Driver\src\stm8l15x_rst.c	34;"	d	file:
RST_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_rst.c	/^void RST_ClearFlag(RST_FLAG_TypeDef RST_Flag)$/;"	f
RST_GPOutputEnable	STM8L15x_StdPeriph_Driver\src\stm8l15x_rst.c	/^void RST_GPOutputEnable(void)$/;"	f
RST_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_rst.c	/^FlagStatus RST_GetFlagStatus(RST_FLAG_TypeDef RST_Flag)$/;"	f
ALRAWF_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	34;"	d	file:
Bcd2ToByte	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^static uint8_t Bcd2ToByte(uint8_t Value)$/;"	f	file:
ByteToBcd2	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^static uint8_t ByteToBcd2(uint8_t Value)$/;"	f	file:
INITF_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	32;"	d	file:
INIT_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	30;"	d	file:
RECALPF_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	35;"	d	file:
RSF_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	31;"	d	file:
RTC_AlarmCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_AlarmCmd(FunctionalState NewState)$/;"	f
RTC_AlarmStructInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)$/;"	f
RTC_AlarmSubSecondConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_AlarmSubSecondConfig(uint16_t RTC_AlarmSubSecondValue,$/;"	f
RTC_BypassShadowCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_BypassShadowCmd(FunctionalState NewState)$/;"	f
RTC_CalibOutputCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_CalibOutputCmd(FunctionalState NewState)$/;"	f
RTC_CalibOutputConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_CalibOutputConfig(RTC_CalibOutput_TypeDef RTC_CalibOutput)$/;"	f
RTC_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_ClearFlag(RTC_Flag_TypeDef RTC_FLAG)$/;"	f
RTC_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_ClearITPendingBit(RTC_IT_TypeDef RTC_IT)$/;"	f
RTC_DateStructInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)$/;"	f
RTC_DayLightSavingConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_DayLightSavingConfig(RTC_DayLightSaving_TypeDef RTC_DayLightSaving,$/;"	f
RTC_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_DeInit(void)$/;"	f
RTC_EnterInitMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_EnterInitMode(void)$/;"	f
RTC_ExitInitMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_ExitInitMode(void)$/;"	f
RTC_GetAlarm	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_GetAlarm(RTC_Format_TypeDef RTC_Format,$/;"	f
RTC_GetDate	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_GetDate(RTC_Format_TypeDef RTC_Format,$/;"	f
RTC_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^FlagStatus RTC_GetFlagStatus(RTC_Flag_TypeDef RTC_FLAG)$/;"	f
RTC_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ITStatus RTC_GetITStatus(RTC_IT_TypeDef RTC_IT)$/;"	f
RTC_GetStoreOperation	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^RTC_StoreOperation_TypeDef  RTC_GetStoreOperation(void)$/;"	f
RTC_GetSubSecond	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^uint16_t RTC_GetSubSecond(void)$/;"	f
RTC_GetTime	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_GetTime(RTC_Format_TypeDef RTC_Format,$/;"	f
RTC_GetWakeUpCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^uint16_t RTC_GetWakeUpCounter(void)$/;"	f
RTC_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_ITConfig(RTC_IT_TypeDef RTC_IT, FunctionalState NewState)$/;"	f
RTC_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)$/;"	f
RTC_OutputConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_OutputConfig(RTC_Output_TypeDef RTC_Output,$/;"	f
RTC_RatioCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_RatioCmd(FunctionalState NewState)$/;"	f
RTC_SetAlarm	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_SetAlarm(RTC_Format_TypeDef RTC_Format,$/;"	f
RTC_SetDate	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_SetDate(RTC_Format_TypeDef RTC_Format,$/;"	f
RTC_SetTime	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_SetTime(RTC_Format_TypeDef RTC_Format,$/;"	f
RTC_SetWakeUpCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_SetWakeUpCounter(uint16_t RTC_WakeupCounter)$/;"	f
RTC_SmoothCalibConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_SmoothCalibConfig(RTC_SmoothCalibPeriod_TypeDef RTC_SmoothCalibPeriod,$/;"	f
RTC_StructInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)$/;"	f
RTC_SynchroShiftConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_SynchroShiftConfig(RTC_ShiftAdd1S_TypeDef RTC_ShiftAdd1S,$/;"	f
RTC_TamperCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_TamperCmd(RTC_Tamper_TypeDef RTC_Tamper,$/;"	f
RTC_TamperFilterConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_TamperFilterConfig(RTC_TamperFilter_TypeDef RTC_TamperFilter)$/;"	f
RTC_TamperLevelConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_TamperLevelConfig(RTC_Tamper_TypeDef RTC_Tamper,$/;"	f
RTC_TamperPinsPrechargeDuration	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_TamperPinsPrechargeDuration(RTC_TamperPrechargeDuration_TypeDef RTC_TamperPrechargeDuration)$/;"	f
RTC_TamperSamplingFreqConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_TamperSamplingFreqConfig(RTC_TamperSamplingFreq_TypeDef RTC_TamperSamplingFreq)$/;"	f
RTC_TimeStructInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)$/;"	f
RTC_WaitForSynchro	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_WaitForSynchro(void)$/;"	f
RTC_WakeUpClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_WakeUpClockConfig(RTC_WakeUpClock_TypeDef RTC_WakeUpClock)$/;"	f
RTC_WakeUpCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)$/;"	f
RTC_WriteProtectionCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	/^void RTC_WriteProtectionCmd(FunctionalState NewState)$/;"	f
SHPF_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	36;"	d	file:
TEN_VALUE_BCD	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	38;"	d	file:
TEN_VALUE_BIN	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	39;"	d	file:
WUTWF_TIMEOUT	STM8L15x_StdPeriph_Driver\src\stm8l15x_rtc.c	33;"	d	file:
SPI_BiDirectionalLineConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, SPI_Direction_TypeDef SPI_Direction)$/;"	f
SPI_CalculateCRCCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_CalculateCRCCmd(SPI_TypeDef* SPIx, FunctionalState NewState)$/;"	f
SPI_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_ClearFlag(SPI_TypeDef* SPIx, SPI_FLAG_TypeDef SPI_FLAG)$/;"	f
SPI_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_ClearITPendingBit(SPI_TypeDef* SPIx, SPI_IT_TypeDef SPI_IT)$/;"	f
SPI_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)$/;"	f
SPI_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_DMACmd(SPI_TypeDef* SPIx, SPI_DMAReq_TypeDef SPI_DMAReq, FunctionalState NewState)$/;"	f
SPI_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_DeInit(SPI_TypeDef* SPIx)$/;"	f
SPI_GetCRC	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^uint8_t SPI_GetCRC(SPI_TypeDef* SPIx, SPI_CRC_TypeDef SPI_CRC)$/;"	f
SPI_GetCRCPolynomial	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^uint8_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)$/;"	f
SPI_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^FlagStatus SPI_GetFlagStatus(SPI_TypeDef* SPIx, SPI_FLAG_TypeDef SPI_FLAG)$/;"	f
SPI_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^ITStatus SPI_GetITStatus(SPI_TypeDef* SPIx, SPI_IT_TypeDef SPI_IT)$/;"	f
SPI_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_ITConfig(SPI_TypeDef* SPIx, SPI_IT_TypeDef SPI_IT, FunctionalState NewState)$/;"	f
SPI_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_Init(SPI_TypeDef* SPIx, SPI_FirstBit_TypeDef SPI_FirstBit,$/;"	f
SPI_NSSInternalSoftwareCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_NSSInternalSoftwareCmd(SPI_TypeDef* SPIx, FunctionalState NewState)$/;"	f
SPI_ReceiveData	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^uint8_t SPI_ReceiveData(SPI_TypeDef* SPIx)$/;"	f
SPI_ResetCRC	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_ResetCRC(SPI_TypeDef* SPIx)$/;"	f
SPI_SendData	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_SendData(SPI_TypeDef* SPIx, uint8_t Data)$/;"	f
SPI_TransmitCRC	STM8L15x_StdPeriph_Driver\src\stm8l15x_spi.c	/^void SPI_TransmitCRC(SPI_TypeDef* SPIx)$/;"	f
SYSCFG_REMAPDMAChannelConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_REMAPDMAChannelConfig(REMAP_DMAChannel_TypeDef REMAP_DMAChannel)$/;"	f
SYSCFG_REMAPDeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_REMAPDeInit(void)$/;"	f
SYSCFG_REMAPPinConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_REMAPPinConfig(REMAP_Pin_TypeDef REMAP_Pin, FunctionalState NewState)$/;"	f
SYSCFG_RIAnalogSwitchConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_RIAnalogSwitchConfig(RI_AnalogSwitch_TypeDef RI_AnalogSwitch,$/;"	f
SYSCFG_RIDeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_RIDeInit(void)$/;"	f
SYSCFG_RIIOSwitchConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_RIIOSwitchConfig(RI_IOSwitch_TypeDef RI_IOSwitch,$/;"	f
SYSCFG_RIResistorConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_RIResistorConfig(RI_Resistor_TypeDef RI_Resistor, FunctionalState NewState)$/;"	f
SYSCFG_RITIMInputCaptureConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_syscfg.c	/^void SYSCFG_RITIMInputCaptureConfig(RI_InputCapture_TypeDef RI_InputCapture,$/;"	f
TI1_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^static void TI1_Config(uint8_t TIM1_ICPolarity, uint8_t TIM1_ICSelection, uint8_t TIM1_ICFilter)$/;"	f	file:
TI2_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^static void TI2_Config(uint8_t TIM1_ICPolarity, uint8_t TIM1_ICSelection, uint8_t TIM1_ICFilter)$/;"	f	file:
TI3_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^static void TI3_Config(uint8_t TIM1_ICPolarity, uint8_t TIM1_ICSelection, uint8_t TIM1_ICFilter)$/;"	f	file:
TI4_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^static void TI4_Config(uint8_t TIM1_ICPolarity, uint8_t TIM1_ICSelection, uint8_t TIM1_ICFilter)$/;"	f	file:
TIM1_ARRPreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ARRPreloadConfig(FunctionalState NewState)$/;"	f
TIM1_BDTRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_BDTRConfig(TIM1_OSSIState_TypeDef TIM1_OSSIState,$/;"	f
TIM1_CCPreloadControl	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_CCPreloadControl(FunctionalState NewState)$/;"	f
TIM1_CCxCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_CCxCmd(TIM1_Channel_TypeDef TIM1_Channel, FunctionalState NewState)$/;"	f
TIM1_CCxNCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_CCxNCmd(TIM1_Channel_TypeDef TIM1_Channel, FunctionalState NewState)$/;"	f
TIM1_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ClearFlag(TIM1_FLAG_TypeDef TIM1_FLAG)$/;"	f
TIM1_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ClearITPendingBit(TIM1_IT_TypeDef TIM1_IT)$/;"	f
TIM1_ClearOC1Ref	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ClearOC1Ref(FunctionalState NewState)$/;"	f
TIM1_ClearOC2Ref	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ClearOC2Ref(FunctionalState NewState)$/;"	f
TIM1_ClearOC3Ref	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ClearOC3Ref(FunctionalState NewState)$/;"	f
TIM1_ClearOC4Ref	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ClearOC4Ref(FunctionalState NewState)$/;"	f
TIM1_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_Cmd(FunctionalState NewState)$/;"	f
TIM1_CounterModeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_CounterModeConfig(TIM1_CounterMode_TypeDef TIM1_CounterMode)$/;"	f
TIM1_CtrlPWMOutputs	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_CtrlPWMOutputs(FunctionalState NewState)$/;"	f
TIM1_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_DMACmd(TIM1_DMASource_TypeDef TIM1_DMASource, FunctionalState NewState)$/;"	f
TIM1_DMAConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_DMAConfig(TIM1_DMABase_TypeDef TIM1_DMABase,$/;"	f
TIM1_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_DeInit(void)$/;"	f
TIM1_ETRClockMode1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ETRClockMode1Config(TIM1_ExtTRGPSC_TypeDef TIM1_ExtTRGPrescaler,$/;"	f
TIM1_ETRClockMode2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ETRClockMode2Config(TIM1_ExtTRGPSC_TypeDef TIM1_ExtTRGPrescaler,$/;"	f
TIM1_ETRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ETRConfig(TIM1_ExtTRGPSC_TypeDef TIM1_ExtTRGPrescaler,$/;"	f
TIM1_EncoderInterfaceConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_EncoderInterfaceConfig(TIM1_EncoderMode_TypeDef TIM1_EncoderMode,$/;"	f
TIM1_ForcedOC1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ForcedOC1Config(TIM1_ForcedAction_TypeDef TIM1_ForcedAction)$/;"	f
TIM1_ForcedOC2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ForcedOC2Config(TIM1_ForcedAction_TypeDef TIM1_ForcedAction)$/;"	f
TIM1_ForcedOC3Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ForcedOC3Config(TIM1_ForcedAction_TypeDef TIM1_ForcedAction)$/;"	f
TIM1_GenerateEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_GenerateEvent(TIM1_EventSource_TypeDef TIM1_EventSource)$/;"	f
TIM1_GetCapture1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^uint16_t TIM1_GetCapture1(void)$/;"	f
TIM1_GetCapture2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^uint16_t TIM1_GetCapture2(void)$/;"	f
TIM1_GetCapture3	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^uint16_t TIM1_GetCapture3(void)$/;"	f
TIM1_GetCapture4	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^uint16_t TIM1_GetCapture4(void)$/;"	f
TIM1_GetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^uint16_t TIM1_GetCounter(void)$/;"	f
TIM1_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^FlagStatus TIM1_GetFlagStatus(TIM1_FLAG_TypeDef TIM1_FLAG)$/;"	f
TIM1_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^ITStatus TIM1_GetITStatus(TIM1_IT_TypeDef TIM1_IT)$/;"	f
TIM1_GetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^uint16_t TIM1_GetPrescaler(void)$/;"	f
TIM1_ICInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ICInit(TIM1_Channel_TypeDef TIM1_Channel,$/;"	f
TIM1_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_ITConfig(TIM1_IT_TypeDef  TIM1_IT, FunctionalState NewState)$/;"	f
TIM1_InternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_InternalClockConfig(void)$/;"	f
TIM1_OC1FastConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC1FastConfig(FunctionalState NewState)$/;"	f
TIM1_OC1Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC1Init(TIM1_OCMode_TypeDef TIM1_OCMode,$/;"	f
TIM1_OC1NPolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC1NPolarityConfig(TIM1_OCNPolarity_TypeDef TIM1_OCNPolarity)$/;"	f
TIM1_OC1PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC1PolarityConfig(TIM1_OCPolarity_TypeDef TIM1_OCPolarity)$/;"	f
TIM1_OC1PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC1PreloadConfig(FunctionalState NewState)$/;"	f
TIM1_OC2FastConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC2FastConfig(FunctionalState NewState)$/;"	f
TIM1_OC2Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC2Init(TIM1_OCMode_TypeDef TIM1_OCMode,$/;"	f
TIM1_OC2NPolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC2NPolarityConfig(TIM1_OCNPolarity_TypeDef TIM1_OCNPolarity)$/;"	f
TIM1_OC2PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC2PolarityConfig(TIM1_OCPolarity_TypeDef TIM1_OCPolarity)$/;"	f
TIM1_OC2PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC2PreloadConfig(FunctionalState NewState)$/;"	f
TIM1_OC3FastConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC3FastConfig(FunctionalState NewState)$/;"	f
TIM1_OC3Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC3Init(TIM1_OCMode_TypeDef TIM1_OCMode,$/;"	f
TIM1_OC3NPolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC3NPolarityConfig(TIM1_OCNPolarity_TypeDef TIM1_OCNPolarity)$/;"	f
TIM1_OC3PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC3PolarityConfig(TIM1_OCPolarity_TypeDef TIM1_OCPolarity)$/;"	f
TIM1_OC3PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC3PreloadConfig(FunctionalState NewState)$/;"	f
TIM1_OC4PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_OC4PreloadConfig(FunctionalState NewState)$/;"	f
TIM1_PWMIConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_PWMIConfig(TIM1_Channel_TypeDef TIM1_Channel,$/;"	f
TIM1_PrescalerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_PrescalerConfig(uint16_t Prescaler,$/;"	f
TIM1_SelectCCDMA	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectCCDMA(FunctionalState NewState)$/;"	f
TIM1_SelectCOM	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectCOM(FunctionalState NewState)$/;"	f
TIM1_SelectHallSensor	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectHallSensor(FunctionalState NewState)$/;"	f
TIM1_SelectInputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectInputTrigger(TIM1_TRGSelection_TypeDef TIM1_InputTriggerSource)$/;"	f
TIM1_SelectMasterSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectMasterSlaveMode(FunctionalState NewState)$/;"	f
TIM1_SelectOCREFClear	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectOCREFClear(TIM1_OCReferenceClear_TypeDef TIM1_OCReferenceClear)$/;"	f
TIM1_SelectOCxM	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectOCxM(TIM1_Channel_TypeDef TIM1_Channel, TIM1_OCMode_TypeDef TIM1_OCMode)$/;"	f
TIM1_SelectOnePulseMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectOnePulseMode(TIM1_OPMode_TypeDef TIM1_OPMode)$/;"	f
TIM1_SelectOutputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectOutputTrigger(TIM1_TRGOSource_TypeDef TIM1_TRGOSource)$/;"	f
TIM1_SelectSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SelectSlaveMode(TIM1_SlaveMode_TypeDef TIM1_SlaveMode)$/;"	f
TIM1_SetAutoreload	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetAutoreload(uint16_t Autoreload)$/;"	f
TIM1_SetCompare1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetCompare1(uint16_t Compare1)$/;"	f
TIM1_SetCompare2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetCompare2(uint16_t Compare2)$/;"	f
TIM1_SetCompare3	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetCompare3(uint16_t Compare3)$/;"	f
TIM1_SetCompare4	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetCompare4(uint16_t Compare4)$/;"	f
TIM1_SetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetCounter(uint16_t Counter)$/;"	f
TIM1_SetIC1Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetIC1Prescaler(TIM1_ICPSC_TypeDef TIM1_IC1Prescaler)$/;"	f
TIM1_SetIC2Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetIC2Prescaler(TIM1_ICPSC_TypeDef TIM1_IC2Prescaler)$/;"	f
TIM1_SetIC3Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetIC3Prescaler(TIM1_ICPSC_TypeDef TIM1_IC3Prescaler)$/;"	f
TIM1_SetIC4Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_SetIC4Prescaler(TIM1_ICPSC_TypeDef TIM1_IC4Prescaler)$/;"	f
TIM1_TIxExternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_TIxExternalClockConfig(TIM1_TIxExternalCLK1Source_TypeDef TIM1_TIxExternalCLKSource,$/;"	f
TIM1_TimeBaseInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_TimeBaseInit(uint16_t TIM1_Prescaler,$/;"	f
TIM1_UpdateDisableConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_UpdateDisableConfig(FunctionalState NewState)$/;"	f
TIM1_UpdateRequestConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim1.c	/^void TIM1_UpdateRequestConfig(TIM1_UpdateSource_TypeDef TIM1_UpdateSource)$/;"	f
TI1_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^static void TI1_Config(TIM2_ICPolarity_TypeDef TIM2_ICPolarity, \\$/;"	f	file:
TI2_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^static void TI2_Config(TIM2_ICPolarity_TypeDef TIM2_ICPolarity,$/;"	f	file:
TIM2_ARRPreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ARRPreloadConfig(FunctionalState NewState)$/;"	f
TIM2_BKRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_BKRConfig(TIM2_OSSIState_TypeDef TIM2_OSSIState,$/;"	f
TIM2_CCxCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_CCxCmd(TIM2_Channel_TypeDef TIM2_Channel,$/;"	f
TIM2_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ClearFlag(TIM2_FLAG_TypeDef TIM2_FLAG)$/;"	f
TIM2_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ClearITPendingBit(TIM2_IT_TypeDef TIM2_IT)$/;"	f
TIM2_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_Cmd(FunctionalState NewState)$/;"	f
TIM2_CounterModeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_CounterModeConfig(TIM2_CounterMode_TypeDef TIM2_CounterMode)$/;"	f
TIM2_CtrlPWMOutputs	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_CtrlPWMOutputs(FunctionalState NewState)$/;"	f
TIM2_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_DMACmd( TIM2_DMASource_TypeDef TIM2_DMASource, FunctionalState NewState)$/;"	f
TIM2_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_DeInit(void)$/;"	f
TIM2_ETRClockMode1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ETRClockMode1Config(TIM2_ExtTRGPSC_TypeDef TIM2_ExtTRGPrescaler,$/;"	f
TIM2_ETRClockMode2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ETRClockMode2Config(TIM2_ExtTRGPSC_TypeDef TIM2_ExtTRGPrescaler,$/;"	f
TIM2_ETRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ETRConfig(TIM2_ExtTRGPSC_TypeDef TIM2_ExtTRGPrescaler,$/;"	f
TIM2_EncoderInterfaceConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_EncoderInterfaceConfig(TIM2_EncoderMode_TypeDef TIM2_EncoderMode,$/;"	f
TIM2_ForcedOC1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ForcedOC1Config(TIM2_ForcedAction_TypeDef TIM2_ForcedAction)$/;"	f
TIM2_ForcedOC2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ForcedOC2Config(TIM2_ForcedAction_TypeDef TIM2_ForcedAction)$/;"	f
TIM2_GenerateEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_GenerateEvent(TIM2_EventSource_TypeDef TIM2_EventSource)$/;"	f
TIM2_GetCapture1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^uint16_t TIM2_GetCapture1(void)$/;"	f
TIM2_GetCapture2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^uint16_t TIM2_GetCapture2(void)$/;"	f
TIM2_GetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^uint16_t TIM2_GetCounter(void)$/;"	f
TIM2_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^FlagStatus TIM2_GetFlagStatus(TIM2_FLAG_TypeDef TIM2_FLAG)$/;"	f
TIM2_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^ITStatus TIM2_GetITStatus(TIM2_IT_TypeDef TIM2_IT)$/;"	f
TIM2_GetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^TIM2_Prescaler_TypeDef TIM2_GetPrescaler(void)$/;"	f
TIM2_ICInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ICInit(TIM2_Channel_TypeDef TIM2_Channel,$/;"	f
TIM2_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_ITConfig(TIM2_IT_TypeDef TIM2_IT, FunctionalState NewState)$/;"	f
TIM2_InternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_InternalClockConfig(void)$/;"	f
TIM2_OC1FastCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC1FastCmd(FunctionalState NewState)$/;"	f
TIM2_OC1Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC1Init(TIM2_OCMode_TypeDef TIM2_OCMode,$/;"	f
TIM2_OC1PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC1PolarityConfig(TIM2_OCPolarity_TypeDef TIM2_OCPolarity)$/;"	f
TIM2_OC1PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC1PreloadConfig(FunctionalState NewState)$/;"	f
TIM2_OC2FastCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC2FastCmd(FunctionalState NewState)$/;"	f
TIM2_OC2Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC2Init(TIM2_OCMode_TypeDef TIM2_OCMode,$/;"	f
TIM2_OC2PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC2PolarityConfig(TIM2_OCPolarity_TypeDef TIM2_OCPolarity)$/;"	f
TIM2_OC2PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_OC2PreloadConfig(FunctionalState NewState)$/;"	f
TIM2_PWMIConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_PWMIConfig(TIM2_Channel_TypeDef TIM2_Channel,$/;"	f
TIM2_PrescalerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_PrescalerConfig(TIM2_Prescaler_TypeDef Prescaler,$/;"	f
TIM2_SelectCCDMA	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectCCDMA(FunctionalState NewState)$/;"	f
TIM2_SelectHallSensor	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectHallSensor(FunctionalState NewState)$/;"	f
TIM2_SelectInputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectInputTrigger(TIM2_TRGSelection_TypeDef TIM2_InputTriggerSource)$/;"	f
TIM2_SelectMasterSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectMasterSlaveMode(FunctionalState NewState)$/;"	f
TIM2_SelectOCxM	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectOCxM(TIM2_Channel_TypeDef TIM2_Channel,$/;"	f
TIM2_SelectOnePulseMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectOnePulseMode(TIM2_OPMode_TypeDef TIM2_OPMode)$/;"	f
TIM2_SelectOutputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectOutputTrigger(TIM2_TRGOSource_TypeDef TIM2_TRGOSource)$/;"	f
TIM2_SelectSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SelectSlaveMode(TIM2_SlaveMode_TypeDef TIM2_SlaveMode)$/;"	f
TIM2_SetAutoreload	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SetAutoreload(uint16_t Autoreload)$/;"	f
TIM2_SetCompare1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SetCompare1(uint16_t Compare)$/;"	f
TIM2_SetCompare2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SetCompare2(uint16_t Compare)$/;"	f
TIM2_SetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SetCounter(uint16_t Counter)$/;"	f
TIM2_SetIC1Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SetIC1Prescaler(TIM2_ICPSC_TypeDef TIM2_IC1Prescaler)$/;"	f
TIM2_SetIC2Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_SetIC2Prescaler(TIM2_ICPSC_TypeDef TIM2_IC2Prescaler)$/;"	f
TIM2_TIxExternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_TIxExternalClockConfig(TIM2_TIxExternalCLK1Source_TypeDef TIM2_TIxExternalCLKSource,$/;"	f
TIM2_TimeBaseInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_TimeBaseInit(TIM2_Prescaler_TypeDef TIM2_Prescaler,$/;"	f
TIM2_UpdateDisableConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_UpdateDisableConfig(FunctionalState NewState)$/;"	f
TIM2_UpdateRequestConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim2.c	/^void TIM2_UpdateRequestConfig(TIM2_UpdateSource_TypeDef TIM2_UpdateSource)$/;"	f
TI1_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^static void TI1_Config(TIM3_ICPolarity_TypeDef TIM3_ICPolarity,$/;"	f	file:
TI2_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^static void TI2_Config(TIM3_ICPolarity_TypeDef TIM3_ICPolarity,$/;"	f	file:
TIM3_ARRPreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ARRPreloadConfig(FunctionalState NewState)$/;"	f
TIM3_BKRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_BKRConfig(TIM3_OSSIState_TypeDef TIM3_OSSIState,$/;"	f
TIM3_CCxCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_CCxCmd(TIM3_Channel_TypeDef TIM3_Channel, FunctionalState NewState)$/;"	f
TIM3_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ClearFlag(TIM3_FLAG_TypeDef TIM3_FLAG)$/;"	f
TIM3_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ClearITPendingBit(TIM3_IT_TypeDef TIM3_IT)$/;"	f
TIM3_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_Cmd(FunctionalState NewState)$/;"	f
TIM3_CounterModeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_CounterModeConfig(TIM3_CounterMode_TypeDef TIM3_CounterMode)$/;"	f
TIM3_CtrlPWMOutputs	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_CtrlPWMOutputs(FunctionalState NewState)$/;"	f
TIM3_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_DMACmd(TIM3_DMASource_TypeDef TIM3_DMASource, FunctionalState NewState)$/;"	f
TIM3_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_DeInit(void)$/;"	f
TIM3_ETRClockMode1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ETRClockMode1Config(TIM3_ExtTRGPSC_TypeDef TIM3_ExtTRGPrescaler,$/;"	f
TIM3_ETRClockMode2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ETRClockMode2Config(TIM3_ExtTRGPSC_TypeDef TIM3_ExtTRGPrescaler,$/;"	f
TIM3_ETRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ETRConfig(TIM3_ExtTRGPSC_TypeDef TIM3_ExtTRGPrescaler,$/;"	f
TIM3_EncoderInterfaceConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_EncoderInterfaceConfig(TIM3_EncoderMode_TypeDef TIM3_EncoderMode,$/;"	f
TIM3_ForcedOC1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ForcedOC1Config(TIM3_ForcedAction_TypeDef TIM3_ForcedAction)$/;"	f
TIM3_ForcedOC2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ForcedOC2Config(TIM3_ForcedAction_TypeDef TIM3_ForcedAction)$/;"	f
TIM3_GenerateEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_GenerateEvent(TIM3_EventSource_TypeDef TIM3_EventSource)$/;"	f
TIM3_GetCapture1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^uint16_t TIM3_GetCapture1(void)$/;"	f
TIM3_GetCapture2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^uint16_t TIM3_GetCapture2(void)$/;"	f
TIM3_GetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^uint16_t TIM3_GetCounter(void)$/;"	f
TIM3_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^FlagStatus TIM3_GetFlagStatus(TIM3_FLAG_TypeDef TIM3_FLAG)$/;"	f
TIM3_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^ITStatus TIM3_GetITStatus(TIM3_IT_TypeDef TIM3_IT)$/;"	f
TIM3_GetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^TIM3_Prescaler_TypeDef TIM3_GetPrescaler(void)$/;"	f
TIM3_ICInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ICInit(TIM3_Channel_TypeDef TIM3_Channel,$/;"	f
TIM3_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_ITConfig(TIM3_IT_TypeDef TIM3_IT, FunctionalState NewState)$/;"	f
TIM3_InternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_InternalClockConfig(void)$/;"	f
TIM3_OC1FastCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC1FastCmd(FunctionalState NewState)$/;"	f
TIM3_OC1Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC1Init(TIM3_OCMode_TypeDef TIM3_OCMode,$/;"	f
TIM3_OC1PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC1PolarityConfig(TIM3_OCPolarity_TypeDef TIM3_OCPolarity)$/;"	f
TIM3_OC1PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC1PreloadConfig(FunctionalState NewState)$/;"	f
TIM3_OC2FastCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC2FastCmd(FunctionalState NewState)$/;"	f
TIM3_OC2Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC2Init(TIM3_OCMode_TypeDef TIM3_OCMode,$/;"	f
TIM3_OC2PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC2PolarityConfig(TIM3_OCPolarity_TypeDef TIM3_OCPolarity)$/;"	f
TIM3_OC2PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_OC2PreloadConfig(FunctionalState NewState)$/;"	f
TIM3_PWMIConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_PWMIConfig(TIM3_Channel_TypeDef TIM3_Channel,$/;"	f
TIM3_PrescalerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_PrescalerConfig(TIM3_Prescaler_TypeDef Prescaler,$/;"	f
TIM3_SelectCCDMA	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectCCDMA(FunctionalState NewState)$/;"	f
TIM3_SelectHallSensor	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectHallSensor(FunctionalState NewState)$/;"	f
TIM3_SelectInputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectInputTrigger(TIM3_TRGSelection_TypeDef TIM3_InputTriggerSource)$/;"	f
TIM3_SelectMasterSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectMasterSlaveMode(FunctionalState NewState)$/;"	f
TIM3_SelectOCxM	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectOCxM(TIM3_Channel_TypeDef TIM3_Channel,$/;"	f
TIM3_SelectOnePulseMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectOnePulseMode(TIM3_OPMode_TypeDef TIM3_OPMode)$/;"	f
TIM3_SelectOutputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectOutputTrigger(TIM3_TRGOSource_TypeDef TIM3_TRGOSource)$/;"	f
TIM3_SelectSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SelectSlaveMode(TIM3_SlaveMode_TypeDef TIM3_SlaveMode)$/;"	f
TIM3_SetAutoreload	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SetAutoreload(uint16_t Autoreload)$/;"	f
TIM3_SetCompare1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SetCompare1(uint16_t Compare)$/;"	f
TIM3_SetCompare2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SetCompare2(uint16_t Compare)$/;"	f
TIM3_SetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SetCounter(uint16_t Counter)$/;"	f
TIM3_SetIC1Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SetIC1Prescaler(TIM3_ICPSC_TypeDef TIM3_IC1Prescaler)$/;"	f
TIM3_SetIC2Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_SetIC2Prescaler(TIM3_ICPSC_TypeDef TIM3_IC2Prescaler)$/;"	f
TIM3_TIxExternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_TIxExternalClockConfig(TIM3_TIxExternalCLK1Source_TypeDef TIM3_TIxExternalCLKSource,$/;"	f
TIM3_TimeBaseInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_TimeBaseInit(TIM3_Prescaler_TypeDef TIM3_Prescaler,$/;"	f
TIM3_UpdateDisableConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_UpdateDisableConfig(FunctionalState NewState)$/;"	f
TIM3_UpdateRequestConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim3.c	/^void TIM3_UpdateRequestConfig(TIM3_UpdateSource_TypeDef TIM3_UpdateSource)$/;"	f
TIM4_ARRPreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_ARRPreloadConfig(FunctionalState NewState)$/;"	f
TIM4_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_ClearFlag(TIM4_FLAG_TypeDef TIM4_FLAG)$/;"	f
TIM4_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_ClearITPendingBit(TIM4_IT_TypeDef TIM4_IT)$/;"	f
TIM4_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_Cmd(FunctionalState NewState)$/;"	f
TIM4_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_DMACmd( TIM4_DMASource_TypeDef TIM4_DMASource, FunctionalState NewState)$/;"	f
TIM4_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_DeInit(void)$/;"	f
TIM4_GenerateEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_GenerateEvent(TIM4_EventSource_TypeDef TIM4_EventSource)$/;"	f
TIM4_GetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^uint8_t TIM4_GetCounter(void)$/;"	f
TIM4_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^FlagStatus TIM4_GetFlagStatus(TIM4_FLAG_TypeDef TIM4_FLAG)$/;"	f
TIM4_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^ITStatus TIM4_GetITStatus(TIM4_IT_TypeDef TIM4_IT)$/;"	f
TIM4_GetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^TIM4_Prescaler_TypeDef TIM4_GetPrescaler(void)$/;"	f
TIM4_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_ITConfig(TIM4_IT_TypeDef TIM4_IT, FunctionalState NewState)$/;"	f
TIM4_InternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_InternalClockConfig(void)$/;"	f
TIM4_PrescalerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_PrescalerConfig(TIM4_Prescaler_TypeDef Prescaler,$/;"	f
TIM4_SelectInputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SelectInputTrigger(TIM4_TRGSelection_TypeDef TIM4_InputTriggerSource)$/;"	f
TIM4_SelectMasterSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SelectMasterSlaveMode(FunctionalState NewState)$/;"	f
TIM4_SelectOnePulseMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SelectOnePulseMode(TIM4_OPMode_TypeDef TIM4_OPMode)$/;"	f
TIM4_SelectOutputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SelectOutputTrigger(TIM4_TRGOSource_TypeDef TIM4_TRGOSource)$/;"	f
TIM4_SelectSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SelectSlaveMode(TIM4_SlaveMode_TypeDef TIM4_SlaveMode)$/;"	f
TIM4_SetAutoreload	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SetAutoreload(uint8_t Autoreload)$/;"	f
TIM4_SetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_SetCounter(uint8_t Counter)$/;"	f
TIM4_TimeBaseInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_TimeBaseInit(TIM4_Prescaler_TypeDef TIM4_Prescaler,$/;"	f
TIM4_UpdateDisableConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_UpdateDisableConfig(FunctionalState NewState)$/;"	f
TIM4_UpdateRequestConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim4.c	/^void TIM4_UpdateRequestConfig(TIM4_UpdateSource_TypeDef TIM4_UpdateSource)$/;"	f
TI1_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^static void TI1_Config(TIM5_ICPolarity_TypeDef TIM5_ICPolarity, \\$/;"	f	file:
TI2_Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^static void TI2_Config(TIM5_ICPolarity_TypeDef TIM5_ICPolarity,$/;"	f	file:
TIM5_ARRPreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ARRPreloadConfig(FunctionalState NewState)$/;"	f
TIM5_BKRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_BKRConfig(TIM5_OSSIState_TypeDef TIM5_OSSIState,$/;"	f
TIM5_CCxCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_CCxCmd(TIM5_Channel_TypeDef TIM5_Channel,$/;"	f
TIM5_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ClearFlag(TIM5_FLAG_TypeDef TIM5_FLAG)$/;"	f
TIM5_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ClearITPendingBit(TIM5_IT_TypeDef TIM5_IT)$/;"	f
TIM5_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_Cmd(FunctionalState NewState)$/;"	f
TIM5_CounterModeConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_CounterModeConfig(TIM5_CounterMode_TypeDef TIM5_CounterMode)$/;"	f
TIM5_CtrlPWMOutputs	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_CtrlPWMOutputs(FunctionalState NewState)$/;"	f
TIM5_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_DMACmd( TIM5_DMASource_TypeDef TIM5_DMASource, FunctionalState NewState)$/;"	f
TIM5_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_DeInit(void)$/;"	f
TIM5_ETRClockMode1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ETRClockMode1Config(TIM5_ExtTRGPSC_TypeDef TIM5_ExtTRGPrescaler,$/;"	f
TIM5_ETRClockMode2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ETRClockMode2Config(TIM5_ExtTRGPSC_TypeDef TIM5_ExtTRGPrescaler,$/;"	f
TIM5_ETRConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ETRConfig(TIM5_ExtTRGPSC_TypeDef TIM5_ExtTRGPrescaler,$/;"	f
TIM5_EncoderInterfaceConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_EncoderInterfaceConfig(TIM5_EncoderMode_TypeDef TIM5_EncoderMode,$/;"	f
TIM5_ForcedOC1Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ForcedOC1Config(TIM5_ForcedAction_TypeDef TIM5_ForcedAction)$/;"	f
TIM5_ForcedOC2Config	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ForcedOC2Config(TIM5_ForcedAction_TypeDef TIM5_ForcedAction)$/;"	f
TIM5_GenerateEvent	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_GenerateEvent(TIM5_EventSource_TypeDef TIM5_EventSource)$/;"	f
TIM5_GetCapture1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^uint16_t TIM5_GetCapture1(void)$/;"	f
TIM5_GetCapture2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^uint16_t TIM5_GetCapture2(void)$/;"	f
TIM5_GetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^uint16_t TIM5_GetCounter(void)$/;"	f
TIM5_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^FlagStatus TIM5_GetFlagStatus(TIM5_FLAG_TypeDef TIM5_FLAG)$/;"	f
TIM5_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^ITStatus TIM5_GetITStatus(TIM5_IT_TypeDef TIM5_IT)$/;"	f
TIM5_GetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^TIM5_Prescaler_TypeDef TIM5_GetPrescaler(void)$/;"	f
TIM5_ICInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ICInit(TIM5_Channel_TypeDef TIM5_Channel,$/;"	f
TIM5_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_ITConfig(TIM5_IT_TypeDef TIM5_IT, FunctionalState NewState)$/;"	f
TIM5_InternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_InternalClockConfig(void)$/;"	f
TIM5_OC1FastCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC1FastCmd(FunctionalState NewState)$/;"	f
TIM5_OC1Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC1Init(TIM5_OCMode_TypeDef TIM5_OCMode,$/;"	f
TIM5_OC1PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC1PolarityConfig(TIM5_OCPolarity_TypeDef TIM5_OCPolarity)$/;"	f
TIM5_OC1PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC1PreloadConfig(FunctionalState NewState)$/;"	f
TIM5_OC2FastCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC2FastCmd(FunctionalState NewState)$/;"	f
TIM5_OC2Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC2Init(TIM5_OCMode_TypeDef TIM5_OCMode,$/;"	f
TIM5_OC2PolarityConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC2PolarityConfig(TIM5_OCPolarity_TypeDef TIM5_OCPolarity)$/;"	f
TIM5_OC2PreloadConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_OC2PreloadConfig(FunctionalState NewState)$/;"	f
TIM5_PWMIConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_PWMIConfig(TIM5_Channel_TypeDef TIM5_Channel,$/;"	f
TIM5_PrescalerConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_PrescalerConfig(TIM5_Prescaler_TypeDef Prescaler,$/;"	f
TIM5_SelectCCDMA	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectCCDMA(FunctionalState NewState)$/;"	f
TIM5_SelectHallSensor	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectHallSensor(FunctionalState NewState)$/;"	f
TIM5_SelectInputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectInputTrigger(TIM5_TRGSelection_TypeDef TIM5_InputTriggerSource)$/;"	f
TIM5_SelectMasterSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectMasterSlaveMode(FunctionalState NewState)$/;"	f
TIM5_SelectOCxM	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectOCxM(TIM5_Channel_TypeDef TIM5_Channel,$/;"	f
TIM5_SelectOnePulseMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectOnePulseMode(TIM5_OPMode_TypeDef TIM5_OPMode)$/;"	f
TIM5_SelectOutputTrigger	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectOutputTrigger(TIM5_TRGOSource_TypeDef TIM5_TRGOSource)$/;"	f
TIM5_SelectSlaveMode	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SelectSlaveMode(TIM5_SlaveMode_TypeDef TIM5_SlaveMode)$/;"	f
TIM5_SetAutoreload	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SetAutoreload(uint16_t Autoreload)$/;"	f
TIM5_SetCompare1	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SetCompare1(uint16_t Compare)$/;"	f
TIM5_SetCompare2	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SetCompare2(uint16_t Compare)$/;"	f
TIM5_SetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SetCounter(uint16_t Counter)$/;"	f
TIM5_SetIC1Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SetIC1Prescaler(TIM5_ICPSC_TypeDef TIM5_IC1Prescaler)$/;"	f
TIM5_SetIC2Prescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_SetIC2Prescaler(TIM5_ICPSC_TypeDef TIM5_IC2Prescaler)$/;"	f
TIM5_TIxExternalClockConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_TIxExternalClockConfig(TIM5_TIxExternalCLK1Source_TypeDef TIM5_TIxExternalCLKSource,$/;"	f
TIM5_TimeBaseInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_TimeBaseInit(TIM5_Prescaler_TypeDef TIM5_Prescaler,$/;"	f
TIM5_UpdateDisableConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_UpdateDisableConfig(FunctionalState NewState)$/;"	f
TIM5_UpdateRequestConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_tim5.c	/^void TIM5_UpdateRequestConfig(TIM5_UpdateSource_TypeDef TIM5_UpdateSource)$/;"	f
USART_ClearFlag	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_ClearFlag(USART_TypeDef* USARTx, USART_FLAG_TypeDef USART_FLAG)$/;"	f
USART_ClearITPendingBit	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_ClearITPendingBit(USART_TypeDef* USARTx, USART_IT_TypeDef USART_IT)$/;"	f
USART_ClockInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_ClockInit(USART_TypeDef* USARTx, USART_Clock_TypeDef USART_Clock,$/;"	f
USART_Cmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)$/;"	f
USART_DMACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_DMACmd(USART_TypeDef* USARTx, USART_DMAReq_TypeDef USART_DMAReq,$/;"	f
USART_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_DeInit(USART_TypeDef* USARTx)$/;"	f
USART_GetFlagStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, USART_FLAG_TypeDef USART_FLAG)$/;"	f
USART_GetITStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^ITStatus USART_GetITStatus(USART_TypeDef* USARTx, USART_IT_TypeDef USART_IT)$/;"	f
USART_HalfDuplexCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)$/;"	f
USART_ITConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_ITConfig(USART_TypeDef* USARTx, USART_IT_TypeDef USART_IT, FunctionalState NewState)$/;"	f
USART_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_Init(USART_TypeDef* USARTx, uint32_t BaudRate, USART_WordLength_TypeDef$/;"	f
USART_IrDACmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)$/;"	f
USART_IrDAConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_IrDAConfig(USART_TypeDef* USARTx, USART_IrDAMode_TypeDef USART_IrDAMode)$/;"	f
USART_ReceiveData8	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^uint8_t USART_ReceiveData8(USART_TypeDef* USARTx)$/;"	f
USART_ReceiveData9	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^uint16_t USART_ReceiveData9(USART_TypeDef* USARTx)$/;"	f
USART_ReceiverWakeUpCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)$/;"	f
USART_SendBreak	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SendBreak(USART_TypeDef* USARTx)$/;"	f
USART_SendData8	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SendData8(USART_TypeDef* USARTx, uint8_t Data)$/;"	f
USART_SendData9	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SendData9(USART_TypeDef* USARTx, uint16_t Data)$/;"	f
USART_SetAddress	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)$/;"	f
USART_SetGuardTime	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)$/;"	f
USART_SetPrescaler	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)$/;"	f
USART_SmartCardCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)$/;"	f
USART_SmartCardNACKCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)$/;"	f
USART_WakeUpConfig	STM8L15x_StdPeriph_Driver\src\stm8l15x_usart.c	/^void USART_WakeUpConfig(USART_TypeDef* USARTx, USART_WakeUp_TypeDef USART_WakeUp)$/;"	f
WFE_DeInit	STM8L15x_StdPeriph_Driver\src\stm8l15x_wfe.c	/^void WFE_DeInit(void)$/;"	f
WFE_GetWakeUpSourceEventStatus	STM8L15x_StdPeriph_Driver\src\stm8l15x_wfe.c	/^FunctionalState WFE_GetWakeUpSourceEventStatus(WFE_Source_TypeDef WFE_Source)$/;"	f
WFE_WakeUpSourceEventCmd	STM8L15x_StdPeriph_Driver\src\stm8l15x_wfe.c	/^void WFE_WakeUpSourceEventCmd(WFE_Source_TypeDef WFE_Source, FunctionalState NewState)$/;"	f
BIT_MASK	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	30;"	d	file:
WWDG_Enable	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	/^void WWDG_Enable(uint8_t Counter)$/;"	f
WWDG_GetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	/^uint8_t WWDG_GetCounter(void)$/;"	f
WWDG_Init	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	/^void WWDG_Init(uint8_t Counter, uint8_t WindowValue)$/;"	f
WWDG_SWReset	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	/^void WWDG_SWReset(void)$/;"	f
WWDG_SetCounter	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	/^void WWDG_SetCounter(uint8_t Counter)$/;"	f
WWDG_SetWindowValue	STM8L15x_StdPeriph_Driver\src\stm8l15x_wwdg.c	/^void WWDG_SetWindowValue(uint8_t WindowValue)$/;"	f
ALG_ASCIItoDATA	User\FUN_algorithm.c	/^void ALG_ASCIItoDATA(unsigned char *pdata1,unsigned char *pdata2,unsigned char *leng2)$/;"	f
ALG_AsciitoHex	User\FUN_algorithm.c	/^unsigned char ALG_AsciitoHex(unsigned char asc)$/;"	f
ALG_CmdCrcCal	User\FUN_algorithm.c	/^unsigned char ALG_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
ALG_CmdCrcCal1	User\FUN_algorithm.c	/^unsigned char ALG_CmdCrcCal1(unsigned char *pdata, unsigned int len)$/;"	f
ALG_CmpsConst	User\FUN_algorithm.c	/^unsigned char ALG_CmpsConst( unsigned char *data1,unsigned int leng1,const unsigned char *data2,unsigned int leng2)$/;"	f
ALG_CmpsData	User\FUN_algorithm.c	/^unsigned char ALG_CmpsData( unsigned char *data1,unsigned int leng1,unsigned char *data2,unsigned int leng2)$/;"	f
ALG_ConvPDU	User\FUN_algorithm.c	/^void ALG_ConvPDU(unsigned char *pdata1,unsigned char *pdata2)$/;"	f
ALG_CopyRam	User\FUN_algorithm.c	/^void ALG_CopyRam(unsigned char *data1,unsigned int leng1,unsigned char *data2,unsigned int *leng2)$/;"	f
ALG_CrcCal	User\FUN_algorithm.c	/^unsigned char ALG_CrcCal(unsigned int length, unsigned char cmd)$/;"	f
ALG_HexGroupToString	User\FUN_algorithm.c	/^void ALG_HexGroupToString(char *OutStrBuffer, unsigned char *InHexBuffer, unsigned int HexLength)$/;"	f
ALG_HexToASCII	User\FUN_algorithm.c	/^char ALG_HexToASCII(unsigned char  data_hex)$/;"	f
ALG_HextoAlg	User\FUN_algorithm.c	/^unsigned char ALG_HextoAlg(unsigned char tmp1)$/;"	f
ALG_HextoAscii	User\FUN_algorithm.c	/^unsigned char ALG_HextoAscii(unsigned char tmp)$/;"	f
ALG_SN_Code	User\FUN_algorithm.c	/^u8 ALG_SN_Code(u8 *pdata){$/;"	f
ALG_SN_Encrypt	User\FUN_algorithm.c	/^void ALG_SN_Encrypt(u8 *pdata, u8 Code){$/;"	f
CAL_STRING	User\FUN_algorithm.c	13;"	d	file:
COMPANY1_STRING	User\FUN_algorithm.c	8;"	d	file:
COMPANY2_STRING	User\FUN_algorithm.c	9;"	d	file:
EQUIPMENT1	User\FUN_algorithm.c	18;"	d	file:
EQUIPMENT2	User\FUN_algorithm.c	19;"	d	file:
PROJECT1_STRING	User\FUN_algorithm.c	11;"	d	file:
PROJECT2_STRING	User\FUN_algorithm.c	12;"	d	file:
SERIALNUM1	User\FUN_algorithm.c	15;"	d	file:
SERIALNUM2	User\FUN_algorithm.c	16;"	d	file:
SERIALNUM3	User\FUN_algorithm.c	17;"	d	file:
__FUN_ALGORITHM_H_	User\FUN_algorithm.h	4;"	d
PRO_spider_BuildCMDForNoPar	User\PRO_spider.c	/^void PRO_spider_BuildCMDForNoPar(u8 cmd,u8 cmd1)$/;"	f
PRO_spider_BuildCMDForPar	User\PRO_spider.c	/^void PRO_spider_BuildCMDForPar(u8 cmd,u8 cmd1,u8* pdata,u16 dataLength)$/;"	f
PRO_spider_BuildMParkForPar	User\PRO_spider.c	/^void PRO_spider_BuildMParkForPar(u8 *SendDate,u8 serve,u8* pdata,u16 dataLength){$/;"	f
CMD_TYPE_CONFIG	User\PRO_spider.h	14;"	d
CMD_TYPE_CTRL	User\PRO_spider.h	18;"	d
CMD_TYPE_QUERY	User\PRO_spider.h	27;"	d
CMD_TYPE_TRFER	User\PRO_spider.h	37;"	d
CONFIG_CMD_SETMODULECONFIG	User\PRO_spider.h	16;"	d
CONFIG_CMD_SETWORKPARAMETER	User\PRO_spider.h	15;"	d
CTRL_CMD_CLOSESLEEP	User\PRO_spider.h	23;"	d
CTRL_CMD_LOGOUTNETFILE	User\PRO_spider.h	22;"	d
CTRL_CMD_RESETDEFAULT	User\PRO_spider.h	21;"	d
CTRL_CMD_RESTART_MOD	User\PRO_spider.h	19;"	d
CTRL_CMD_RESTART_RF	User\PRO_spider.h	20;"	d
CTRL_CMD_SWITCHWORKMODE	User\PRO_spider.h	24;"	d
QUERY_CMD_GETDOWNMPACK	User\PRO_spider.h	35;"	d
QUERY_CMD_GETDOWNSTAIRFALST	User\PRO_spider.h	33;"	d
QUERY_CMD_GETDOWNUPACK	User\PRO_spider.h	34;"	d
QUERY_CMD_GETMODULESHAPE	User\PRO_spider.h	31;"	d
QUERY_CMD_GETMODULESTATUS	User\PRO_spider.h	28;"	d
QUERY_CMD_GETNETFILE	User\PRO_spider.h	30;"	d
QUERY_CMD_GETWORKPARAMETER	User\PRO_spider.h	29;"	d
SPIDER_CMD_END	User\PRO_spider.h	10;"	d
SPIDER_CMD_START	User\PRO_spider.h	9;"	d
TRFER_CMD_SENDMPACK	User\PRO_spider.h	40;"	d
TRFER_CMD_SENDPPACK	User\PRO_spider.h	44;"	d
TRFER_CMD_SENDSTATUS	User\PRO_spider.h	38;"	d
TRFER_CMD_SENDUPACK	User\PRO_spider.h	39;"	d
TRFER_CMD_STARTPPACK	User\PRO_spider.h	41;"	d
TRFER_CMD_STOPPPACK	User\PRO_spider.h	45;"	d
_PRO_SPIDER__H_	User\PRO_spider.h	5;"	d
CAMERADEFAULTID	User\app\inc\APP_Camera.h	9;"	d
CAMERA_STRUCT	User\app\inc\APP_Camera.h	/^}CAMERA_STRUCT;$/;"	t	typeref:struct:__anon309
CameraID	User\app\inc\APP_Camera.h	/^	u16	CameraID;			\/\/����ͷID$/;"	m	struct:__anon309
DataSucFlag	User\app\inc\APP_Camera.h	/^	u8 DataSucFlag;		\/\/���ݱ���ɹ���־λ$/;"	m	struct:__anon309
LocaTion	User\app\inc\APP_Camera.h	/^	u8	LocaTion;			\/\/ͣ��λ$/;"	m	struct:__anon309
PLATEMAXLENG	User\app\inc\APP_Camera.h	8;"	d
PlateColor	User\app\inc\APP_Camera.h	/^	u8	PlateColor;			\/\/������ɫ$/;"	m	struct:__anon309
PlateLeng	User\app\inc\APP_Camera.h	/^	u8	PlateLeng;			\/\/�������ݳ���$/;"	m	struct:__anon309
PlateNumber	User\app\inc\APP_Camera.h	/^ 	u8	PlateNumber[PLATEMAXLENG];	\/\/���ƺ���$/;"	m	struct:__anon309
SpaceState	User\app\inc\APP_Camera.h	/^	u8	SpaceState;			\/\/ͣ��״̬$/;"	m	struct:__anon309
__APP_CAMERA_H	User\app\inc\APP_Camera.h	2;"	d
Data	User\app\inc\APP_Screen.h	/^	u8	Data[Screen_Ack_Lenght];		\/\/����$/;"	m	struct:__anon314
Screen_Ack_Lenght	User\app\inc\APP_Screen.h	7;"	d
Screen_Ack_Struct	User\app\inc\APP_Screen.h	/^}Screen_Ack_Struct;						\/\/Screen to DDA receipt $/;"	t	typeref:struct:__anon314
Screen_Struct	User\app\inc\APP_Screen.h	/^}Screen_Struct;						\/\/to Screen$/;"	t	typeref:struct:__anon315
Screen_Tx_Lenght	User\app\inc\APP_Screen.h	8;"	d
Status	User\app\inc\APP_Screen.h	/^	u16	Status;							\/\/״̬$/;"	m	struct:__anon314
Status	User\app\inc\APP_Screen.h	/^	u16	Status;						\/\/״̬$/;"	m	struct:__anon315
Tx_Data	User\app\inc\APP_Screen.h	/^	u8	Tx_Data[Screen_Tx_Lenght];		\/\/ת������$/;"	m	struct:__anon315
__APP_SCREEN_H	User\app\inc\APP_Screen.h	2;"	d
InitDealAddr	User\app\inc\APP_Ultrasonic.h	/^  u8 InitDealAddr;		\/\/��ʼ������$/;"	m	struct:__anon323
InitOKFlag	User\app\inc\APP_Ultrasonic.h	/^  u8  InitOKFlag;		\/\/ ������ ��ʼ���ɹ���־$/;"	m	struct:__anon323
InitOverTimeCnt	User\app\inc\APP_Ultrasonic.h	/^  u8  InitOverTimeCnt;		\/\/ ������ ��ʼ����ʱ����$/;"	m	struct:__anon323
LedShakeFlag	User\app\inc\APP_Ultrasonic.h	/^  u8 LedShakeFlag;		\/\/ָʾ����˸��־ 0:����˸  1: ��˸$/;"	m	struct:__anon323
LedShakeTimCnt	User\app\inc\APP_Ultrasonic.h	/^  u16 LedShakeTimCnt;		\/\/ָʾ����˸��ʱ$/;"	m	struct:__anon323
LocalAddr	User\app\inc\APP_Ultrasonic.h	/^  u8 LocalAddr;			\/\/���������ص�ַ$/;"	m	struct:__anon323
RevBuffCashe	User\app\inc\APP_Ultrasonic.h	/^  u8 RevBuffCashe;	        \/\/�����ϴν�������$/;"	m	struct:__anon323
SendCmdOverTimeCnt	User\app\inc\APP_Ultrasonic.h	/^  u16 SendCmdOverTimeCnt;	\/\/���������������ʱ$/;"	m	struct:__anon323
ULTRASONIC_ACTIVE	User\app\inc\APP_Ultrasonic.h	/^  ULTRASONIC_ACTIVE$/;"	e	enum:__anon322
ULTRASONIC_IDLE	User\app\inc\APP_Ultrasonic.h	/^  ULTRASONIC_IDLE,$/;"	e	enum:__anon322
ULTRASONIC_MAX_BUFFER_LENGTH	User\app\inc\APP_Ultrasonic.h	8;"	d
ULTRASONIC_RESEND_MAX_TIME	User\app\inc\APP_Ultrasonic.h	9;"	d
ULTRAS_STRUCT	User\app\inc\APP_Ultrasonic.h	/^}ULTRAS_STRUCT;$/;"	t	typeref:struct:__anon323
UartRevOverCnt	User\app\inc\APP_Ultrasonic.h	/^  u16 UartRevOverCnt;           \/\/ ��ʱ����$/;"	m	struct:__anon323
Ultrasonic_Control_Struct	User\app\inc\APP_Ultrasonic.h	/^}Ultrasonic_Control_Struct;$/;"	t	typeref:struct:__anon325
Ultrasonic_Perform_Status_enum	User\app\inc\APP_Ultrasonic.h	/^}Ultrasonic_Perform_Status_enum;$/;"	t	typeref:enum:__anon322
Ultrasonic_Temporary_Buffer	User\app\inc\APP_Ultrasonic.h	/^}Ultrasonic_Temporary_Buffer;$/;"	t	typeref:struct:__anon324
_APP_ULTRASONIC_H_	User\app\inc\APP_Ultrasonic.h	2;"	d
buf	User\app\inc\APP_Ultrasonic.h	/^  uint8_t buf[ULTRASONIC_MAX_BUFFER_LENGTH];$/;"	m	struct:__anon324
len	User\app\inc\APP_Ultrasonic.h	/^  uint8_t len;$/;"	m	struct:__anon324
perform_status	User\app\inc\APP_Ultrasonic.h	/^  uint8_t perform_status;$/;"	m	struct:__anon325
timer	User\app\inc\APP_Ultrasonic.h	/^  volatile uint32_t timer;$/;"	m	struct:__anon325
EQUIPMENTCHAR1	User\app\inc\APP_flash.h	4;"	d
EQUIPMENTCHAR2	User\app\inc\APP_flash.h	5;"	d
SNFLAGADD	User\app\inc\APP_flash.h	8;"	d
SNFLAGDATA	User\app\inc\APP_flash.h	9;"	d
SNHAVEADD	User\app\inc\APP_flash.h	11;"	d
SNLENG	User\app\inc\APP_flash.h	7;"	d
SNSTARTADD	User\app\inc\APP_flash.h	6;"	d
SN_STRUCT	User\app\inc\APP_flash.h	/^}SN_STRUCT;$/;"	t	typeref:struct:__anon310
SNdata	User\app\inc\APP_flash.h	/^	u8 SNdata[SNLENG];$/;"	m	struct:__anon310
SNflag	User\app\inc\APP_flash.h	/^	u8 SNflag;$/;"	m	struct:__anon310
_APP_FLASH_H_	User\app\inc\APP_flash.h	2;"	d
CLOSE_FEED_DOG_SWITCH	User\app\inc\APP_iwdg.h	/^  CLOSE_FEED_DOG_SWITCH$/;"	e	enum:__anon311
Feed_Dog_Switch_enum	User\app\inc\APP_iwdg.h	/^}Feed_Dog_Switch_enum;$/;"	t	typeref:enum:__anon311
IWDG_Control_Struct	User\app\inc\APP_iwdg.h	/^}IWDG_Control_Struct;$/;"	t	typeref:struct:__anon312
IWDG_counter	User\app\inc\APP_iwdg.h	/^  uint32_t IWDG_counter;$/;"	m	struct:__anon312
MAX_FEED_DOG_TIME	User\app\inc\APP_iwdg.h	9;"	d
OPEN_FEED_DOG_SWITCH	User\app\inc\APP_iwdg.h	/^  OPEN_FEED_DOG_SWITCH,$/;"	e	enum:__anon311
_APP_IWDG_H	User\app\inc\APP_iwdg.h	2;"	d
feed_dog_switch	User\app\inc\APP_iwdg.h	/^  uint8_t  feed_dog_switch;$/;"	m	struct:__anon312
APP_LED_STRUCT	User\app\inc\APP_led.h	/^}APP_LED_STRUCT;$/;"	t	typeref:struct:__anon313
Led_showAddr	User\app\inc\APP_led.h	7;"	d
VEHICLE_EEPADDR	User\app\inc\APP_led.h	10;"	d
_APP_LED_H_	User\app\inc\APP_led.h	3;"	d
vehicle_count	User\app\inc\APP_led.h	/^	 u16 vehicle_count;	\/\/���೵λ����$/;"	m	struct:__anon313
_APP_NOR_MODE_H_	User\app\inc\APP_nor_mode.h	2;"	d
APP_SPIDER_HARDWARE_DISABLE	User\app\inc\APP_spider.h	28;"	d
APP_SPIDER_HARDWARE_ENABLE	User\app\inc\APP_spider.h	29;"	d
DEV_NonSensitiveByte1	User\app\inc\APP_spider.h	17;"	d
DEV_NonSensitiveByte2	User\app\inc\APP_spider.h	18;"	d
DEV_Power_BTY	User\app\inc\APP_spider.h	12;"	d
DEV_Power_DC	User\app\inc\APP_spider.h	11;"	d
DEV_TYPE	User\app\inc\APP_spider.h	9;"	d
DEV_TypeClass	User\app\inc\APP_spider.h	14;"	d
DealSendCmdToSpiderAddr	User\app\inc\APP_spider.h	/^  u8 DealSendCmdToSpiderAddr;\/\/������Spider���������ַ$/;"	m	struct:__anon316
FastCmdFlag	User\app\inc\APP_spider.h	/^	u8 FastCmdFlag;$/;"	m	struct:__anon316
FastCmdLEDShakeFlag	User\app\inc\APP_spider.h	/^	u8 FastCmdLEDShakeFlag;$/;"	m	struct:__anon316
Fast_Order5Flag	User\app\inc\APP_spider.h	/^	u8 Fast_Order5Flag;		\/\/�����5$/;"	m	struct:__anon316
Fast_Order6Flag	User\app\inc\APP_spider.h	/^	u8 Fast_Order6Flag;		\/\/�����6$/;"	m	struct:__anon316
IEPINOK_Flag	User\app\inc\APP_spider.h	/^  bool IEPINOK_Flag;		\/\/�ж��¼���־$/;"	m	struct:__anon316
InitDealAddr	User\app\inc\APP_spider.h	/^  u8 InitDealAddr;$/;"	m	struct:__anon316
InitOKFlag	User\app\inc\APP_spider.h	/^  u8  InitOKFlag;				\/\/ spider ��ʼ���ɹ���־  TRUE : �ɹ�    FALSE :ʧ��$/;"	m	struct:__anon316
InitOverTimeCnt	User\app\inc\APP_spider.h	/^  u8  InitOverTimeCnt;		\/\/ spider��ʼ����ʱ����$/;"	m	struct:__anon316
Judge_Is_OnNetFlag	User\app\inc\APP_spider.h	/^	u8 Judge_Is_OnNetFlag;		\/\/�Ƿ�������־  TRUE :�Ѿ�����    FALSE :û������ $/;"	m	struct:__anon316
Judge_ReadyOnNetFlag	User\app\inc\APP_spider.h	/^	u8 Judge_ReadyOnNetFlag;	\/\/�Ƿ������������ģʽ    false:��������   true : ���ٽ���$/;"	m	struct:__anon316
Judge_SendOnNetCmdFlag	User\app\inc\APP_spider.h	/^	u8 Judge_SendOnNetCmdFlag;	\/\/�ж��Ƿ������������־��true : ����  false : ֹͣ����$/;"	m	struct:__anon316
MAIN_SPIDER_INIT_TIME	User\app\inc\APP_spider.h	23;"	d
MF_Flag	User\app\inc\APP_spider.h	/^  bool MF_Flag;  \/\/��ȡģ����̬��־λ$/;"	m	struct:__anon316
MultRegFlag	User\app\inc\APP_spider.h	/^  bool MultRegFlag;   \/\/���ն�������־$/;"	m	struct:__anon316
SPIDER_DLY_TIME	User\app\inc\APP_spider.h	22;"	d
SPIDER_STRUCT	User\app\inc\APP_spider.h	/^}SPIDER_STRUCT;$/;"	t	typeref:struct:__anon316
SPIDER_USART	User\app\inc\APP_spider.h	5;"	d
SendToSpiderCmdCnt	User\app\inc\APP_spider.h	/^  u8 SendToSpiderCmdCnt;		\/\/���͸�Spider�������$/;"	m	struct:__anon316
SingleRegFlag	User\app\inc\APP_spider.h	/^  bool SingleRegFlag;   \/\/���ն�������־$/;"	m	struct:__anon316
StartDly	User\app\inc\APP_spider.h	/^  u8  StartDly;				\/\/ ϵͳ������ʱ��3s.$/;"	m	struct:__anon316
TxUsartData	User\app\inc\APP_spider.h	/^	u8  TxUsartData[256];$/;"	m	struct:__anon316
TxUsartLeng	User\app\inc\APP_spider.h	/^	u16	TxUsartLeng;$/;"	m	struct:__anon316
UartRevOkFlag	User\app\inc\APP_spider.h	/^  bool UartRevOkFlag;        \/\/ ok$/;"	m	struct:__anon316
UartRevOverCnt	User\app\inc\APP_spider.h	/^  u16  UartRevOverCnt;        \/\/ ��ʱ��־$/;"	m	struct:__anon316
UartRevOverFlag	User\app\inc\APP_spider.h	/^  bool UartRevOverFlag;        \/\/ ��ʱ��־$/;"	m	struct:__anon316
WP_Flag	User\app\inc\APP_spider.h	/^  bool WP_Flag;  \/\/��ȡ����������־λ$/;"	m	struct:__anon316
WakeupDealAddr	User\app\inc\APP_spider.h	/^  u8 WakeupDealAddr;		\/\/  ���Ѵ�����ַ$/;"	m	struct:__anon316
WakeupTimeCnt	User\app\inc\APP_spider.h	/^  u16 WakeupTimeCnt;		\/\/ ���Ѷ�ʱ����$/;"	m	struct:__anon316
_APP_SPIDER_H_	User\app\inc\APP_spider.h	2;"	d
K1_GPIO_PIN	User\app\inc\APP_stalllock.h	14;"	d
K1_OFF	User\app\inc\APP_stalllock.h	20;"	d
K1_ON	User\app\inc\APP_stalllock.h	21;"	d
K2	User\app\inc\APP_stalllock.h	25;"	d
K2_CacheValue	User\app\inc\APP_stalllock.h	/^  u8 K2_CacheValue;	\/\/������ģ��K2��ֵ$/;"	m	struct:__anon317
K2_GPIO_PIN	User\app\inc\APP_stalllock.h	15;"	d
K2_value	User\app\inc\APP_stalllock.h	/^  u8 K2_value;		\/\/��ù��ģ��K2��ֵ$/;"	m	struct:__anon317
K3	User\app\inc\APP_stalllock.h	26;"	d
K3_CacheValue	User\app\inc\APP_stalllock.h	/^  u8 K3_CacheValue;	\/\/������ģ��K3��ֵ$/;"	m	struct:__anon317
K3_GPIO_PIN	User\app\inc\APP_stalllock.h	16;"	d
K3_value	User\app\inc\APP_stalllock.h	/^  u8 K3_value;		\/\/��ù��ģ��K3��ֵ$/;"	m	struct:__anon317
K_GPIO	User\app\inc\APP_stalllock.h	11;"	d
MONTORTURNTIMMAXCNT	User\app\inc\APP_stalllock.h	64;"	d
MOT_GPIO	User\app\inc\APP_stalllock.h	37;"	d
MOT_GPIO_PIN1	User\app\inc\APP_stalllock.h	38;"	d
MOT_GPIO_PIN2	User\app\inc\APP_stalllock.h	39;"	d
MOT_PIN1_HIGH	User\app\inc\APP_stalllock.h	42;"	d
MOT_PIN1_LOW	User\app\inc\APP_stalllock.h	43;"	d
MOT_PIN2_HIGH	User\app\inc\APP_stalllock.h	44;"	d
MOT_PIN2_LOW	User\app\inc\APP_stalllock.h	45;"	d
MontorTurnTimFlag	User\app\inc\APP_stalllock.h	/^	u8 MontorTurnTimFlag;	\/\/���ת��������־λ$/;"	m	struct:__anon317
MontorTurnTimMaxcount	User\app\inc\APP_stalllock.h	/^  u8 MontorTurnTimMaxcount;\/\/���ÿ��ת��ʱ�����$/;"	m	struct:__anon317
NODE_NUMBERS_FOR_STALLLOCK	User\app\inc\APP_stalllock.h	90;"	d
NoCmdFlag2	User\app\inc\APP_stalllock.h	/^  u8 NoCmdFlag2;	\/\/û�����ǿ�а��³�λ��  ������־$/;"	m	struct:__anon317
NoCmdPressFlag1	User\app\inc\APP_stalllock.h	/^  u8 NoCmdPressFlag1;	\/\/û�����ǿ�а��³�λ�� �½���־$/;"	m	struct:__anon317
Ring_Buffer_For_StallLock	User\app\inc\APP_stalllock.h	/^}Ring_Buffer_For_StallLock;$/;"	t	typeref:struct:__anon321
STALLLOCK_ACTIVE	User\app\inc\APP_stalllock.h	/^  STALLLOCK_ACTIVE$/;"	e	enum:__anon318
STALLLOCK_IDLE	User\app\inc\APP_stalllock.h	/^  STALLLOCK_IDLE = 0,	\/\/����$/;"	e	enum:__anon318
STALLLOCK_RESEND_MAX_TIME	User\app\inc\APP_stalllock.h	92;"	d
StallLock_Control_Struct	User\app\inc\APP_stalllock.h	/^}StallLock_Control_Struct;$/;"	t	typeref:struct:__anon320
StallLock_Perform_Status_enum	User\app\inc\APP_stalllock.h	/^}StallLock_Perform_Status_enum;$/;"	t	typeref:enum:__anon318
StallLock_STRUCT	User\app\inc\APP_stalllock.h	/^}StallLock_STRUCT;$/;"	t	typeref:struct:__anon317
THE_LENGTH_OF_FRAME	User\app\inc\APP_stalllock.h	91;"	d
Temporary_Buffer_For_StallLock	User\app\inc\APP_stalllock.h	/^}Temporary_Buffer_For_StallLock;$/;"	t	typeref:struct:__anon319
TimCnt	User\app\inc\APP_stalllock.h	/^  u8 TimCnt;		\/\/��ʱ���k2��k3ֵ$/;"	m	struct:__anon317
WARNINGTIMECNT	User\app\inc\APP_stalllock.h	8;"	d
WARNING_BEEP_GPIO	User\app\inc\APP_stalllock.h	50;"	d
WARNING_BEEP_GPIO_PIN	User\app\inc\APP_stalllock.h	51;"	d
WARNING_BEEP_MAKE	User\app\inc\APP_stalllock.h	58;"	d
WARNING_BEEP_REMOVE	User\app\inc\APP_stalllock.h	59;"	d
WARNING_BEEP_XOR	User\app\inc\APP_stalllock.h	60;"	d
WARNING_LED_GPIO	User\app\inc\APP_stalllock.h	48;"	d
WARNING_LED_GPIO_PIN	User\app\inc\APP_stalllock.h	49;"	d
WARNING_LED_MAKE	User\app\inc\APP_stalllock.h	55;"	d
WARNING_LED_REMOVE	User\app\inc\APP_stalllock.h	54;"	d
WarningCount	User\app\inc\APP_stalllock.h	/^  u8 WarningCount;	\/\/�������$/;"	m	struct:__anon317
WarningFlag	User\app\inc\APP_stalllock.h	/^  u8 WarningFlag;	\/\/�����־$/;"	m	struct:__anon317
WarningTimCnt	User\app\inc\APP_stalllock.h	/^  u8 WarningTimCnt;	\/\/����ʱ�����$/;"	m	struct:__anon317
_APP_STALLLOCK_H_	User\app\inc\APP_stalllock.h	2;"	d
buffer	User\app\inc\APP_stalllock.h	/^  uint8_t buffer[NODE_NUMBERS_FOR_STALLLOCK][THE_LENGTH_OF_FRAME];	\/\/��Ӧ�Ļ�������$/;"	m	struct:__anon321
buffer	User\app\inc\APP_stalllock.h	/^  uint8_t buffer[THE_LENGTH_OF_FRAME];$/;"	m	struct:__anon319
head	User\app\inc\APP_stalllock.h	/^  uint8_t head;														\/\/д�뻷������ָ��$/;"	m	struct:__anon321
length	User\app\inc\APP_stalllock.h	/^  uint8_t length;$/;"	m	struct:__anon319
length	User\app\inc\APP_stalllock.h	/^  uint8_t length[NODE_NUMBERS_FOR_STALLLOCK];						\/\/��Ӧ�������ݵĳ���$/;"	m	struct:__anon321
numbers	User\app\inc\APP_stalllock.h	/^  uint8_t numbers;													\/\/������������$/;"	m	struct:__anon321
perform_status	User\app\inc\APP_stalllock.h	/^  uint8_t  perform_status;$/;"	m	struct:__anon320
rear	User\app\inc\APP_stalllock.h	/^  uint8_t rear;														\/\/������������ָ��$/;"	m	struct:__anon321
timer	User\app\inc\APP_stalllock.h	/^  volatile uint32_t timer;$/;"	m	struct:__anon320
APP_CAMERA	User\app\src\APP_Camera.c	/^CAMERA_STRUCT APP_CAMERA;$/;"	v
APP_Camera_ValueInit	User\app\src\APP_Camera.c	/^void APP_Camera_ValueInit(void){$/;"	f
APP_Camera_dealSendCmdToSpider	User\app\src\APP_Camera.c	/^void APP_Camera_dealSendCmdToSpider(void){$/;"	f
APP_Camera_uartDeal	User\app\src\APP_Camera.c	/^void APP_Camera_uartDeal(void){$/;"	f
BlackCol	User\app\src\APP_Camera.c	/^const char BlackCol[]	= " 0, 0, 0, 0 ";$/;"	v
BlueCol	User\app\src\APP_Camera.c	/^const char BlueCol[]	= " 0, 0, 255, 0 ";$/;"	v
CarPlateColor	User\app\src\APP_Camera.c	/^void CarPlateColor(void){$/;"	f
CarPlateNumber	User\app\src\APP_Camera.c	/^void CarPlateNumber(void){$/;"	f
GreenCol	User\app\src\APP_Camera.c	/^const char GreenCol[]	= " 0, 255, 0, 0 ";$/;"	v
LocatNumberDate	User\app\src\APP_Camera.c	/^void LocatNumberDate(void){$/;"	f
StateNumberDate	User\app\src\APP_Camera.c	/^void StateNumberDate(void){$/;"	f
WhiteCol	User\app\src\APP_Camera.c	/^const char WhiteCol[]	= " 255, 255, 255, 0 ";$/;"	v
YellowCol	User\app\src\APP_Camera.c	/^const char YellowCol[]	= " 255, 255, 0, 0 ";$/;"	v
APP_Screen	User\app\src\APP_Screen.c	/^Screen_Struct	APP_Screen;$/;"	v
APP_Screen_Ack	User\app\src\APP_Screen.c	/^Screen_Ack_Struct APP_Screen_Ack;$/;"	v
APP_Screen_dealSendCmdToSpider	User\app\src\APP_Screen.c	/^void APP_Screen_dealSendCmdToSpider(void){$/;"	f
APP_ULTRASONIC	User\app\src\APP_Ultrasonic.c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	User\app\src\APP_Ultrasonic.c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	User\app\src\APP_Ultrasonic.c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	User\app\src\APP_Ultrasonic.c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	User\app\src\APP_Ultrasonic.c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	User\app\src\APP_Ultrasonic.c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	User\app\src\APP_Ultrasonic.c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	User\app\src\APP_Ultrasonic.c	5;"	d	file:
Ultrasonic_CmdCrcCal	User\app\src\APP_Ultrasonic.c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	User\app\src\APP_Ultrasonic.c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	User\app\src\APP_Ultrasonic.c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	User\app\src\APP_Ultrasonic.c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	User\app\src\APP_Ultrasonic.c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	User\app\src\APP_Ultrasonic.c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	User\app\src\APP_Ultrasonic.c	/^void ultrasonic_delay(void)$/;"	f
APP_SN_Init	User\app\src\APP_flash.c	/^void APP_SN_Init(void){$/;"	f
APP_SN_StrPar	User\app\src\APP_flash.c	/^SN_STRUCT APP_SN_StrPar;	$/;"	v
APP_SN_Write	User\app\src\APP_flash.c	/^void APP_SN_Write(void){$/;"	f
IWDG_config	User\app\src\APP_iwdg.c	/^void IWDG_config(void)\/\/reset after 40ms.$/;"	f
add_IWDG_counter	User\app\src\APP_iwdg.c	/^void add_IWDG_counter(void)$/;"	f
feed_IWDG	User\app\src\APP_iwdg.c	/^void feed_IWDG(void)$/;"	f
g_iwdg_control_struct	User\app\src\APP_iwdg.c	/^static IWDG_Control_Struct g_iwdg_control_struct = {0};$/;"	v	file:
set_IWDG_switch	User\app\src\APP_iwdg.c	/^void set_IWDG_switch(uint8_t value)$/;"	f
APP_LED	User\app\src\APP_led.c	/^APP_LED_STRUCT APP_LED;$/;"	v
APP_LEDSetShow	User\app\src\APP_led.c	/^void APP_LEDSetShow(void)$/;"	f
APP_LED_ShowDataReady	User\app\src\APP_led.c	/^void APP_LED_ShowDataReady(void)$/;"	f
APP_LED_ValueInit	User\app\src\APP_led.c	/^void APP_LED_ValueInit(void)$/;"	f
APP_LedShow_init	User\app\src\APP_led.c	/^void APP_LedShow_init(void)$/;"	f
APP_nor_mode_FixedTask	User\app\src\APP_nor_mode.c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	User\app\src\APP_nor_mode.c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	User\app\src\APP_nor_mode.c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_SPIDER	User\app\src\APP_spider.c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	User\app\src\APP_spider.c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	User\app\src\APP_spider.c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	User\app\src\APP_spider.c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	User\app\src\APP_spider.c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	User\app\src\APP_spider.c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	User\app\src\APP_spider.c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	User\app\src\APP_spider.c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	User\app\src\APP_spider.c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	User\app\src\APP_spider.c	/^  u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v
Spider_IEPIN_StatusDeal	User\app\src\APP_spider.c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_StallLock_StrPar	User\app\src\APP_stalllock.c	/^StallLock_STRUCT  APP_StallLock_StrPar;$/;"	v
APP_stalllock_GPIOInit	User\app\src\APP_stalllock.c	/^void APP_stalllock_GPIOInit(void)$/;"	f
APP_stalllock_StateDeal	User\app\src\APP_stalllock.c	/^void APP_stalllock_StateDeal(void)$/;"	f
APP_stalllock_ValueInit	User\app\src\APP_stalllock.c	/^void APP_stalllock_ValueInit(void)$/;"	f
g_ring_buffer_for_stalllock	User\app\src\APP_stalllock.c	/^static Ring_Buffer_For_StallLock		g_ring_buffer_for_stalllock      = {0};$/;"	v	file:
g_stalllock_control_struct	User\app\src\APP_stalllock.c	/^StallLock_Control_Struct				g_stalllock_control_struct       = {0};$/;"	v
g_temporary_buffer_for_stalllock	User\app\src\APP_stalllock.c	/^static Temporary_Buffer_For_StallLock	g_temporary_buffer_for_stalllock = {0};$/;"	v	file:
get_stalllock_perform_status	User\app\src\APP_stalllock.c	/^uint8_t get_stalllock_perform_status(void)$/;"	f
halt_send_U_package	User\app\src\APP_stalllock.c	/^void halt_send_U_package(void)$/;"	f
main_stalllock	User\app\src\APP_stalllock.c	/^void main_stalllock(void)$/;"	f
pop_data_from_ring_buffer	User\app\src\APP_stalllock.c	/^static uint8_t pop_data_from_ring_buffer(void)$/;"	f	file:
push_data_into_ring_buffer	User\app\src\APP_stalllock.c	/^uint8_t push_data_into_ring_buffer(uint8_t *buf,uint8_t len)$/;"	f
stalllock_delay	User\app\src\APP_stalllock.c	/^void stalllock_delay(void)$/;"	f
start_send_U_package	User\app\src\APP_stalllock.c	/^void start_send_U_package(void)$/;"	f
ADC_CHECK_TIMCNT	User\hal\inc\HAL_adc.h	7;"	d
ADC_STRUCT	User\hal\inc\HAL_adc.h	/^}ADC_STRUCT;$/;"	t	typeref:struct:__anon326
AverDataTmp	User\hal\inc\HAL_adc.h	/^	u16 AverDataTmp;	\/\/ƽ��ֵ$/;"	m	struct:__anon326
CheckWorkVoltgeFlag	User\hal\inc\HAL_adc.h	/^	u8 CheckWorkVoltgeFlag;			\/\/��⹤����ѹ��־$/;"	m	struct:__anon326
CheckWorkVoltgeTimeCount	User\hal\inc\HAL_adc.h	/^	u8 CheckWorkVoltgeTimeCount;		\/\/����ѹ��ʱ $/;"	m	struct:__anon326
DataTmp	User\hal\inc\HAL_adc.h	/^	u16 DataTmp;	\/\/�ɼ�������$/;"	m	struct:__anon326
Datacnt	User\hal\inc\HAL_adc.h	/^	u8 Datacnt;		\/\/�ɼ����ݼ�����Ϊ��ɼ�����ƽ��ֵ$/;"	m	struct:__anon326
WorkVoltgeGrade	User\hal\inc\HAL_adc.h	/^	u8 WorkVoltgeGrade;			\/\/������ѹ�ȼ�$/;"	m	struct:__anon326
_HAL_ADC_H_	User\hal\inc\HAL_adc.h	4;"	d
EEP_BASE_ADDR	User\hal\inc\HAL_eeprom.h	12;"	d
EEP_END_ADDR	User\hal\inc\HAL_eeprom.h	13;"	d
_HAL_EEPROM_H_	User\hal\inc\HAL_eeprom.h	3;"	d
SPIDER_TM_RESET_DISABLE	User\hal\inc\HAL_gpio.h	7;"	d
SPIDER_TM_RESET_ENABLE	User\hal\inc\HAL_gpio.h	6;"	d
_HAL_GPIO_H_	User\hal\inc\HAL_gpio.h	2;"	d
KEY1_GPIO_PIN	User\hal\inc\HAL_key.h	9;"	d
KEY1_INPUT	User\hal\inc\HAL_key.h	13;"	d
KEY2_GPIO_PIN	User\hal\inc\HAL_key.h	10;"	d
KEY2_INPUT	User\hal\inc\HAL_key.h	14;"	d
KEY_FLOAT_SCAN_CNT	User\hal\inc\HAL_key.h	18;"	d
KEY_GPIO	User\hal\inc\HAL_key.h	8;"	d
KEY_PRESS_SCAN_CNT	User\hal\inc\HAL_key.h	17;"	d
KEY_STRUCT	User\hal\inc\HAL_key.h	/^}KEY_STRUCT;$/;"	t	typeref:struct:__anon327
_HAL_KEY_H_	User\hal\inc\HAL_key.h	4;"	d
nopre_cnt	User\hal\inc\HAL_key.h	/^	u16 nopre_cnt;$/;"	m	struct:__anon327
press_cnt	User\hal\inc\HAL_key.h	/^	u16 press_cnt;$/;"	m	struct:__anon327
press_status	User\hal\inc\HAL_key.h	/^	u8  press_status;$/;"	m	struct:__anon327
LED1_GPIO_PIN	User\hal\inc\HAL_led.h	6;"	d
LED1_OFF	User\hal\inc\HAL_led.h	11;"	d
LED1_ON	User\hal\inc\HAL_led.h	10;"	d
LED1_XOR	User\hal\inc\HAL_led.h	12;"	d
LED2_GPIO_PIN	User\hal\inc\HAL_led.h	7;"	d
LED2_OFF	User\hal\inc\HAL_led.h	15;"	d
LED2_ON	User\hal\inc\HAL_led.h	14;"	d
LED2_XOR	User\hal\inc\HAL_led.h	16;"	d
LED_GPIO	User\hal\inc\HAL_led.h	4;"	d
_HAL_LED_H_	User\hal\inc\HAL_led.h	2;"	d
HALRTC_STRUCT	User\hal\inc\HAL_rtc.h	/^}HALRTC_STRUCT;$/;"	t	typeref:struct:__anon328
RTC_T1SFlag	User\hal\inc\HAL_rtc.h	/^  u8 RTC_T1SFlag;$/;"	m	struct:__anon328
RTC_T3SFlag	User\hal\inc\HAL_rtc.h	/^  u8 RTC_T3SFlag;$/;"	m	struct:__anon328
RTC_count	User\hal\inc\HAL_rtc.h	/^  u16 RTC_count;$/;"	m	struct:__anon328
_HAL_RTC_H	User\hal\inc\HAL_rtc.h	2;"	d
_HAL_SPI_H_	User\hal\inc\HAL_spi.h	2;"	d
FLASH_DUMMY_BYTE	User\hal\inc\HAL_spi_flash.h	13;"	d
FLASH_W25Q16	User\hal\inc\HAL_spi_flash.h	19;"	d
FLASH_W25X16	User\hal\inc\HAL_spi_flash.h	17;"	d
FLASH_W25X40	User\hal\inc\HAL_spi_flash.h	18;"	d
FLASH_W25X40_BLOCK	User\hal\inc\HAL_spi_flash.h	22;"	d
FLASH_W25X40_SETCOR	User\hal\inc\HAL_spi_flash.h	21;"	d
FLASH_W25X40_SIZE_BYTE	User\hal\inc\HAL_spi_flash.h	23;"	d
FLASH_WIP_FLAG	User\hal\inc\HAL_spi_flash.h	10;"	d
SPI_FLASH_CMD	User\hal\inc\HAL_spi_flash.h	/^}SPI_FLASH_CMD;$/;"	t	typeref:struct:__anon329
SPI_FLASH_CS_HIGH	User\hal\inc\HAL_spi_flash.h	8;"	d
SPI_FLASH_CS_LOW	User\hal\inc\HAL_spi_flash.h	6;"	d
_HAL_SPI_FLASH_H_	User\hal\inc\HAL_spi_flash.h	2;"	d
flash_cmd_be	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_be;     \/*!< Block Erase instruction *\/$/;"	m	struct:__anon329
flash_cmd_ce	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_ce;     \/*!< Chip Erase instruction *\/$/;"	m	struct:__anon329
flash_cmd_rdid	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_rdid;   \/*!< Read flash id instruction *\/$/;"	m	struct:__anon329
flash_cmd_rdsr	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_rdsr;   \/*!< Read Status Register instruction  *\/$/;"	m	struct:__anon329
flash_cmd_read	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_read;   \/*!< Read from Memory instruction *\/$/;"	m	struct:__anon329
flash_cmd_se	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_se;     \/*!< Sector Erase instruction *\/$/;"	m	struct:__anon329
flash_cmd_wren	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_wren;   \/*!< Write enable instruction *\/  $/;"	m	struct:__anon329
flash_cmd_write	User\hal\inc\HAL_spi_flash.h	/^    u8   flash_cmd_write;  \/*!< Page program instruction *\/$/;"	m	struct:__anon329
flash_desc	User\hal\inc\HAL_spi_flash.h	/^    char *flash_desc;$/;"	m	struct:__anon329
flash_id	User\hal\inc\HAL_spi_flash.h	/^    u32  flash_id; $/;"	m	struct:__anon329
flash_spi_pagesize	User\hal\inc\HAL_spi_flash.h	/^    u16  flash_spi_pagesize;$/;"	m	struct:__anon329
TIM_T1SFlag	User\hal\inc\HAL_tim.h	/^  u8 TIM_T1SFlag;$/;"	m	struct:__anon330
TIM_T200mSFlag	User\hal\inc\HAL_tim.h	/^  bool TIM_T200mSFlag;$/;"	m	struct:__anon330
TIM_T3SFlag	User\hal\inc\HAL_tim.h	/^  u8 TIM_T3SFlag;$/;"	m	struct:__anon330
TIM_T500mSFlag	User\hal\inc\HAL_tim.h	/^  bool TIM_T500mSFlag;$/;"	m	struct:__anon330
TIM_count	User\hal\inc\HAL_tim.h	/^  u16 TIM_count;$/;"	m	struct:__anon330
Tim_STRUCT	User\hal\inc\HAL_tim.h	/^}Tim_STRUCT;$/;"	t	typeref:struct:__anon330
_HAL_TIM_H_	User\hal\inc\HAL_tim.h	4;"	d
CTRL485_GPIO	User\hal\inc\HAL_usart.h	75;"	d
CTRL485_GPIO_PIN	User\hal\inc\HAL_usart.h	77;"	d
CTRL485_PIN_NO	User\hal\inc\HAL_usart.h	76;"	d
CTRL485_RX_DISABLE	User\hal\inc\HAL_usart.h	83;"	d
CTRL485_RX_ENABLE	User\hal\inc\HAL_usart.h	80;"	d
CTRL485_TX_DISABLE	User\hal\inc\HAL_usart.h	82;"	d
CTRL485_TX_ENABLE	User\hal\inc\HAL_usart.h	79;"	d
RXBUFF_MAXSIZE	User\hal\inc\HAL_usart.h	67;"	d
RxBuff	User\hal\inc\HAL_usart.h	/^    u8	RxBuff[RXBUFF_MAXSIZE];  \/\/ ���ջ���$/;"	m	struct:UART_STRUCT
RxCnt	User\hal\inc\HAL_usart.h	/^    u8	RxCnt;		\/\/ ���ռ���$/;"	m	struct:UART_STRUCT
RxDataFlag	User\hal\inc\HAL_usart.h	/^    u8	RxDataFlag;    \/\/ �������ݱ�־$/;"	m	struct:UART_STRUCT
RxDataSucFlag	User\hal\inc\HAL_usart.h	/^    u8	RxDataSucFlag; \/\/ ���ճɹ���־$/;"	m	struct:UART_STRUCT
RxDataTimCnt	User\hal\inc\HAL_usart.h	/^    u8	RxDataTimCnt;	\/\/��������ʱ�����$/;"	m	struct:UART_STRUCT
RxDealStep	User\hal\inc\HAL_usart.h	/^    u8	RxDealStep;   \/\/ ���մ�������$/;"	m	struct:UART_STRUCT
RxIndex	User\hal\inc\HAL_usart.h	/^    u8	RxIndex;      \/\/ ������������$/;"	m	struct:UART_STRUCT
RxLeng	User\hal\inc\HAL_usart.h	/^    u16	RxLeng;       \/\/ �������ݳ���$/;"	m	struct:UART_STRUCT
RxOverFlag	User\hal\inc\HAL_usart.h	/^    u8	RxOverFlag;   \/\/ ���ս�����־$/;"	m	struct:UART_STRUCT
RxTimeOutCnt	User\hal\inc\HAL_usart.h	/^    u8	RxTimeOutCnt; \/\/ ���ճ�ʱ����$/;"	m	struct:UART_STRUCT
TXBUFF_MAXSIZE	User\hal\inc\HAL_usart.h	66;"	d
TxBuff	User\hal\inc\HAL_usart.h	/^    u8	TxBuff[TXBUFF_MAXSIZE];  \/\/ ���ͻ���  $/;"	m	struct:UART_STRUCT
TxIndex	User\hal\inc\HAL_usart.h	/^    u8	TxIndex;      \/\/ ������������$/;"	m	struct:UART_STRUCT
TxLeng	User\hal\inc\HAL_usart.h	/^    u16	TxLeng;       \/\/ �������ݳ���$/;"	m	struct:UART_STRUCT
UART_STRUCT	User\hal\inc\HAL_usart.h	/^struct UART_STRUCT$/;"	s
USART_CMD_1	User\hal\inc\HAL_usart.h	23;"	d
USART_CMD_10	User\hal\inc\HAL_usart.h	32;"	d
USART_CMD_11	User\hal\inc\HAL_usart.h	33;"	d
USART_CMD_12	User\hal\inc\HAL_usart.h	34;"	d
USART_CMD_13	User\hal\inc\HAL_usart.h	35;"	d
USART_CMD_14	User\hal\inc\HAL_usart.h	36;"	d
USART_CMD_15	User\hal\inc\HAL_usart.h	37;"	d
USART_CMD_16	User\hal\inc\HAL_usart.h	38;"	d
USART_CMD_17	User\hal\inc\HAL_usart.h	39;"	d
USART_CMD_18	User\hal\inc\HAL_usart.h	40;"	d
USART_CMD_19	User\hal\inc\HAL_usart.h	41;"	d
USART_CMD_2	User\hal\inc\HAL_usart.h	24;"	d
USART_CMD_20	User\hal\inc\HAL_usart.h	42;"	d
USART_CMD_21	User\hal\inc\HAL_usart.h	43;"	d
USART_CMD_22	User\hal\inc\HAL_usart.h	44;"	d
USART_CMD_23	User\hal\inc\HAL_usart.h	45;"	d
USART_CMD_24	User\hal\inc\HAL_usart.h	46;"	d
USART_CMD_25	User\hal\inc\HAL_usart.h	47;"	d
USART_CMD_26	User\hal\inc\HAL_usart.h	48;"	d
USART_CMD_27	User\hal\inc\HAL_usart.h	49;"	d
USART_CMD_28	User\hal\inc\HAL_usart.h	50;"	d
USART_CMD_29	User\hal\inc\HAL_usart.h	51;"	d
USART_CMD_3	User\hal\inc\HAL_usart.h	25;"	d
USART_CMD_30	User\hal\inc\HAL_usart.h	52;"	d
USART_CMD_31	User\hal\inc\HAL_usart.h	53;"	d
USART_CMD_32	User\hal\inc\HAL_usart.h	54;"	d
USART_CMD_33	User\hal\inc\HAL_usart.h	55;"	d
USART_CMD_34	User\hal\inc\HAL_usart.h	56;"	d
USART_CMD_35	User\hal\inc\HAL_usart.h	57;"	d
USART_CMD_36	User\hal\inc\HAL_usart.h	58;"	d
USART_CMD_37	User\hal\inc\HAL_usart.h	59;"	d
USART_CMD_38	User\hal\inc\HAL_usart.h	60;"	d
USART_CMD_39	User\hal\inc\HAL_usart.h	61;"	d
USART_CMD_4	User\hal\inc\HAL_usart.h	26;"	d
USART_CMD_40	User\hal\inc\HAL_usart.h	62;"	d
USART_CMD_5	User\hal\inc\HAL_usart.h	27;"	d
USART_CMD_6	User\hal\inc\HAL_usart.h	28;"	d
USART_CMD_7	User\hal\inc\HAL_usart.h	29;"	d
USART_CMD_8	User\hal\inc\HAL_usart.h	30;"	d
USART_CMD_9	User\hal\inc\HAL_usart.h	31;"	d
USART_CMD_END	User\hal\inc\HAL_usart.h	19;"	d
USART_CMD_NULL	User\hal\inc\HAL_usart.h	22;"	d
USART_CMD_START	User\hal\inc\HAL_usart.h	18;"	d
USART_MSECOND_50	User\hal\inc\HAL_usart.h	71;"	d
USART_RECEIVED_MAX_LENGTH	User\hal\inc\HAL_usart.h	70;"	d
USART_RX_Control_Struct	User\hal\inc\HAL_usart.h	/^}USART_RX_Control_Struct;$/;"	t	typeref:struct:__anon331
USER_USART1	User\hal\inc\HAL_usart.h	13;"	d
USER_USART2	User\hal\inc\HAL_usart.h	14;"	d
USER_USART3	User\hal\inc\HAL_usart.h	15;"	d
_HAL_USART_H_	User\hal\inc\HAL_usart.h	5;"	d
rx_buf	User\hal\inc\HAL_usart.h	/^  uint8_t  rx_buf[USART_RECEIVED_MAX_LENGTH];$/;"	m	struct:__anon331
rx_len	User\hal\inc\HAL_usart.h	/^  uint16_t rx_len;$/;"	m	struct:__anon331
rx_timer	User\hal\inc\HAL_usart.h	/^  volatile uint16_t rx_timer;$/;"	m	struct:__anon331
APP_ADC_GetWorkVolGrade	User\hal\src\HAL_adc.c	/^void APP_ADC_GetWorkVolGrade(void)$/;"	f
HAL_ADC_Init	User\hal\src\HAL_adc.c	/^void HAL_ADC_Init(void)$/;"	f
HAL_adc_StrPar	User\hal\src\HAL_adc.c	/^ADC_STRUCT  HAL_adc_StrPar;$/;"	v
HAL_adc_ValueInit	User\hal\src\HAL_adc.c	/^void HAL_adc_ValueInit(void)$/;"	f
HAL_eeprom_EraseAllBlock	User\hal\src\HAL_eeprom.c	/^void HAL_eeprom_EraseAllBlock(void)$/;"	f
HAL_eeprom_Init	User\hal\src\HAL_eeprom.c	/^void HAL_eeprom_Init(void)$/;"	f
HAL_eeprom_ReadData	User\hal\src\HAL_eeprom.c	/^void HAL_eeprom_ReadData(u32 Address,u8 *pdata,u16 DataLength)$/;"	f
HAL_eeprom_ValueInit	User\hal\src\HAL_eeprom.c	/^void HAL_eeprom_ValueInit(void)$/;"	f
HAL_eeprom_WriteData	User\hal\src\HAL_eeprom.c	/^void HAL_eeprom_WriteData(u32 Address,u8 *pdata,u16 DataLength)$/;"	f
HAL_GPIO_config	User\hal\src\HAL_gpio.c	/^void HAL_GPIO_config(void)$/;"	f
HAL_KEY_Scan	User\hal\src\HAL_key.c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	User\hal\src\HAL_key.c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	User\hal\src\HAL_key.c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	User\hal\src\HAL_key.c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	User\hal\src\HAL_key.c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	User\hal\src\HAL_key.c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_LED_AllOff	User\hal\src\HAL_led.c	/^void HAL_LED_AllOff(void){$/;"	f
HAL_LED_AlternateFlash	User\hal\src\HAL_led.c	/^void HAL_LED_AlternateFlash(void){$/;"	f
HAL_LED_config	User\hal\src\HAL_led.c	/^void HAL_LED_config(void){$/;"	f
EnterHalt	User\hal\src\HAL_rtc.c	/^void EnterHalt(unsigned short s)\/\/��SΪ��λ����$/;"	f
RTC_InitStr	User\hal\src\HAL_rtc.c	/^RTC_InitTypeDef   RTC_InitStr;$/;"	v
RTC_Periph_Init	User\hal\src\HAL_rtc.c	/^void RTC_Periph_Init(void)$/;"	f
RTC_TimeStr	User\hal\src\HAL_rtc.c	/^RTC_TimeTypeDef   RTC_TimeStr;$/;"	v
RTC_restart	User\hal\src\HAL_rtc.c	/^void RTC_restart(unsigned short s)$/;"	f
USE_LSE	User\hal\src\HAL_rtc.c	6;"	d	file:
SPI_Configuration	User\hal\src\HAL_spi.c	/^void SPI_Configuration(void)$/;"	f
SPI_SendByte	User\hal\src\HAL_spi.c	/^u8  SPI_SendByte(SPI_TypeDef *SPIx, u8 byte)$/;"	f
SPI_FLASH_EraseBlock	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_EraseBlock(u32 FlashAddr)$/;"	f
SPI_FLASH_EraseSector	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_EraseSector(u32 FlashAddr)$/;"	f
SPI_FLASH_Init	User\hal\src\HAL_spi_flash.c	/^void  SPI_FLASH_Init(void) $/;"	f
SPI_FLASH_ReadBuffer	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_ReadBuffer(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)$/;"	f
SPI_FLASH_WaitForWriteEnd	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_WaitForWriteEnd(void)$/;"	f
SPI_FLASH_WriteBuffer	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_WriteBuffer(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)$/;"	f
SPI_FLASH_WritePage	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_WritePage(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)$/;"	f
SPI_FLASH_get_index	User\hal\src\HAL_spi_flash.c	/^u8 SPI_FLASH_get_index(u32 *flash_index)$/;"	f
SPI_FLASH_set_index	User\hal\src\HAL_spi_flash.c	/^void SPI_FLASH_set_index(u32 flash_index, u8 flash_found)$/;"	f
SPI_Flash_WriteEnable	User\hal\src\HAL_spi_flash.c	/^void SPI_Flash_WriteEnable(void)$/;"	f
spi_flash_found	User\hal\src\HAL_spi_flash.c	/^u8 volatile spi_flash_found;$/;"	v
spi_flash_index	User\hal\src\HAL_spi_flash.c	/^u32 volatile spi_flash_index;$/;"	v
spi_flash_list	User\hal\src\HAL_spi_flash.c	/^SPI_FLASH_CMD spi_flash_list[]=$/;"	v
HAL_TIM2_config	User\hal\src\HAL_tim.c	/^void HAL_TIM2_config(void){$/;"	f
HAL_TIM4_Value	User\hal\src\HAL_tim.c	/^void HAL_TIM4_Value(void){$/;"	f
HAL_TIM4_config	User\hal\src\HAL_tim.c	/^void HAL_TIM4_config(void)$/;"	f
HalTim2_StrPar	User\hal\src\HAL_tim.c	/^Tim_STRUCT  HalTim4_StrPar,HalTim2_StrPar;$/;"	v
HalTim4_StrPar	User\hal\src\HAL_tim.c	/^Tim_STRUCT  HalTim4_StrPar,HalTim2_StrPar;$/;"	v
HAL_RS485_TxNbyte	User\hal\src\HAL_usart.c	/^void HAL_RS485_TxNbyte(u8 *dat,u16 num,u8 usart_num)$/;"	f
HAL_UART2_IERecieve	User\hal\src\HAL_usart.c	/^void HAL_UART2_IERecieve(u8 dat){$/;"	f
HAL_UART3_IERecieve	User\hal\src\HAL_usart.c	/^void HAL_UART3_IERecieve(u8 dat){$/;"	f
HAL_USART_SendByte	User\hal\src\HAL_usart.c	/^void HAL_USART_SendByte(u8 data,u8 usart_num)$/;"	f
HAL_USART_SendString	User\hal\src\HAL_usart.c	/^void HAL_USART_SendString(u8 *p,u8 usart_num)$/;"	f
HAL_USART_SendStringN	User\hal\src\HAL_usart.c	/^void HAL_USART_SendStringN(u8 *p, u16 num,u8 usart_num)$/;"	f
HAL_USART_config	User\hal\src\HAL_usart.c	/^void HAL_USART_config(void){$/;"	f
UART2	User\hal\src\HAL_usart.c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:UART_STRUCT
UART2_ValueInit	User\hal\src\HAL_usart.c	/^static void UART2_ValueInit(void)$/;"	f	file:
UART3	User\hal\src\HAL_usart.c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:
UART3_ValueInit	User\hal\src\HAL_usart.c	/^static void UART3_ValueInit(void)$/;"	f	file:
g_usart_rx_control_struct	User\hal\src\HAL_usart.c	/^static USART_RX_Control_Struct   g_usart_rx_control_struct = {0};$/;"	v	file:
putchar	User\hal\src\HAL_usart.c	/^int putchar(int c)$/;"	f
received_data_from_rs485	User\hal\src\HAL_usart.c	/^void received_data_from_rs485(uint8_t data)$/;"	f
usart_delay	User\hal\src\HAL_usart.c	/^void usart_delay(void)$/;"	f
DEVICE_init	User\main.c	/^static void DEVICE_init(void){$/;"	f	file:
Main_StrPar	User\main.c	/^Main_STRUCT  Main_StrPar;$/;"	v
WORK_VALUE_init	User\main.c	/^static void WORK_VALUE_init(void){$/;"	f	file:
main	User\main.c	/^void main(void){$/;"	f
CmdStartByte	User\main.h	/^  u8 CmdStartByte[2];$/;"	m	struct:__anon332
DEBUG_DDA_TO_MCU	User\main.h	44;"	d
DEBUG_MCU_STATUS	User\main.h	43;"	d
DEBUG_MCU_TO_DDA	User\main.h	42;"	d
Init_LED1_ShakeFlag	User\main.h	/^  u8 Init_LED1_ShakeFlag;				\/\/LED1��˸��־$/;"	m	struct:__anon332
Init_LED_AlternateShakeFlag	User\main.h	/^  u8 Init_LED_AlternateShakeFlag;		\/\/LED������˸��־$/;"	m	struct:__anon332
Init_LED_ShakeFlag	User\main.h	/^  u8 Init_LED_ShakeFlag;				\/\/ALL LED��˸��־$/;"	m	struct:__anon332
Main_STRUCT	User\main.h	/^}Main_STRUCT;$/;"	t	typeref:struct:__anon332
SPIDER_CMD1_TIME	User\main.h	53;"	d
SPIDER_CMD_TIME	User\main.h	52;"	d
SpidOrH3v4Flag	User\main.h	/^  u8 SpidOrH3v4Flag;  $/;"	m	struct:__anon332
USART_MAX_DATA_SIZE	User\main.h	49;"	d
_BV	User\main.h	46;"	d
_MAIN_H	User\main.h	2;"	d
INTERRUPT_HANDLER_TRAP	User\stm8l15x_it.c	/^INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)$/;"	f
__STM8L15x_IT_H	User\stm8l15x_it.h	23;"	d
SYSCLK_HSE_Init	User\sysclk.c	/^void SYSCLK_HSE_Init(void){$/;"	f
SYSCLK_HSI_Init	User\sysclk.c	/^void SYSCLK_HSI_Init(void)$/;"	f
_SYSCLK_H_	User\sysclk.h	3;"	d
APP_Screen	si\STM8-Screen.si4project\Backup\APP_Screen(5105).c	/^Screen_Struct	APP_Screen;$/;"	v
APP_Screen_Ack	si\STM8-Screen.si4project\Backup\APP_Screen(5105).c	/^Screen_Ack_Struct APP_Screen_Ack;$/;"	v
APP_Screen_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_Screen(5105).c	/^void APP_Screen_dealSendCmdToSpider(void){$/;"	f
Data	si\STM8-Screen.si4project\Backup\APP_Screen(6624).h	/^	u8	Data[Screen_Ack_Lenght];		\/\/数据$/;"	m	struct:__anon3
Screen_Ack_Lenght	si\STM8-Screen.si4project\Backup\APP_Screen(6624).h	7;"	d
Screen_Ack_Struct	si\STM8-Screen.si4project\Backup\APP_Screen(6624).h	/^}Screen_Ack_Struct;						\/\/Screen to DDA receipt $/;"	t	typeref:struct:__anon3
Status	si\STM8-Screen.si4project\Backup\APP_Screen(6624).h	/^	u16	Status;							\/\/状态$/;"	m	struct:__anon3
__APP_CAMERA_H	si\STM8-Screen.si4project\Backup\APP_Screen(6624).h	2;"	d
APP_Screen	si\STM8-Screen.si4project\Backup\APP_Screen(8045).c	/^Screen_Struct	APP_Screen;$/;"	v
APP_Screen_Ack	si\STM8-Screen.si4project\Backup\APP_Screen(8045).c	/^Screen_Ack_Struct APP_Screen_Ack;$/;"	v
APP_Screen_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_Screen(8045).c	/^void APP_Screen_dealSendCmdToSpider(void){$/;"	f
APP_Screen_Ack	si\STM8-Screen.si4project\Backup\APP_Screen(809).c	/^Screen_Ack_Struct APP_Screen_Ack;$/;"	v
APP_Screen_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_Screen(809).c	/^void APP_Screen_dealSendCmdToSpider(void){$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(2480).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(3056).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4164).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(4463).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5286).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(546).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(5957).c	/^void ultrasonic_delay(void)$/;"	f
APP_ULTRASONIC	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^ULTRAS_STRUCT  APP_ULTRASONIC;$/;"	v
APP_Ultrasonic_ConfigInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void APP_Ultrasonic_ConfigInit(void)$/;"	f
APP_Ultrasonic_FixedPollState	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void APP_Ultrasonic_FixedPollState(void)$/;"	f
APP_Ultrasonic_UartRxDealforInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void APP_Ultrasonic_UartRxDealforInit(void)$/;"	f
APP_Ultrasonic_UartRxDealforWork	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void APP_Ultrasonic_UartRxDealforWork(void)$/;"	f
APP_Ultrasonic_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void APP_Ultrasonic_UsartDealForInit(void)$/;"	f
APP_Ultrasonic_ValueInit	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void APP_Ultrasonic_ValueInit(void)$/;"	f
ULTRASONIC_PRINT_SWITCH	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	5;"	d	file:
Ultrasonic_CmdCrcCal	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^unsigned char Ultrasonic_CmdCrcCal(unsigned char *pdata, unsigned int len)$/;"	f
Ultrasonic_PollAddrCMD	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^const static u8 Ultrasonic_PollAddrCMD[3] = {0xFA, 0xF9, 0x03};$/;"	v	file:
g_ultrasonic_control_struct	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^static Ultrasonic_Control_Struct   g_ultrasonic_control_struct   = {0};$/;"	v	file:
g_ultrasonic_temporary_buffer	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^static Ultrasonic_Temporary_Buffer g_ultrasonic_temporary_buffer = {0};$/;"	v	file:
halt_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void halt_send_U_package(void)$/;"	f
start_send_U_package	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void start_send_U_package(void)$/;"	f
ultrasonic_delay	si\STM8-Screen.si4project\Backup\APP_Ultrasonic(6852).c	/^void ultrasonic_delay(void)$/;"	f
EQUIPMENTCHAR1	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	4;"	d
EQUIPMENTCHAR2	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	5;"	d
SNFLAGADD	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	8;"	d
SNFLAGDATA	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	9;"	d
SNHAVEADD	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	11;"	d
SNLENG	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	7;"	d
SNSTARTADD	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	6;"	d
SN_STRUCT	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	/^}SN_STRUCT;$/;"	t	typeref:struct:__anon1
SNdata	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	/^	u8 SNdata[SNLENG];$/;"	m	struct:__anon1
SNflag	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	/^	u8 SNflag;$/;"	m	struct:__anon1
_APP_FLASH_H_	si\STM8-Screen.si4project\Backup\APP_flash(4476).h	2;"	d
EQUIPMENTCHAR1	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	4;"	d
EQUIPMENTCHAR2	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	5;"	d
SNFLAGADD	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	8;"	d
SNFLAGDATA	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	9;"	d
SNHAVEADD	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	11;"	d
SNLENG	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	7;"	d
SNSTARTADD	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	6;"	d
SN_STRUCT	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	/^}SN_STRUCT;$/;"	t	typeref:struct:__anon2
SNdata	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	/^	u8 SNdata[SNLENG];$/;"	m	struct:__anon2
SNflag	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	/^	u8 SNflag;$/;"	m	struct:__anon2
_APP_FLASH_H_	si\STM8-Screen.si4project\Backup\APP_flash(6498).h	2;"	d
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(1599).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(1599).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(1599).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(2756).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(2756).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(2756).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(3510).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(3510).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(3510).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(4541).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(4541).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(4541).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(5010).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(5010).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(5010).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(5180).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(5180).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(5180).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(5424).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(5424).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(5424).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_nor_mode_FixedTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(6086).c	/^void APP_nor_mode_FixedTask(void){$/;"	f
APP_nor_mode_RealTask	si\STM8-Screen.si4project\Backup\APP_nor_mode(6086).c	/^static void APP_nor_mode_RealTask(void){$/;"	f	file:
APP_nor_mode_SysNormalMode	si\STM8-Screen.si4project\Backup\APP_nor_mode(6086).c	/^void APP_nor_mode_SysNormalMode(void){$/;"	f
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^const static u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v	file:
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(1551).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^  u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(3586).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^const static u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v	file:
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(3652).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^const static u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v	file:
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(4892).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^const static u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v	file:
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(4928).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^  u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(6914).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^const static u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v	file:
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(72).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
APP_SPIDER	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^SPIDER_STRUCT  APP_SPIDER;$/;"	v
APP_Spider_ReadyOnNet	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_Spider_ReadyOnNet(void){$/;"	f
APP_Spider_dealSendCmdToSpider	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_Spider_dealSendCmdToSpider(void){$/;"	f
APP_spider_FastCmdLEDshake	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_spider_FastCmdLEDshake(void)$/;"	f
APP_spider_IEPIN_deal	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_spider_IEPIN_deal(void)$/;"	f
APP_spider_UsartDealForInit	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_spider_UsartDealForInit(void)$/;"	f
APP_spider_ValueInit	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_spider_ValueInit(void){$/;"	f
APP_spider_init	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_spider_init(void){$/;"	f
APP_spider_uartDeal	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^void APP_spider_uartDeal(void){$/;"	f
SPIDER_WORK_DATA	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^const static u8 SPIDER_WORK_DATA[42] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,$/;"	v	file:
Spider_IEPIN_StatusDeal	si\STM8-Screen.si4project\Backup\APP_spider(8183).c	/^static void Spider_IEPIN_StatusDeal(unsigned char *data)$/;"	f	file:
HAL_KEY_Scan	si\STM8-Screen.si4project\Backup\HAL_key(1994).c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	si\STM8-Screen.si4project\Backup\HAL_key(1994).c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	si\STM8-Screen.si4project\Backup\HAL_key(1994).c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	si\STM8-Screen.si4project\Backup\HAL_key(1994).c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(1994).c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(1994).c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_KEY_Scan	si\STM8-Screen.si4project\Backup\HAL_key(3058).c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	si\STM8-Screen.si4project\Backup\HAL_key(3058).c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	si\STM8-Screen.si4project\Backup\HAL_key(3058).c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	si\STM8-Screen.si4project\Backup\HAL_key(3058).c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(3058).c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(3058).c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_KEY_Scan	si\STM8-Screen.si4project\Backup\HAL_key(3504).c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	si\STM8-Screen.si4project\Backup\HAL_key(3504).c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	si\STM8-Screen.si4project\Backup\HAL_key(3504).c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	si\STM8-Screen.si4project\Backup\HAL_key(3504).c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(3504).c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(3504).c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_KEY_Scan	si\STM8-Screen.si4project\Backup\HAL_key(6002).c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	si\STM8-Screen.si4project\Backup\HAL_key(6002).c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	si\STM8-Screen.si4project\Backup\HAL_key(6002).c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	si\STM8-Screen.si4project\Backup\HAL_key(6002).c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(6002).c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(6002).c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_KEY_Scan	si\STM8-Screen.si4project\Backup\HAL_key(7243).c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	si\STM8-Screen.si4project\Backup\HAL_key(7243).c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	si\STM8-Screen.si4project\Backup\HAL_key(7243).c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	si\STM8-Screen.si4project\Backup\HAL_key(7243).c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(7243).c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(7243).c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_KEY_Scan	si\STM8-Screen.si4project\Backup\HAL_key(7244).c	/^void HAL_KEY_Scan(void){$/;"	f
HAL_KEY_Value	si\STM8-Screen.si4project\Backup\HAL_key(7244).c	/^void HAL_KEY_Value(void){$/;"	f
HAL_KEY_config	si\STM8-Screen.si4project\Backup\HAL_key(7244).c	/^void HAL_KEY_config(void){$/;"	f
HAL_KEY_deal	si\STM8-Screen.si4project\Backup\HAL_key(7244).c	/^void HAL_KEY_deal(void){$/;"	f
HalKey1_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(7244).c	/^KEY_STRUCT HalKey1_StrPar;$/;"	v
HalKey2_StrPar	si\STM8-Screen.si4project\Backup\HAL_key(7244).c	/^KEY_STRUCT HalKey2_StrPar;$/;"	v
HAL_RS485_TxNbyte	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_RS485_TxNbyte(u8 *dat,u16 num,u8 usart_num)$/;"	f
HAL_UART2_IERecieve	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_UART2_IERecieve(u8 dat){$/;"	f
HAL_UART3_IERecieve	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_UART3_IERecieve(u8 dat){$/;"	f
HAL_USART_SendByte	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_USART_SendByte(u8 data,u8 usart_num)$/;"	f
HAL_USART_SendString	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_USART_SendString(u8 *p,u8 usart_num)$/;"	f
HAL_USART_SendStringN	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_USART_SendStringN(u8 *p, u16 num,u8 usart_num)$/;"	f
HAL_USART_config	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void HAL_USART_config(void){$/;"	f
UART2	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:UART_STRUCT
UART2_ValueInit	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^static void UART2_ValueInit(void)$/;"	f	file:
UART3	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:
UART3_ValueInit	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^static void UART3_ValueInit(void)$/;"	f	file:
g_usart_rx_control_struct	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^static USART_RX_Control_Struct   g_usart_rx_control_struct = {0};$/;"	v	file:
putchar	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^int putchar(int c)$/;"	f
received_data_from_rs485	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void received_data_from_rs485(uint8_t data)$/;"	f
usart_delay	si\STM8-Screen.si4project\Backup\HAL_usart(5537).c	/^void usart_delay(void)$/;"	f
HAL_RS485_TxNbyte	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_RS485_TxNbyte(u8 *dat,u16 num,u8 usart_num)$/;"	f
HAL_UART2_IERecieve	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_UART2_IERecieve(u8 dat){$/;"	f
HAL_UART3_IERecieve	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_UART3_IERecieve(u8 dat){$/;"	f
HAL_USART_SendByte	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_USART_SendByte(u8 data,u8 usart_num)$/;"	f
HAL_USART_SendString	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_USART_SendString(u8 *p,u8 usart_num)$/;"	f
HAL_USART_SendStringN	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_USART_SendStringN(u8 *p, u16 num,u8 usart_num)$/;"	f
HAL_USART_config	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void HAL_USART_config(void){$/;"	f
UART2	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:UART_STRUCT
UART2_ValueInit	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^static void UART2_ValueInit(void)$/;"	f	file:
UART3	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:
UART3_ValueInit	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^static void UART3_ValueInit(void)$/;"	f	file:
g_usart_rx_control_struct	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^static USART_RX_Control_Struct   g_usart_rx_control_struct = {0};$/;"	v	file:
putchar	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^int putchar(int c)$/;"	f
received_data_from_rs485	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void received_data_from_rs485(uint8_t data)$/;"	f
usart_delay	si\STM8-Screen.si4project\Backup\HAL_usart(6341).c	/^void usart_delay(void)$/;"	f
HAL_RS485_TxNbyte	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_RS485_TxNbyte(u8 *dat,u16 num,u8 usart_num)$/;"	f
HAL_UART2_IERecieve	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_UART2_IERecieve(u8 dat){$/;"	f
HAL_UART3_IERecieve	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_UART3_IERecieve(u8 dat){$/;"	f
HAL_USART_SendByte	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_USART_SendByte(u8 data,u8 usart_num)$/;"	f
HAL_USART_SendString	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_USART_SendString(u8 *p,u8 usart_num)$/;"	f
HAL_USART_SendStringN	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_USART_SendStringN(u8 *p, u16 num,u8 usart_num)$/;"	f
HAL_USART_config	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void HAL_USART_config(void){$/;"	f
UART2	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:UART_STRUCT
UART2_ValueInit	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^static void UART2_ValueInit(void)$/;"	f	file:
UART3	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^struct UART_STRUCT               UART2,UART3;$/;"	v	typeref:struct:
UART3_ValueInit	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^static void UART3_ValueInit(void)$/;"	f	file:
g_usart_rx_control_struct	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^static USART_RX_Control_Struct   g_usart_rx_control_struct = {0};$/;"	v	file:
putchar	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^int putchar(int c)$/;"	f
received_data_from_rs485	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void received_data_from_rs485(uint8_t data)$/;"	f
usart_delay	si\STM8-Screen.si4project\Backup\HAL_usart(7483).c	/^void usart_delay(void)$/;"	f
CmdStartByte	si\STM8-Screen.si4project\Backup\main(1784).h	/^  u8 CmdStartByte[2];$/;"	m	struct:__anon4
DEBUG_DDA_TO_MCU	si\STM8-Screen.si4project\Backup\main(1784).h	42;"	d
DEBUG_MCU_STATUS	si\STM8-Screen.si4project\Backup\main(1784).h	41;"	d
DEBUG_MCU_TO_DDA	si\STM8-Screen.si4project\Backup\main(1784).h	40;"	d
Init_LED1_ShakeFlag	si\STM8-Screen.si4project\Backup\main(1784).h	/^  u8 Init_LED1_ShakeFlag;				\/\/LED1��˸��־$/;"	m	struct:__anon4
Init_LED_AlternateShakeFlag	si\STM8-Screen.si4project\Backup\main(1784).h	/^  u8 Init_LED_AlternateShakeFlag;		\/\/LED������˸��־$/;"	m	struct:__anon4
Init_LED_ShakeFlag	si\STM8-Screen.si4project\Backup\main(1784).h	/^  u8 Init_LED_ShakeFlag;				\/\/ALL LED��˸��־$/;"	m	struct:__anon4
Main_STRUCT	si\STM8-Screen.si4project\Backup\main(1784).h	/^}Main_STRUCT;$/;"	t	typeref:struct:__anon4
SPIDER_CMD1_TIME	si\STM8-Screen.si4project\Backup\main(1784).h	51;"	d
SPIDER_CMD_TIME	si\STM8-Screen.si4project\Backup\main(1784).h	50;"	d
USART_MAX_DATA_SIZE	si\STM8-Screen.si4project\Backup\main(1784).h	47;"	d
_BV	si\STM8-Screen.si4project\Backup\main(1784).h	44;"	d
_MAIN_H	si\STM8-Screen.si4project\Backup\main(1784).h	2;"	d
CmdStartByte	si\STM8-Screen.si4project\Backup\main(3200).h	/^  u8 CmdStartByte[2];$/;"	m	struct:__anon5
Init_LED1_ShakeFlag	si\STM8-Screen.si4project\Backup\main(3200).h	/^  u8 Init_LED1_ShakeFlag;				\/\/LED1��˸��־$/;"	m	struct:__anon5
Init_LED_AlternateShakeFlag	si\STM8-Screen.si4project\Backup\main(3200).h	/^  u8 Init_LED_AlternateShakeFlag;		\/\/LED������˸��־$/;"	m	struct:__anon5
Init_LED_ShakeFlag	si\STM8-Screen.si4project\Backup\main(3200).h	/^  u8 Init_LED_ShakeFlag;				\/\/ALL LED��˸��־$/;"	m	struct:__anon5
Main_STRUCT	si\STM8-Screen.si4project\Backup\main(3200).h	/^}Main_STRUCT;$/;"	t	typeref:struct:__anon5
SPIDER_CMD1_TIME	si\STM8-Screen.si4project\Backup\main(3200).h	49;"	d
SPIDER_CMD_TIME	si\STM8-Screen.si4project\Backup\main(3200).h	48;"	d
USART_MAX_DATA_SIZE	si\STM8-Screen.si4project\Backup\main(3200).h	45;"	d
_BV	si\STM8-Screen.si4project\Backup\main(3200).h	42;"	d
_MAIN_H	si\STM8-Screen.si4project\Backup\main(3200).h	2;"	d
DEVICE_init	si\STM8-Screen.si4project\Backup\main(4621).c	/^static void DEVICE_init(void){$/;"	f	file:
Main_StrPar	si\STM8-Screen.si4project\Backup\main(4621).c	/^Main_STRUCT  Main_StrPar;$/;"	v
WORK_VALUE_init	si\STM8-Screen.si4project\Backup\main(4621).c	/^static void WORK_VALUE_init(void){$/;"	f	file:
main	si\STM8-Screen.si4project\Backup\main(4621).c	/^void main(void){$/;"	f
DEVICE_init	si\STM8-Screen.si4project\Backup\main(5134).c	/^static void DEVICE_init(void){$/;"	f	file:
Main_StrPar	si\STM8-Screen.si4project\Backup\main(5134).c	/^Main_STRUCT  Main_StrPar;$/;"	v
WORK_VALUE_init	si\STM8-Screen.si4project\Backup\main(5134).c	/^static void WORK_VALUE_init(void){$/;"	f	file:
main	si\STM8-Screen.si4project\Backup\main(5134).c	/^void main(void){$/;"	f
DEVICE_init	si\STM8-Screen.si4project\Backup\main(6945).c	/^static void DEVICE_init(void){$/;"	f	file:
Main_StrPar	si\STM8-Screen.si4project\Backup\main(6945).c	/^Main_STRUCT  Main_StrPar;$/;"	v
WORK_VALUE_init	si\STM8-Screen.si4project\Backup\main(6945).c	/^static void WORK_VALUE_init(void){$/;"	f	file:
main	si\STM8-Screen.si4project\Backup\main(6945).c	/^void main(void){$/;"	f
INTERRUPT_HANDLER_TRAP	si\STM8-Screen.si4project\Backup\stm8l15x_it(270).c	/^INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)$/;"	f
INTERRUPT_HANDLER_TRAP	si\STM8-Screen.si4project\Backup\stm8l15x_it(3824).c	/^INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
